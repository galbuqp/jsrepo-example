{"version":3,"sources":["../package.json","../src/commands/add.ts","../src/utils/ascii.ts","../src/utils/blocks/ts/array.ts","../src/utils/build/index.ts","../src/utils/blocks/ts/pad.ts","../src/utils/blocks/ts/lines.ts","../src/utils/files.ts","../src/utils/blocks/package-managers/flags.ts","../src/utils/persisted.ts","../src/utils/token-manager.ts","../src/utils/ai.ts","../src/utils/context.ts","../src/utils/diff.ts","../src/utils/get-latest-version.ts","../src/utils/parse-package-name.ts","../src/utils/package.ts","../src/utils/prompts.ts","../src/utils/dependencies.ts","../src/utils/language-support/css.ts","../src/utils/language-support/html.ts","../src/utils/language-support/javascript.ts","../src/utils/language-support/json.ts","../src/utils/language-support/sass.ts","../src/utils/language-support/svelte.ts","../src/utils/language-support/svg.ts","../src/utils/language-support/vue.ts","../src/utils/language-support/yaml.ts","../src/utils/language-support/index.ts","../src/utils/build/check.ts","../src/utils/config.ts","../src/utils/registry-providers/internal.ts","../src/utils/blocks.ts","../src/utils/blocks/ts/promises.ts","../src/utils/format.ts","../src/utils/get-watermark.ts","../src/utils/preconditions.ts","../src/commands/auth.ts","../src/commands/build.ts","../src/commands/exec.ts","../src/commands/init.ts","../src/commands/test.ts","../src/commands/update.ts","../src/cli.ts","../src/index.ts"],"names":["package_default","unicode","isUnicodeSupported","s","c","fallback","S_STEP_ACTIVE","S_SUCCESS","S_WARN","S_ERROR","VERTICAL_LINE","color","HORIZONTAL_LINE","TOP_RIGHT_CORNER","BOTTOM_RIGHT_CORNER","JUNCTION_RIGHT","JUNCTION_TOP","TOP_LEFT_CORNER","BOTTOM_LEFT_CORNER","WARN","INFO","ERROR","JSREPO","fromMap","map","fn","items","key","value","sum","arr","total","item","leftPadMin","str","length","padWith","stripAsni","NEW_LINE_REGEX","get","join","lines","lineNumbers","prefix","transformed","line","i","os","bun","deno","npm","pnpm","yarn","flags","Conf","HTTP_REGISTRY_LIST_KEY","TokenManager","#storage","storage","name","secret","registries","registry","index","models","originalFile","newFile","loading","verbose","additionalInstructions","messages","apiKey","getApiKey","prompt","createUpdatePrompt","text","getNextCompletionAnthropic","unwrapCodeFromQuotes","getNextCompletionOpenAI","getNextCompletionOllama","maxTokens","model","first","OpenAI","anthropic","Anthropic","history","message","ollama","rePrompt","quoted","code","l","result","password","isCancel","cancel","packageJson","isWhitespace","trimSingleNewLine","formatDiff","from","to","changes","expand","maxUnchanged","colorRemoved","colorAdded","colorCharsRemoved","colorCharsAdded","onUnchanged","intro","change","lineOffset","linePrefix","hasPreviousChange","hasNextChange","prevLineOffset","ls","shownLines","count","colorLineChange","colorCharChange","sentence","diffChars","chg","LATEST_VERSION_KEY","EXPIRATION_TIME","getLatestVersion","noCache","version","latestVersion","Ok","controller","timeout","response","nodeFetch","Err","ver","err","RE_SCOPED","RE_NON_SCOPED","parsePackageName","input","m","findNearestPackageJson","startDir","until","packagePath","path","fs","segments","getPackage","contents","cleanVersion","returnShouldInstall","dependencies","devDependencies","cwd","tempDeps","tempDevDeps","packageResult","pkg","dep","foundDep","semver","runTasks","tasks","task","runTasksConcurrently","startMessage","stopMessage","t","_spinner","spinner","msg","nextSteps","steps","box","boxen","truncatedList","maxLength","truncated","remaining","newerVersionAvailable","oldVersion","newVersion","pm","detect","installCommand","resolveCommand","_intro","MODEL_PREFERENCE_KEY","promptUpdateFile","incoming","current","config","options","acceptedChanges","updatedContent","messageHistory","diffLines","formattedDiff","totalChanges","a","confirmOptions","confirmResult","select","modelResult","val","content","log","formatFile","promptInstallDependencies","deps","devDeps","yes","no","ignoreWorkspace","install","confirm","installDependencies","taskLog","title","BAR","ACTIVE","SUCCESS","output","frame","clear","eraseTitle","terminalWidth","height","cursor","erase","print","limit","data","frameHeight","dev","args","noWorkspace","add","program","proc","execa","templatePattern","resolveLocalDependencyTemplate","template","destPath","destDir","_","category","relative","transformRemoteContent","file","imports","watermark","prettierOptions","biomeOptions","lang","languages","literal","resolvedImport","literalRegex","escapeStringRegexp","formatter","newContent","matchJSDescendant","searchFilePath","MATCH_EXTENSIONS","endsWithOneOf","dir","files","parsedSearch","tryGetTsconfig","searchPath","getTsconfig","css","fileName","filePath","isSubDir","excludeDeps","dirs","containingDir","sourceCode","parseResult","resolveResult","resolveImports","imp","formatError","biome","Biome","Distribution","html","ast","walk","node","enter","n","attr","So","getJavascriptImports","oxc","modules","mod","exp","entry","typescript","Po","format","Eo","json","jsonc","sass","To","No","svelte","root","plugin","Lo","prettierPluginSvelte","svg","vue","parsed","mods","Wo","yaml","Uo","moduleSpecifiers","doNotInstall","errors","localDeps","specifier","builtinModules","localDep","resolveLocalImport","depInfo","validatePackageName","tryResolveLocalAlias","resolveRemoteDeps","dropExtension","alias","categoryDir","modPath","fullDir","parsePath","containingPath","absPath","localPath","block","rest","trimmedBlock","blockSpecifier","configResult","matcher","createPathsMatcher","paths","foundMod","searchForModule","pathResolved","shouldDropExtension","resolutionEquality","pathA","pathB","validExtensions","parsedA","parsedB","pathAWithoutExtension","pathBWithoutExtension","containing","modParsed","newPath","fileParsed","prettyPath","exemptDeps","pkgPath","packageDevDependencies","packageDependencies","FRAMEWORKS","ruleLevelSchema","ruleKeySchema","rules","manifest","depCategoryName","depBlockName","depCategory","cat","error","b","categoryName","chain","searchForDep","listedBlocks","frameworkDeps","d","frameworkDep","configFile","ruleConfigSchema","DEFAULT_CONFIG","runRules","ruleConfig","warnings","rule","conf","level","ruleErrors","search","categories","newChain","blockName","depBlock","found","isDependedOn","TEST_SUFFIXES","isTestFile","suffix","buildBlocksDirectory","blocksPath","ignore","categoryPath","dirName","shouldIncludeCategory","listCategory","shouldListCategory","blockDir","transformBlockName","listBlock","shouldListBlock","shouldIncludeBlock","resolver","testsPath","f","local","localDepsSet","depsSet","devDepsSet","hasTests","blockFiles","walkFiles","base","relativeFilePath","subFiles","imps","k","v","buildConfigFiles","configFiles","pruneUnused","pruned","catBlocks","PROJECT_CONFIG_NAME","REGISTRY_CONFIG_NAME","formatterSchema","pathsSchema","projectConfigSchema","getProjectConfig","registryConfigSchema","manifestMeta","peerDependencySchema","configFileSchema","getRegistryConfig","resolvePaths","newPaths","p","resolved","tryResolvePath","unresolvedPath","getPathForBlock","resolvedPaths","directory","internalFetchRaw","state","resourcePath","fetchRaw","getProviderToken","internalFetchManifest","fetchManifest","provider","url","getProviderState","repo","selectProvider","http","cached","providers","forEachPathGetProviderState","repos","getProviderResult","providerState","fetchBlocks","blocksMap","getManifestResult","getRemoteBlocks","manifests","fetchManifests","resolveTree","blockSpecifiers","repoPaths","installed","blocks","repoIdent","tempBlock","subDeps","getInstalled","installedBlocks","baseDir","blockPath","preloadBlocks","preloaded","includedFiles","getBlockFilePath","noopPromise","res","loadFormatterConfig","mn","configPath","getWatermark","repoUrl","checkPreconditions","incompatible","expected","msgs","last","versionMessage","schema","te","Command","blockNames","opts","_add","outro","noConfig","shouldContinue","mustResolveRepos","resolveAllRepos","repoPath","resolvedRepos","installingBlockNames","promptResult","multiselect","shortName","blockExists","label","installingBlocks","store","zeroConfigKey","zeroConfigParsed","zeroConfig","includeTests","addWatermark","defaultFormatter","updatedBlocks","overwriteAll","preloadedBlocks","updatedFiles","preloadedBlock","fullSpecifier","shortSpecifier","overwriteBlocks","installing","spec","overwrite","remoteContent","localContent","updateResult","updatedFile","folder","installResult","cmd","step","next","je","services","auth","Argument","service","_auth","configuredRegistries","selectedService","promptHttpLogout","serviceName","selectedRegistry","registryUrl","IGNORED_DIRS","I","build","MANIFEST_FILE","_build","mergedVal","outDir","manifestOut","oldManifest","parseManifest","newDirPath","ig","ignoreFile","dirPath","builtCategories","createManifest","warning","prunedCategories","originalPath","ae","exec","script","command","_exec","tempDirBase","tempDirectoryRelative","tempDirectory","resolvedPathsResult","addedBlocks","providerInfo","getSourceFile","sourceFile","sourcePath","pathFolder","packageContent","startIndex","arg","passthroughArgs","runningBlock","z","init","Option","_initProject","_initRegistry","initialConfig","tsconfigResult","defaultPathResult","setupRepo","promptForRegistryConfig","r","configContent","tokenKey","fullFilePath","fileContents","matchedPath","originalRemoteContent","configurePaths","configuredValue","alreadyInstalled","installAsDevDependency","jsonConfig","buildScript","runScript","de","test","_test","tempTestDirectory","cleanUp","testingBlocks","testingBlocksMapped","parsedRepo","testFiles","testFile","moduleSpecifier","newModuleSpecifier","testCommand","re","update","_update","updatingBlockNames","updatingBlocks","cli"],"mappings":"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","file":"index.js","sourcesContent":["{\n\t\"name\": \"jsrepo\",\n\t\"description\": \"A CLI to add shared code from remote repositories.\",\n\t\"version\": \"1.45.1\",\n\t\"license\": \"MIT\",\n\t\"homepage\": \"https://jsrepo.dev\",\n\t\"author\": {\n\t\t\"name\": \"Aidan Bleser\",\n\t\t\"url\": \"https://github.com/ieedan\"\n\t},\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"git+https://github.com/ieedan/jsrepo\"\n\t},\n\t\"bugs\": {\n\t\t\"url\": \"https://github.com/ieedan/jsrepo/issues\"\n\t},\n\t\"keywords\": [\n\t\t\"repo\",\n\t\t\"cli\",\n\t\t\"svelte\",\n\t\t\"vue\",\n\t\t\"typescript\",\n\t\t\"javascript\",\n\t\t\"shadcn\",\n\t\t\"registry\"\n\t],\n\t\"type\": \"module\",\n\t\"exports\": {\n\t\t\".\": {\n\t\t\t\"types\": \"./dist/api/index.d.ts\",\n\t\t\t\"default\": \"./dist/api/index.js\"\n\t\t}\n\t},\n\t\"bin\": \"./dist/index.js\",\n\t\"main\": \"./dist/index.js\",\n\t\"files\": [\n\t\t\"./schemas/**/*\",\n\t\t\"dist/**/*\"\n\t],\n\t\"scripts\": {\n\t\t\"start\": \"tsup --silent && node ./dist/index.js\",\n\t\t\"build\": \"tsup\",\n\t\t\"format\": \"biome format --write\",\n\t\t\"lint\": \"biome lint --write\",\n\t\t\"check\": \"biome check && tsc\",\n\t\t\"test\": \"vitest\",\n\t\t\"check:types\": \"tsc\",\n\t\t\"build:docs\": \"pnpm dlx tsx ./scripts/generate-docs.ts ../../sites/docs/static/docs/cli/llms.txt\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@biomejs/biome\": \"1.9.4\",\n\t\t\"@types/diff\": \"^7.0.1\",\n\t\t\"@types/node\": \"^22.13.10\",\n\t\t\"@types/semver\": \"^7.5.8\",\n\t\t\"@types/validate-npm-package-name\": \"^4.0.2\",\n\t\t\"tsup\": \"^8.4.0\",\n\t\t\"typescript\": \"^5.8.2\",\n\t\t\"vitest\": \"^3.0.9\"\n\t},\n\t\"dependencies\": {\n\t\t\"@anthropic-ai/sdk\": \"^0.39.0\",\n\t\t\"@biomejs/js-api\": \"^0.7.1\",\n\t\t\"@biomejs/wasm-nodejs\": \"^1.9.4\",\n\t\t\"@clack/prompts\": \"^0.10.0\",\n\t\t\"boxen\": \"^8.0.1\",\n\t\t\"chalk\": \"^5.4.1\",\n\t\t\"commander\": \"^13.1.0\",\n\t\t\"conf\": \"^13.1.0\",\n\t\t\"css-dependency\": \"^0.0.3\",\n\t\t\"diff\": \"^7.0.0\",\n\t\t\"escape-string-regexp\": \"^5.0.0\",\n\t\t\"estree-walker\": \"^3.0.3\",\n\t\t\"execa\": \"^9.5.2\",\n\t\t\"get-tsconfig\": \"^4.10.0\",\n\t\t\"ignore\": \"^7.0.3\",\n\t\t\"is-unicode-supported\": \"^2.1.0\",\n\t\t\"node-fetch\": \"^3.3.2\",\n\t\t\"octokit\": \"^4.1.2\",\n\t\t\"ollama\": \"^0.5.14\",\n\t\t\"openai\": \"^4.87.4\",\n\t\t\"oxc-parser\": \"^0.60.0\",\n\t\t\"package-manager-detector\": \"^1.1.0\",\n\t\t\"parse5\": \"^7.2.1\",\n\t\t\"pathe\": \"^2.0.3\",\n\t\t\"prettier\": \"^3.5.3\",\n\t\t\"prettier-plugin-svelte\": \"^3.3.3\",\n\t\t\"semver\": \"^7.7.1\",\n\t\t\"sisteransi\": \"^1.0.5\",\n\t\t\"svelte\": \"^5.23.2\",\n\t\t\"valibot\": \"1.0.0\",\n\t\t\"validate-npm-package-name\": \"^6.0.0\",\n\t\t\"vue\": \"^3.5.13\"\n\t}\n}\n","import fs from 'node:fs';\nimport { cancel, confirm, isCancel, log, multiselect, outro, select, text } from '@clack/prompts';\nimport color from 'chalk';\nimport { Command, program } from 'commander';\nimport { resolveCommand } from 'package-manager-detector/commands';\nimport { detect } from 'package-manager-detector/detect';\nimport path from 'pathe';\nimport * as v from 'valibot';\nimport * as ascii from '../utils/ascii';\nimport { getBlockFilePath, getInstalled, preloadBlocks, resolveTree } from '../utils/blocks';\nimport * as promises from '../utils/blocks/ts/promises';\nimport * as url from '../utils/blocks/ts/url';\nimport {\n\ttype Formatter,\n\ttype ProjectConfig,\n\tgetProjectConfig,\n\tprojectConfigSchema,\n\tresolvePaths,\n} from '../utils/config';\nimport { transformRemoteContent } from '../utils/files';\nimport { loadFormatterConfig } from '../utils/format';\nimport { getWatermark } from '../utils/get-watermark';\nimport * as persisted from '../utils/persisted';\nimport { checkPreconditions } from '../utils/preconditions';\nimport {\n\tintro,\n\tnextSteps,\n\tpromptInstallDependencies,\n\tpromptUpdateFile,\n\tspinner,\n\ttruncatedList,\n} from '../utils/prompts';\nimport * as registry from '../utils/registry-providers/internal';\n\nconst schema = v.object({\n\texpand: v.boolean(),\n\tmaxUnchanged: v.number(),\n\trepo: v.optional(v.string()),\n\tallow: v.boolean(),\n\tyes: v.boolean(),\n\tcache: v.boolean(),\n\tverbose: v.boolean(),\n\tcwd: v.string(),\n});\n\ntype Options = v.InferInput<typeof schema>;\n\nexport const add = new Command('add')\n\t.description('Add blocks to your project.')\n\t.argument(\n\t\t'[blocks...]',\n\t\t'Names of the blocks you want to add to your project. ex: (utils/math, github/ieedan/std/utils/math)'\n\t)\n\t.option('-E, --expand', 'Expands the diff so you see the entire file.', false)\n\t.option(\n\t\t'--max-unchanged <number>',\n\t\t'Maximum unchanged lines that will show without being collapsed.',\n\t\t(val) => Number.parseInt(val), // this is such a dumb api thing\n\t\t3\n\t)\n\t.option('--repo <repo>', 'Repository to download the blocks from.')\n\t.option('-A, --allow', 'Allow jsrepo to download code from the provided repo.', false)\n\t.option('-y, --yes', 'Skip confirmation prompt.', false)\n\t.option('--no-cache', 'Disable caching of resolved git urls.')\n\t.option('--verbose', 'Include debug logs.', false)\n\t.option('--cwd <path>', 'The current working directory.', process.cwd())\n\t.action(async (blockNames, opts) => {\n\t\tconst options = v.parse(schema, opts);\n\n\t\tawait intro();\n\n\t\tawait _add(blockNames, options);\n\n\t\toutro(color.green('All done!'));\n\t});\n\nconst _add = async (blockNames: string[], options: Options) => {\n\tconst verbose = (msg: string) => {\n\t\tif (options.verbose) {\n\t\t\tconsole.info(`${ascii.INFO} ${msg}`);\n\t\t}\n\t};\n\n\tverbose(`Attempting to add ${JSON.stringify(blockNames)}`);\n\n\tconst loading = spinner({ verbose: options.verbose ? verbose : undefined });\n\n\tconst configResult = getProjectConfig(options.cwd);\n\n\t/** The user has opted for no config */\n\tconst noConfig = configResult.isErr();\n\n\tlet config: ProjectConfig;\n\n\tif (configResult.isErr()) {\n\t\tlet shouldContinue = options.yes;\n\n\t\tif (!options.yes) {\n\t\t\tconst response = await confirm({\n\t\t\t\tmessage: `You don't have ${ascii.JSREPO} initialized in your project. Do you want to continue?`,\n\t\t\t\tinitialValue: false,\n\t\t\t});\n\n\t\t\tif (isCancel(response)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tshouldContinue = response;\n\t\t}\n\n\t\tif (!shouldContinue) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\t// add default config used for default values in prompts\n\t\tconfig = {\n\t\t\t$schema: '',\n\t\t\tincludeTests: false,\n\t\t\twatermark: true,\n\t\t\tpaths: {\n\t\t\t\t'*': './src/blocks',\n\t\t\t},\n\t\t\trepos: [],\n\t\t};\n\t} else {\n\t\tconfig = configResult.unwrap();\n\t}\n\n\tlet repoPaths = config.repos;\n\tconst mustResolveRepos = new Set<string>();\n\tlet resolveAllRepos = false;\n\n\t// we just want to override all others if supplied via the CLI\n\tif (options.repo) {\n\t\trepoPaths = [options.repo];\n\t}\n\n\t// resolve repos for blocks\n\tfor (const blockSpecifier of blockNames) {\n\t\tconst provider = registry.selectProvider(blockSpecifier);\n\n\t\t// we are only getting repos for blocks that specified repos\n\t\tif (!provider) {\n\t\t\t// if a block doesn't specify a repo we must resolve all\n\t\t\tresolveAllRepos = true;\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst { url: repo } = provider.parse(blockSpecifier, { fullyQualified: true });\n\n\t\tconst alreadyExists =\n\t\t\t!config.repos.find((repoPath) => repoPath === repo) && !mustResolveRepos.has(repo);\n\n\t\tif (!alreadyExists) {\n\t\t\tif (!options.allow) {\n\t\t\t\tconst result = await confirm({\n\t\t\t\t\tmessage: `Allow ${ascii.JSREPO} to download and run code from ${color.cyan(repo)}?`,\n\t\t\t\t\tinitialValue: true,\n\t\t\t\t});\n\n\t\t\t\tif (isCancel(result) || !result) {\n\t\t\t\t\tcancel('Canceled!');\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// only add if it doesn't exist\n\t\t\trepoPaths.push(repo);\n\t\t}\n\n\t\t// this way we add the config.repos as well\n\t\tmustResolveRepos.add(repo);\n\t}\n\n\tif (!resolveAllRepos && blockNames.length > 0) {\n\t\trepoPaths = Array.from(mustResolveRepos);\n\t}\n\n\tif (!options.allow && options.repo) {\n\t\tconst result = await confirm({\n\t\t\tmessage: `Allow ${ascii.JSREPO} to download and run code from ${color.cyan(options.repo)}?`,\n\t\t\tinitialValue: true,\n\t\t});\n\n\t\tif (isCancel(result) || !result) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\t}\n\n\tif (repoPaths.length === 0) {\n\t\tif (noConfig) {\n\t\t\tprogram.error(\n\t\t\t\tcolor.red(\n\t\t\t\t\t`Fully quality blocks ex: (github/ieedan/std/utils/math) or provide the \\`${color.bold(\n\t\t\t\t\t\t'--repo'\n\t\t\t\t\t)}\\` flag to specify a registry.`\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tprogram.error(\n\t\t\tcolor.red(\n\t\t\t\t`There were no repos present in your config and you didn't provide the \\`${color.bold(\n\t\t\t\t\t'--repo'\n\t\t\t\t)}\\` flag with a repo.`\n\t\t\t)\n\t\t);\n\t}\n\n\tverbose(`Resolving ${color.cyan(repoPaths.join(', '))}`);\n\n\tif (!options.verbose) loading.start(`Fetching blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tconst resolvedRepos: registry.RegistryProviderState[] = (\n\t\tawait registry.forEachPathGetProviderState(repoPaths, { noCache: !options.cache })\n\t).match(\n\t\t(val) => val,\n\t\t({ repo, message }) => {\n\t\t\tloading.stop(`Failed to get info for ${color.cyan(repo)}`);\n\t\t\tprogram.error(color.red(message));\n\t\t}\n\t);\n\n\tverbose(`Resolved ${color.cyan(repoPaths.join(', '))}`);\n\n\tverbose(`Fetching blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tconst manifests = (await registry.fetchManifests(...resolvedRepos)).match(\n\t\t(v) => v,\n\t\t({ repo, message }) => {\n\t\t\tloading.stop(`Failed fetching blocks from ${color.cyan(repo)}`);\n\t\t\tprogram.error(color.red(message));\n\t\t}\n\t);\n\n\tconst blocksMap = registry.getRemoteBlocks(manifests);\n\n\tif (!options.verbose) loading.stop(`Retrieved blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tverbose(`Retrieved blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tfor (const manifest of manifests) {\n\t\tcheckPreconditions(manifest.state, manifest.manifest, options.cwd);\n\t}\n\n\tlet installedBlocks = getInstalled(blocksMap, config, options.cwd).map((val) => val.specifier);\n\n\tlet installingBlockNames = blockNames;\n\n\t// if no blocks are provided prompt the user for what blocks they want\n\tif (installingBlockNames.length === 0) {\n\t\tconst promptResult = await multiselect({\n\t\t\tmessage: 'Select which blocks to add.',\n\t\t\toptions: Array.from(blocksMap.entries())\n\t\t\t\t.filter(([_, value]) => value.list)\n\t\t\t\t.map(([key, value]) => {\n\t\t\t\t\tconst shortName = `${value.category}/${value.name}`;\n\n\t\t\t\t\tconst blockExists =\n\t\t\t\t\t\tinstalledBlocks.findIndex((block) => block === shortName) !== -1;\n\n\t\t\t\t\tlet label: string;\n\n\t\t\t\t\t// show the full repo if there are multiple repos\n\t\t\t\t\tif (repoPaths.length > 1) {\n\t\t\t\t\t\tlabel = `${color.cyan(url.join(value.sourceRepo.url, value.category))}/${value.name}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlabel = `${color.cyan(value.category)}/${value.name}`;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlabel: blockExists ? color.gray(label) : label,\n\t\t\t\t\t\tvalue: key,\n\t\t\t\t\t\t// show hint for `Installed` if block is already installed\n\t\t\t\t\t\thint: blockExists ? 'Installed' : undefined,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\trequired: true,\n\t\t});\n\n\t\tif (isCancel(promptResult)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tinstallingBlockNames = promptResult as string[];\n\t}\n\n\tverbose(`Installing blocks ${color.cyan(installingBlockNames.join(', '))}`);\n\n\tconst installingBlocks = (\n\t\tawait resolveTree(installingBlockNames, blocksMap, resolvedRepos)\n\t).match(\n\t\t(val) => val,\n\t\t(err) => program.error(err)\n\t);\n\n\tconst devDeps: Set<string> = new Set<string>();\n\tconst deps: Set<string> = new Set<string>();\n\n\tconst store = persisted.get();\n\n\tif (noConfig) {\n\t\tconst zeroConfigKey = `${options.cwd}-zero-config`;\n\n\t\tconst zeroConfigParsed = v.safeParse(projectConfigSchema, store.get(zeroConfigKey));\n\n\t\tconst zeroConfig = zeroConfigParsed.success ? zeroConfigParsed.output : config;\n\n\t\tconst categories = Array.from(new Set(installingBlocks.map((b) => b.category)));\n\n\t\tfor (const cat of categories) {\n\t\t\tconst blocksPath = await text({\n\t\t\t\tmessage: `Where would you like to add ${color.cyan(cat)}?`,\n\t\t\t\tplaceholder: zeroConfig ? zeroConfig.paths[cat] : `./src/${cat}`,\n\t\t\t\tinitialValue: zeroConfig ? zeroConfig.paths[cat] : `./src/${cat}`,\n\t\t\t\tdefaultValue: zeroConfig ? zeroConfig.paths[cat] : `./src/${cat}`,\n\t\t\t\tvalidate(value) {\n\t\t\t\t\tif (value.trim() === '') return 'Please provide a value';\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (isCancel(blocksPath)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tconfig.paths[cat] = blocksPath;\n\t\t}\n\n\t\tif (!options.yes) {\n\t\t\tconst includeTests = await confirm({\n\t\t\t\tmessage: 'Include tests?',\n\t\t\t\tinitialValue: zeroConfig.includeTests,\n\t\t\t});\n\n\t\t\tif (isCancel(includeTests)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tconfig.includeTests = includeTests;\n\n\t\t\tconst addWatermark = await confirm({\n\t\t\t\tmessage: 'Add watermark?',\n\t\t\t\tinitialValue: zeroConfig.watermark,\n\t\t\t});\n\n\t\t\tif (isCancel(addWatermark)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tconfig.watermark = addWatermark;\n\t\t}\n\n\t\tlet defaultFormatter = 'none';\n\n\t\tif (fs.existsSync(path.join(options.cwd, '.prettierrc'))) {\n\t\t\tdefaultFormatter = 'prettier';\n\t\t}\n\n\t\tif (fs.existsSync(path.join(options.cwd, 'biome.json'))) {\n\t\t\tdefaultFormatter = 'biome';\n\t\t}\n\n\t\tconst response = await select({\n\t\t\tmessage: 'What formatter would you like to use?',\n\t\t\toptions: ['Prettier', 'Biome', 'None'].map((val) => ({\n\t\t\t\tvalue: val.toLowerCase(),\n\t\t\t\tlabel: val,\n\t\t\t})),\n\t\t\tinitialValue:\n\t\t\t\tdefaultFormatter === 'none'\n\t\t\t\t\t? zeroConfig.formatter\n\t\t\t\t\t\t? zeroConfig.formatter\n\t\t\t\t\t\t: 'none'\n\t\t\t\t\t: defaultFormatter,\n\t\t});\n\n\t\tif (isCancel(response)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tif (response !== 'none') {\n\t\t\tconfig.formatter = response as Formatter;\n\t\t}\n\n\t\tstore.set(zeroConfigKey, config);\n\n\t\t// re-run to get installed blocks at the provided path\n\t\tinstalledBlocks = getInstalled(blocksMap, config, options.cwd).map((val) => val.specifier);\n\t}\n\n\tconst { prettierOptions, biomeOptions } = await loadFormatterConfig({\n\t\tformatter: config.formatter,\n\t\tcwd: options.cwd,\n\t});\n\n\tconst resolvedPaths = resolvePaths(config.paths, options.cwd).match(\n\t\t(v) => v,\n\t\t(err) => program.error(color.red(err))\n\t);\n\n\tconst updatedBlocks = new Set<string>();\n\n\tlet overwriteAll: boolean | undefined;\n\n\tconst preloadedBlocks = preloadBlocks(installingBlocks, config);\n\n\tconst updatedFiles: Promise<{\n\t\tdestination: string;\n\t\tcontent: string;\n\t\tblock: registry.RemoteBlock;\n\t}>[] = [];\n\n\tfor (const preloadedBlock of preloadedBlocks) {\n\t\tconst fullSpecifier = url.join(\n\t\t\tpreloadedBlock.block.sourceRepo.url,\n\t\t\tpreloadedBlock.block.category,\n\t\t\tpreloadedBlock.block.name\n\t\t);\n\t\tconst shortSpecifier = `${preloadedBlock.block.category}/${preloadedBlock.block.name}`;\n\n\t\tverbose(`Setting up ${fullSpecifier}`);\n\n\t\tconst blockExists = installedBlocks.find((b) => shortSpecifier === b);\n\n\t\tif (config.includeTests && preloadedBlock.block.tests) {\n\t\t\tverbose('Trying to include tests');\n\n\t\t\tdevDeps.add('vitest');\n\t\t}\n\n\t\tfor (const dep of preloadedBlock.block.devDependencies) {\n\t\t\tdevDeps.add(dep);\n\t\t}\n\n\t\tfor (const dep of preloadedBlock.block.dependencies) {\n\t\t\tdeps.add(dep);\n\t\t}\n\n\t\tif (blockExists && !options.yes && !overwriteAll) {\n\t\t\tif (overwriteAll === undefined) {\n\t\t\t\tconst overwriteBlocks = installingBlocks\n\t\t\t\t\t.map((installing) => `${installing.category}/${installing.name}`)\n\t\t\t\t\t.filter((spec) => installedBlocks.find((b) => b === spec));\n\n\t\t\t\tlog.warn(\n\t\t\t\t\t`The following components ${color.bold.yellow('already exist')}: ${color.cyan(truncatedList(overwriteBlocks))}`\n\t\t\t\t);\n\n\t\t\t\tconst overwrite = await confirm({\n\t\t\t\t\tmessage: `Would you like to ${color.bold.red('overwrite')} all existing components?`,\n\t\t\t\t\tactive: 'Yes, overwrite everything',\n\t\t\t\t\tinactive: 'No, let me decide individually',\n\t\t\t\t\tinitialValue: false,\n\t\t\t\t});\n\n\t\t\t\tif (isCancel(overwrite)) {\n\t\t\t\t\tcancel('Canceled!');\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t}\n\n\t\t\t\toverwriteAll = overwrite;\n\t\t\t}\n\n\t\t\tif (!overwriteAll) {\n\t\t\t\tconst files = await preloadedBlock.files;\n\n\t\t\t\tprocess.stdout.write(`${ascii.VERTICAL_LINE}\\n`);\n\n\t\t\t\tprocess.stdout.write(`${ascii.VERTICAL_LINE}  ${fullSpecifier}\\n`);\n\n\t\t\t\tfor (const file of files) {\n\t\t\t\t\tconst content = file.content.match(\n\t\t\t\t\t\t(v) => v,\n\t\t\t\t\t\t(err) => program.error(color.red(err))\n\t\t\t\t\t);\n\n\t\t\t\t\tconst destPath = getBlockFilePath(\n\t\t\t\t\t\tfile.name,\n\t\t\t\t\t\tpreloadedBlock.block,\n\t\t\t\t\t\tresolvedPaths,\n\t\t\t\t\t\toptions.cwd\n\t\t\t\t\t);\n\n\t\t\t\t\tconst remoteContent = (\n\t\t\t\t\t\tawait transformRemoteContent({\n\t\t\t\t\t\t\tfile: {\n\t\t\t\t\t\t\t\tcontent: content,\n\t\t\t\t\t\t\t\tdestPath: destPath,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbiomeOptions,\n\t\t\t\t\t\t\tprettierOptions,\n\t\t\t\t\t\t\tconfig,\n\t\t\t\t\t\t\timports: preloadedBlock.block._imports_,\n\t\t\t\t\t\t\twatermark: getWatermark(preloadedBlock.block.sourceRepo.url),\n\t\t\t\t\t\t\tverbose,\n\t\t\t\t\t\t\tcwd: options.cwd,\n\t\t\t\t\t\t})\n\t\t\t\t\t).match(\n\t\t\t\t\t\t(v) => v,\n\t\t\t\t\t\t(err) => program.error(color.red(err))\n\t\t\t\t\t);\n\n\t\t\t\t\tlet localContent = '';\n\t\t\t\t\tif (fs.existsSync(destPath)) {\n\t\t\t\t\t\tlocalContent = fs.readFileSync(destPath).toString();\n\t\t\t\t\t}\n\n\t\t\t\t\tconst updateResult = await promptUpdateFile({\n\t\t\t\t\t\tconfig: { biomeOptions, prettierOptions, formatter: config.formatter },\n\t\t\t\t\t\tcurrent: {\n\t\t\t\t\t\t\tpath: destPath,\n\t\t\t\t\t\t\tcontent: localContent,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tincoming: {\n\t\t\t\t\t\t\tpath: url.join(fullSpecifier, file.name),\n\t\t\t\t\t\t\tcontent: remoteContent,\n\t\t\t\t\t\t},\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t...options,\n\t\t\t\t\t\t\tloading,\n\t\t\t\t\t\t\tno: false,\n\t\t\t\t\t\t\tverbose: options.verbose ? verbose : undefined,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\t\tif (updateResult.applyChanges) {\n\t\t\t\t\t\tupdatedFiles.push(\n\t\t\t\t\t\t\tpromises.noopPromise({\n\t\t\t\t\t\t\t\tdestination: destPath,\n\t\t\t\t\t\t\t\tcontent: updateResult.updatedContent,\n\t\t\t\t\t\t\t\tblock: preloadedBlock.block,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tupdatedBlocks.add(shortSpecifier);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// once files load map over them and add them to updatedFiles\n\t\tpreloadedBlock.files.then((files) => {\n\t\t\tfiles.map(async (file) => {\n\t\t\t\tconst content = file.content.match(\n\t\t\t\t\t(v) => v,\n\t\t\t\t\t(err) => program.error(color.red(err))\n\t\t\t\t);\n\n\t\t\t\tconst destPath = getBlockFilePath(\n\t\t\t\t\tfile.name,\n\t\t\t\t\tpreloadedBlock.block,\n\t\t\t\t\tresolvedPaths,\n\t\t\t\t\toptions.cwd\n\t\t\t\t);\n\n\t\t\t\tconst updatedFile = transformRemoteContent({\n\t\t\t\t\tfile: {\n\t\t\t\t\t\tcontent,\n\t\t\t\t\t\tdestPath: destPath,\n\t\t\t\t\t},\n\t\t\t\t\tbiomeOptions,\n\t\t\t\t\tprettierOptions,\n\t\t\t\t\tconfig,\n\t\t\t\t\timports: preloadedBlock.block._imports_,\n\t\t\t\t\twatermark: getWatermark(preloadedBlock.block.sourceRepo.url),\n\t\t\t\t\tverbose,\n\t\t\t\t\tcwd: options.cwd,\n\t\t\t\t}).then((remoteContent) => {\n\t\t\t\t\tif (remoteContent.isErr()) {\n\t\t\t\t\t\tprogram.error(color.red(remoteContent.unwrapErr()));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdestination: destPath,\n\t\t\t\t\t\tcontent: remoteContent.unwrap(),\n\t\t\t\t\t\tblock: preloadedBlock.block,\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\tupdatedFiles.push(updatedFile);\n\t\t\t});\n\t\t});\n\n\t\tupdatedBlocks.add(shortSpecifier);\n\t}\n\n\tif (updatedBlocks.size === 0) {\n\t\tlog.success('Nothing to update');\n\t} else {\n\t\tloading.start('Adding blocks');\n\n\t\t// wait for any remaining files to finish loading\n\t\tawait Promise.all(preloadedBlocks.map((p) => p.files));\n\n\t\tawait Promise.all(\n\t\t\tupdatedFiles.map(async (updatedFile) => {\n\t\t\t\tconst file = await updatedFile;\n\n\t\t\t\tconst folder = path.dirname(file.destination);\n\n\t\t\t\tif (!fs.existsSync(folder)) {\n\t\t\t\t\tverbose(`Creating directory ${color.bold(folder)}`);\n\n\t\t\t\t\tfs.mkdirSync(folder, {\n\t\t\t\t\t\trecursive: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tverbose(`Writing to ${color.bold(file.destination)}`);\n\n\t\t\t\tfs.writeFileSync(file.destination, file.content);\n\t\t\t})\n\t\t);\n\n\t\tloading.stop(`Added blocks ${color.cyan(Array.from(updatedBlocks).join(', '))}`);\n\t}\n\n\tconst pm = (await detect({ cwd: options.cwd }))?.agent ?? 'npm';\n\n\tconst installResult = await promptInstallDependencies(deps, devDeps, {\n\t\tyes: options.yes,\n\t\tcwd: options.cwd,\n\t\tpm,\n\t});\n\n\tif (installResult.dependencies.size > 0 || installResult.devDependencies.size > 0) {\n\t\t// next steps if they didn't install dependencies\n\t\tlet steps = [];\n\n\t\tif (!installResult.installed) {\n\t\t\tif (deps.size > 0) {\n\t\t\t\tconst cmd = resolveCommand(pm, 'add', [...deps]);\n\n\t\t\t\tsteps.push(\n\t\t\t\t\t`Install dependencies \\`${color.cyan(`${cmd?.command} ${cmd?.args.join(' ')}`)}\\``\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (devDeps.size > 0) {\n\t\t\t\tconst cmd = resolveCommand(pm, 'add', [...devDeps, '-D']);\n\n\t\t\t\tsteps.push(\n\t\t\t\t\t`Install dev dependencies \\`${color.cyan(`${cmd?.command} ${cmd?.args.join(' ')}`)}\\``\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// put steps with numbers above here\n\t\tsteps = steps.map((step, i) => `${i + 1}. ${step}`);\n\n\t\tif (!installResult.installed) {\n\t\t\tsteps.push('');\n\t\t}\n\n\t\tsteps.push('Import and use the blocks!');\n\n\t\tconst next = nextSteps(steps);\n\n\t\tprocess.stdout.write(next);\n\t}\n};\n","import color from 'chalk';\nimport isUnicodeSupported from 'is-unicode-supported';\n\nconst unicode = isUnicodeSupported();\n\nconst s = (c: string, fallback: string) => (unicode ? c : fallback);\n\nexport const S_STEP_ACTIVE = s('◆', '*');\nexport const S_STEP_CANCEL = s('■', 'x');\nexport const S_STEP_ERROR = s('▲', 'x');\nexport const S_STEP_SUBMIT = s('◇', 'o');\nexport const S_INFO = s('●', '•');\nexport const S_SUCCESS = s('◆', '*');\nexport const S_WARN = s('▲', '!');\nexport const S_ERROR = s('■', 'x');\n\nexport const VERTICAL_LINE = color.gray(s('│', '|'));\nexport const HORIZONTAL_LINE = color.gray(s('─', '-'));\nexport const TOP_RIGHT_CORNER = color.gray(s('┐', '+'));\nexport const BOTTOM_RIGHT_CORNER = color.gray(s('┘', '+'));\nexport const JUNCTION_RIGHT = color.gray(s('├', '+'));\nexport const JUNCTION_TOP = color.gray(s('┬', '+'));\nexport const TOP_LEFT_CORNER = color.gray(s('┌', 'T'));\nexport const BOTTOM_LEFT_CORNER = color.gray(s('└', '-'));\n\nexport const WARN = color.bgRgb(245, 149, 66).black(' WARN ');\nexport const INFO = color.bgBlueBright.white(' INFO ');\nexport const ERROR = color.bgRedBright.white(' ERROR ');\n\nexport const JSREPO = color.hex('#f7df1e')('jsrepo');\n","/*\n\tInstalled from github/ieedan/std\n*/\n\n/** Maps the provided map into an array using the provided mapping function.\n *\n * @param map Map to be entered into an array\n * @param fn A mapping function to transform each pair into an item\n * @returns\n *\n * ## Example\n * ```ts\n * console.log(map); // Map(5) { 0 => 5, 1 => 4, 2 => 3, 3 => 2, 4 => 1 }\n *\n * const arr = fromMap(map, (_, value) => value);\n *\n * console.log(arr); // [5, 4, 3, 2, 1]\n * ```\n */\nexport const fromMap = <K, V, T>(map: Map<K, V>, fn: (key: K, value: V) => T): T[] => {\n\tconst items: T[] = [];\n\n\tfor (const [key, value] of map) {\n\t\titems.push(fn(key, value));\n\t}\n\n\treturn items;\n};\n\n/** Calculates the sum of all elements in the array based on the provided function.\n *\n * @param arr Array of items to be summed.\n * @param fn Summing function\n * @returns\n *\n * ## Examples\n *\n * ```ts\n * const total = sum([1, 2, 3, 4, 5], (num) => num);\n *\n * console.log(total); // 15\n * ```\n */\nexport const sum = <T>(arr: T[], fn: (item: T) => number): number => {\n\tlet total = 0;\n\n\tfor (const item of arr) {\n\t\ttotal = total + fn(item);\n\t}\n\n\treturn total;\n};\n\n/** Maps the provided array into a map\n *\n * @param arr Array of items to be entered into a map\n * @param fn A mapping function to transform each item into a key value pair\n * @returns\n *\n * ## Example\n * ```ts\n * const map = toMap([5, 4, 3, 2, 1], (item, i) => [i, item]);\n *\n * console.log(map); // Map(5) { 0 => 5, 1 => 4, 2 => 3, 3 => 2, 4 => 1 }\n * ```\n */\nexport const toMap = <T, K, V>(\n\tarr: T[],\n\tfn: (item: T, index: number) => [key: K, value: V]\n): Map<K, V> => {\n\tconst map = new Map<K, V>();\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tconst [key, value] = fn(arr[i], i);\n\n\t\tmap.set(key, value);\n\t}\n\n\treturn map;\n};\n","import fs from 'node:fs';\nimport color from 'chalk';\nimport { program } from 'commander';\nimport type { Ignore } from 'ignore';\nimport path from 'pathe';\nimport * as v from 'valibot';\nimport { type Block, type Category, type Manifest, categorySchema } from '../../types';\nimport * as ascii from '../ascii';\nimport type { RegistryConfig } from '../config';\nimport { languages } from '../language-support';\nimport { isDependedOn } from './check';\n\nconst TEST_SUFFIXES = [\n\t'.test.ts',\n\t'_test.ts',\n\t'.test.js',\n\t'_test.js',\n\t'.spec.ts',\n\t'_spec.ts',\n\t'.spec.js',\n\t'_spec.js',\n\t'.stories.jsx',\n\t'_stories.jsx',\n\t'.stories.tsx',\n\t'_stories.tsx',\n] as const;\n\nexport const isTestFile = (file: string): boolean =>\n\tTEST_SUFFIXES.find((suffix) => file.endsWith(suffix)) !== undefined;\n\ntype Options = {\n\tcwd: string;\n\tignore: Ignore;\n\tconfig: RegistryConfig;\n};\n\n/** Using the provided path to the blocks folder builds the blocks into categories and also resolves dependencies\n *\n * @param blocksPath\n * @returns\n */\nexport const buildBlocksDirectory = (\n\tblocksPath: string,\n\t{ cwd, ignore, config }: Options\n): Category[] => {\n\tlet paths: string[];\n\n\ttry {\n\t\tpaths = fs.readdirSync(blocksPath);\n\t} catch {\n\t\tprogram.error(color.red(`Couldn't read the ${color.bold(blocksPath)} directory.`));\n\t}\n\n\tconst categories: Category[] = [];\n\n\tfor (const categoryPath of paths) {\n\t\tconst categoryDir = path.join(blocksPath, categoryPath);\n\n\t\t// we only check folders\n\t\tif (fs.statSync(categoryDir).isFile()) continue;\n\n\t\t// we append a '/' to tell ignore that this is a directory not a file\n\t\tconst dirName = `${path.relative(cwd, categoryDir)}/`;\n\n\t\tif (ignore.ignores(dirName)) continue;\n\n\t\tconst categoryName = path.basename(categoryPath);\n\n\t\tif (!shouldIncludeCategory(categoryName, config)) continue;\n\n\t\tconst listCategory = shouldListCategory(categoryName, config);\n\n\t\tconst category: Category = {\n\t\t\tname: categoryName,\n\t\t\tblocks: [],\n\t\t};\n\n\t\tconst files = fs.readdirSync(categoryDir);\n\n\t\tfor (const file of files) {\n\t\t\tconst blockDir = path.join(categoryDir, file);\n\n\t\t\tif (fs.statSync(blockDir).isFile()) {\n\t\t\t\tif (isTestFile(file)) continue;\n\n\t\t\t\tconst name = transformBlockName(file);\n\n\t\t\t\tconst listBlock = shouldListBlock(name, config);\n\n\t\t\t\tif (!shouldIncludeBlock(name, config)) continue;\n\n\t\t\t\tconst lang = languages.find((resolver) => resolver.matches(file));\n\n\t\t\t\t// warn for unsupported language\n\t\t\t\tif (!lang) {\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t`${ascii.VERTICAL_LINE}  ${ascii.WARN} Skipped \\`${color.bold(blockDir)}\\` \\`*${color.bold(\n\t\t\t\t\t\t\tpath.parse(file).ext\n\t\t\t\t\t\t)}\\` files are not currently supported!`\n\t\t\t\t\t);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// tries to find a test file with the same name as the file\n\t\t\t\tconst testsPath = files.find((f) =>\n\t\t\t\t\tTEST_SUFFIXES.find((suffix) => f === `${name}${suffix}`)\n\t\t\t\t);\n\n\t\t\t\tconst { dependencies, devDependencies, local, imports } = lang\n\t\t\t\t\t.resolveDependencies({\n\t\t\t\t\t\tfilePath: blockDir,\n\t\t\t\t\t\tisSubDir: false,\n\t\t\t\t\t\texcludeDeps: config.excludeDeps,\n\t\t\t\t\t\tdirs: config.dirs,\n\t\t\t\t\t\tcwd,\n\t\t\t\t\t})\n\t\t\t\t\t.match(\n\t\t\t\t\t\t(val) => val,\n\t\t\t\t\t\t(err) => {\n\t\t\t\t\t\t\tprogram.error(color.red(err));\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\tconst block: Block = {\n\t\t\t\t\tname,\n\t\t\t\t\tdirectory: path.relative(cwd, categoryDir),\n\t\t\t\t\tcategory: categoryName,\n\t\t\t\t\ttests: testsPath !== undefined,\n\t\t\t\t\tsubdirectory: false,\n\t\t\t\t\tlist: listCategory ? listBlock : false,\n\t\t\t\t\tfiles: [file],\n\t\t\t\t\tlocalDependencies: local,\n\t\t\t\t\t_imports_: imports,\n\t\t\t\t\tdependencies,\n\t\t\t\t\tdevDependencies,\n\t\t\t\t};\n\n\t\t\t\t// if test file exists add the file\n\t\t\t\tif (testsPath !== undefined) {\n\t\t\t\t\tblock.files.push(testsPath);\n\t\t\t\t}\n\n\t\t\t\tcategory.blocks.push(block);\n\t\t\t} else {\n\t\t\t\tconst blockName = file;\n\n\t\t\t\tconst listBlock = shouldListBlock(blockName, config);\n\n\t\t\t\tif (!shouldIncludeBlock(blockName, config)) continue;\n\n\t\t\t\tconst localDepsSet = new Set<string>();\n\t\t\t\tconst depsSet = new Set<string>();\n\t\t\t\tconst devDepsSet = new Set<string>();\n\t\t\t\tconst imports: Record<string, string> = {};\n\n\t\t\t\tlet hasTests = false;\n\n\t\t\t\tconst blockFiles: string[] = [];\n\n\t\t\t\t// if the user has enabled allow subdirectories we recursively check each directory and resolve any dependencies\n\t\t\t\tconst walkFiles = (base: string, files: string[]) => {\n\t\t\t\t\tfor (const f of files) {\n\t\t\t\t\t\tconst filePath = path.join(base, f);\n\t\t\t\t\t\t// relative to the block root\n\t\t\t\t\t\tconst relativeFilePath = filePath.slice(blockDir.length + 1);\n\n\t\t\t\t\t\tif (isTestFile(f)) {\n\t\t\t\t\t\t\thasTests = true;\n\n\t\t\t\t\t\t\tblockFiles.push(relativeFilePath);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (fs.statSync(filePath).isDirectory()) {\n\t\t\t\t\t\t\tif (!config.allowSubdirectories) {\n\t\t\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t\t\t`${ascii.VERTICAL_LINE}  ${ascii.WARN} Skipped \\`${color.bold(path.join(blockDir, f))}\\` subdirectories are not allowed! Allow them with ${color.bold('--allow-subdirectories')}!`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst subFiles = fs.readdirSync(filePath);\n\n\t\t\t\t\t\t\twalkFiles(filePath, subFiles);\n\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst lang = languages.find((resolver) => resolver.matches(f));\n\n\t\t\t\t\t\tif (!lang) {\n\t\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t\t`${ascii.VERTICAL_LINE}  ${ascii.WARN} Skipped \\`${filePath}\\` \\`*${color.bold(\n\t\t\t\t\t\t\t\t\tpath.parse(f).ext\n\t\t\t\t\t\t\t\t)}\\` files are not currently supported!`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\tlocal,\n\t\t\t\t\t\t\tdependencies,\n\t\t\t\t\t\t\tdevDependencies,\n\t\t\t\t\t\t\timports: imps,\n\t\t\t\t\t\t} = lang\n\t\t\t\t\t\t\t.resolveDependencies({\n\t\t\t\t\t\t\t\tisSubDir: true,\n\t\t\t\t\t\t\t\texcludeDeps: config.excludeDeps,\n\t\t\t\t\t\t\t\tdirs: config.dirs,\n\t\t\t\t\t\t\t\tcontainingDir: blockDir,\n\t\t\t\t\t\t\t\tfilePath,\n\t\t\t\t\t\t\t\tcwd,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.match(\n\t\t\t\t\t\t\t\t(val) => val,\n\t\t\t\t\t\t\t\t(err) => {\n\t\t\t\t\t\t\t\t\tprogram.error(color.red(err));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\tfor (const dep of local) {\n\t\t\t\t\t\t\t// don't add self\n\t\t\t\t\t\t\tif (dep === `${categoryName}/${blockName}`) continue;\n\n\t\t\t\t\t\t\tlocalDepsSet.add(dep);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const dep of dependencies) {\n\t\t\t\t\t\t\tdepsSet.add(dep);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const dep of devDependencies) {\n\t\t\t\t\t\t\tdevDepsSet.add(dep);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const [k, v] of Object.entries(imps)) {\n\t\t\t\t\t\t\timports[k] = v;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tblockFiles.push(relativeFilePath);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\twalkFiles(blockDir, fs.readdirSync(blockDir));\n\n\t\t\t\tconst block: Block = {\n\t\t\t\t\tname: blockName,\n\t\t\t\t\tdirectory: path.relative(cwd, blockDir),\n\t\t\t\t\tcategory: categoryName,\n\t\t\t\t\ttests: hasTests,\n\t\t\t\t\tsubdirectory: true,\n\t\t\t\t\tlist: listCategory ? listBlock : false,\n\t\t\t\t\tfiles: blockFiles,\n\t\t\t\t\tlocalDependencies: Array.from(localDepsSet.keys()),\n\t\t\t\t\tdependencies: Array.from(depsSet.keys()),\n\t\t\t\t\tdevDependencies: Array.from(devDepsSet.keys()),\n\t\t\t\t\t_imports_: imports,\n\t\t\t\t};\n\n\t\t\t\tcategory.blocks.push(block);\n\t\t\t}\n\t\t}\n\n\t\tcategories.push(category);\n\t}\n\n\treturn categories;\n};\n\nexport const buildConfigFiles = (\n\tconfig: RegistryConfig,\n\t{ cwd }: { cwd: string }\n): Manifest['configFiles'] => {\n\tif (!config.configFiles) return undefined;\n\n\tconst configFiles: Manifest['configFiles'] = [];\n\n\tfor (const file of config.configFiles) {\n\t\tconst lang = languages.find((lang) => lang.matches(file.path));\n\n\t\tif (!lang) {\n\t\t\t// go ahead and add the file with no dependencies\n\t\t\tconfigFiles.push(file);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst { dependencies, devDependencies, local } = lang\n\t\t\t.resolveDependencies({\n\t\t\t\tfilePath: path.join(cwd, file.path),\n\t\t\t\tisSubDir: false,\n\t\t\t\texcludeDeps: config.excludeDeps,\n\t\t\t\tdirs: config.dirs,\n\t\t\t\tcwd,\n\t\t\t})\n\t\t\t.match(\n\t\t\t\t(val) => val,\n\t\t\t\t(err) => {\n\t\t\t\t\tprogram.error(color.red(err));\n\t\t\t\t}\n\t\t\t);\n\n\t\tif (local.length > 0) {\n\t\t\tprogram.error(\n\t\t\t\tcolor.red(\n\t\t\t\t\t`${color.bold(file.name)} ${color.bold(file.path)} Config files cannot have local dependencies!`\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tconfigFiles.push({ ...file, dependencies, devDependencies });\n\t}\n\n\treturn configFiles;\n};\n\nexport const shouldListBlock = (name: string, config: RegistryConfig) => {\n\t// the length check is just a short circuit here\n\tif (config.doNotListBlocks.length > 0 && config.doNotListBlocks.includes(name)) return false;\n\n\t// if the we only list the provided\n\t// we should only list if the name is included in that list\n\tif (config.listBlocks.length > 0) {\n\t\treturn config.listBlocks.includes(name);\n\t}\n\n\treturn true;\n};\n\nexport const shouldIncludeBlock = (name: string, config: RegistryConfig) => {\n\t// the length check is just a short circuit here\n\tif (config.excludeBlocks.length > 0 && config.excludeBlocks.includes(name)) return false;\n\n\t// if the we only include the provided\n\t// we should only include if the name is included in that list\n\tif (config.includeBlocks.length > 0) {\n\t\treturn config.includeBlocks.includes(name);\n\t}\n\n\treturn true;\n};\n\nexport const shouldListCategory = (name: string, config: RegistryConfig) => {\n\t// the length check is just a short circuit here\n\tif (config.doNotListCategories.length > 0 && config.doNotListCategories.includes(name))\n\t\treturn false;\n\n\t// if the we only list the provided\n\t// we should only list if the name is included in that list\n\tif (config.listCategories.length > 0) {\n\t\treturn config.listCategories.includes(name);\n\t}\n\n\treturn true;\n};\n\nexport const shouldIncludeCategory = (name: string, config: RegistryConfig) => {\n\t// the length check is just a short circuit here\n\tif (config.excludeCategories.length > 0 && config.excludeCategories.includes(name))\n\t\treturn false;\n\n\t// if the we only include the provided\n\t// we should only include if the name is included in that list\n\tif (config.includeCategories.length > 0) {\n\t\treturn config.includeCategories.includes(name);\n\t}\n\n\treturn true;\n};\n\n/** Takes the given file and returns the block name */\nconst transformBlockName = (file: string) => {\n\treturn path.parse(path.basename(file)).name;\n};\n\nexport const pruneUnused = (categories: Category[]): [Category[], number] => {\n\tconst pruned: Category[] = [];\n\tconst prunedCount = 0;\n\n\tfor (const category of categories) {\n\t\tconst catBlocks: Block[] = [];\n\n\t\tfor (const block of category.blocks) {\n\t\t\tconst specifier = `${block.category}/${block.name}`;\n\n\t\t\tif (!block.list) {\n\t\t\t\tconst dependedOn = isDependedOn(specifier, categories);\n\n\t\t\t\tif (!dependedOn) continue;\n\t\t\t}\n\n\t\t\tcatBlocks.push(block);\n\t\t}\n\n\t\tif (catBlocks.length > 0) pruned.push({ name: category.name, blocks: catBlocks });\n\t}\n\n\treturn [pruned, prunedCount];\n};\n\nexport const readCategories = (outputFilePath: string): Category[] =>\n\tv.parse(v.array(categorySchema), JSON.parse(fs.readFileSync(outputFilePath).toString()));\n","/*\n\tInstalled from github/ieedan/std\n*/\n\nimport { stripVTControlCharacters as stripAsni } from 'node:util';\n\n/** Adds the `padWith` (default `' '`) to the string the amount of times specified by the `space` argument\n *\n * @param str String to add padding to\n * @param space Whitespace to add\n * @param padWith Character to use to pad the string\n * @returns\n *\n * ## Usage\n * ```ts\n * const padded = leftPad(\"Hello\", 3, \".\");\n *\n * console.log(padded); // '...Hello'\n * ```\n */\nconst leftPad = (str: string, space: number, padWith = ' ') => {\n\treturn padWith.repeat(space) + str;\n};\n\n/** Adds the `padWith` until the string length matches the `length`\n *\n * @param str\n * @param length\n * @param padWith\n *\n * ## Usage\n * ```ts\n * const padded = leftPadMin(\"1\", 3, \".\");\n *\n * console.log(padded); // '..1'\n * ```\n */\nconst leftPadMin = (str: string, length: number, padWith = ' ') => {\n\tif (stripAsni(str).length > length)\n\t\tthrow new Error('String length is greater than the length provided.');\n\n\treturn padWith.repeat(length - stripAsni(str).length) + str;\n};\n\n/** Adds the `padWith` (default `' '`) to the string the amount of times specified by the `space` argument\n *\n * @param str String to add padding to\n * @param space Whitespace to add\n * @param padWith Character to use to pad the string\n * @returns\n *\n * ## Usage\n * ```ts\n * const padded = rightPad(\"Hello\", 3, \".\");\n *\n * console.log(padded); // 'Hello...'\n * ```\n */\nconst rightPad = (str: string, space: number, padWith = ' ') => {\n\treturn str + padWith.repeat(space);\n};\n\n/** Adds the `padWith` until the string length matches the `length`\n *\n * @param str\n * @param length\n * @param padWith\n *\n * ## Usage\n * ```ts\n * const padded = rightPadMin(\"1\", 3, \".\");\n *\n * console.log(padded); // '1..'\n * ```\n */\nconst rightPadMin = (str: string, length: number, padWith = ' ') => {\n\tif (stripAsni(str).length > length)\n\t\tthrow new Error('String length is greater than the length provided.');\n\n\treturn str + padWith.repeat(length - stripAsni(str).length);\n};\n\n/** Pads the string with the `padWith` so that it appears in the center of a new string with the provided length.\n *\n * @param str\n * @param length\n * @param padWith\n * @returns\n *\n * ## Usage\n * ```ts\n * const str = \"Hello, World!\";\n *\n * const padded = centerPad(str, str.length + 4);\n *\n * console.log(padded); // '  Hello, World!  '\n * ```\n */\nconst centerPad = (str: string, length: number, padWith = ' ') => {\n\tif (stripAsni(str).length > length) {\n\t\tthrow new Error('String length is greater than the length provided.');\n\t}\n\n\tconst overflow = length - stripAsni(str).length;\n\n\tconst paddingLeft = Math.floor(overflow / 2);\n\n\tconst paddingRight = Math.ceil(overflow / 2);\n\n\treturn padWith.repeat(paddingLeft) + str + padWith.repeat(paddingRight);\n};\n\nexport { leftPad, leftPadMin, rightPad, rightPadMin, centerPad };\n","/*\n\tInstalled from github/ieedan/std\n*/\n\nimport os from 'node:os';\nimport { leftPadMin } from './pad';\n\n/** Regex used to split on new lines\n *\n * ```\n * /\\n|\\r\\n/g\n * ```\n */\nexport const NEW_LINE_REGEX = /\\n|\\r\\n/g;\n\n/** Splits str into an array of lines.\n *\n * @param str\n * @returns\n *\n * ## Usage\n *\n * ```ts\n * lines.split(\"hello\\\\nhello\\nhello\"); // [\"hello\\\\nhello\", \"hello\"]\n * ```\n */\nconst get = (str: string): string[] => str.split(NEW_LINE_REGEX);\n\nexport type Options = {\n\tlineNumbers: boolean;\n\tprefix: (line: number, lineCount: number) => string;\n};\n\n/** Joins the array of lines back into a string using the platform specific EOL.\n *\n * @param lines\n * @returns\n *\n * ## Usage\n *\n * ```ts\n * lines.join([\"1\", \"2\", \"3\"]); // \"1\\n2\\n3\" or on windows \"1\\r\\n2\\r\\n3\"\n *\n * // add line numbers\n * lines.join([\"import { } from '.'\", \"console.log('test')\"], { lineNumbers: true });\n * // 1 import {  } from '.'\n * // 2 console.log('test')\n *\n * // add a custom prefix\n * lines.join([\"import { } from '.'\", \"console.log('test')\"], { prefix: () => \" + \" });\n * // + import {  } from '.'\n * // + console.log('test')\n * ```\n */\nconst join = (lines: string[], { lineNumbers = false, prefix }: Partial<Options> = {}): string => {\n\tlet transformed = lines;\n\n\tif (lineNumbers) {\n\t\tconst length = lines.length.toString().length + 1;\n\n\t\ttransformed = transformed.map((line, i) => `${leftPadMin(`${i + 1}`, length)} ${line}`);\n\t}\n\n\tif (prefix !== undefined) {\n\t\ttransformed = transformed.map((line, i) => `${prefix(i, lines.length)}${line}`);\n\t}\n\n\treturn transformed.join(os.EOL);\n};\n\nexport { get, join };\n","import fs from 'node:fs';\nimport type { PartialConfiguration } from '@biomejs/wasm-nodejs';\nimport color from 'chalk';\nimport escapeStringRegexp from 'escape-string-regexp';\nimport { type TsConfigResult, getTsconfig } from 'get-tsconfig';\nimport path from 'pathe';\nimport type * as prettier from 'prettier';\nimport { Err, Ok, type Result } from './blocks/ts/result';\nimport { endsWithOneOf } from './blocks/ts/strings';\nimport type { ProjectConfig } from './config';\nimport { resolveLocalDependencyTemplate } from './dependencies';\nimport { languages } from './language-support';\n\ntype TransformRemoteContentOptions = {\n\tfile: {\n\t\t/** The content of the file */\n\t\tcontent: string;\n\t\t/** The dest path of the file used to determine the language */\n\t\tdestPath: string;\n\t};\n\tconfig: ProjectConfig;\n\twatermark: string;\n\timports: Record<string, string>;\n\tprettierOptions: prettier.Options | null;\n\tbiomeOptions: PartialConfiguration | null;\n\tcwd: string;\n\tverbose?: (msg: string) => void;\n};\n\n/** Makes the necessary modifications to the content of the file to ensure it works properly in the users project\n *\n * @param param0\n * @returns\n */\nexport const transformRemoteContent = async ({\n\tfile,\n\tconfig,\n\timports,\n\twatermark,\n\tprettierOptions,\n\tbiomeOptions,\n\tcwd,\n\tverbose,\n}: TransformRemoteContentOptions): Promise<Result<string, string>> => {\n\tconst lang = languages.find((lang) => lang.matches(file.destPath));\n\n\tlet content: string = file.content;\n\n\tif (lang) {\n\t\tif (config.watermark) {\n\t\t\tconst comment = lang.comment(watermark);\n\n\t\t\tcontent = `${comment}\\n\\n${content}`;\n\t\t}\n\n\t\tverbose?.(`Formatting ${color.bold(file.destPath)}`);\n\n\t\ttry {\n\t\t\tcontent = await lang.format(content, {\n\t\t\t\tfilePath: file.destPath,\n\t\t\t\tformatter: config.formatter,\n\t\t\t\tprettierOptions,\n\t\t\t\tbiomeOptions,\n\t\t\t});\n\t\t} catch (err) {\n\t\t\treturn Err(`Error formatting ${color.bold(file.destPath)} ${err}`);\n\t\t}\n\t}\n\n\t// transform imports\n\tfor (const [literal, template] of Object.entries(imports)) {\n\t\tconst resolvedImport = resolveLocalDependencyTemplate({\n\t\t\ttemplate,\n\t\t\tconfig,\n\t\t\tdestPath: file.destPath,\n\t\t\tcwd,\n\t\t});\n\n\t\t// this way we only replace the exact import since it will be surrounded in quotes\n\t\tconst literalRegex = new RegExp(`(['\"])${escapeStringRegexp(literal)}\\\\1`, 'g');\n\n\t\tcontent = content.replaceAll(literalRegex, `$1${resolvedImport}$1`);\n\t}\n\n\treturn Ok(content);\n};\n\ntype FormatOptions = {\n\tfile: {\n\t\t/** The content of the file */\n\t\tcontent: string;\n\t\t/** The dest path of the file used to determine the language */\n\t\tdestPath: string;\n\t};\n\tformatter: ProjectConfig['formatter'];\n\tprettierOptions: prettier.Options | null;\n\tbiomeOptions: PartialConfiguration | null;\n};\n\n/** Auto detects the language and formats the file content.\n *\n * @param param0\n * @returns\n */\nexport const formatFile = async ({\n\tfile,\n\tformatter,\n\tprettierOptions,\n\tbiomeOptions,\n}: FormatOptions): Promise<string> => {\n\tconst lang = languages.find((lang) => lang.matches(file.destPath));\n\n\tlet newContent = file.content;\n\n\tif (lang) {\n\t\ttry {\n\t\t\tnewContent = await lang.format(file.content, {\n\t\t\t\tfilePath: file.destPath,\n\t\t\t\tformatter,\n\t\t\t\tprettierOptions,\n\t\t\t\tbiomeOptions,\n\t\t\t});\n\t\t} catch {\n\t\t\treturn newContent;\n\t\t}\n\t}\n\n\treturn newContent;\n};\n\nexport const matchJSDescendant = (searchFilePath: string): string | undefined => {\n\tconst MATCH_EXTENSIONS = ['.js', '.ts', '.cjs', '.mjs'];\n\n\tif (!endsWithOneOf(searchFilePath, MATCH_EXTENSIONS)) return undefined;\n\n\tconst dir = path.dirname(searchFilePath);\n\n\tconst files = fs.readdirSync(dir);\n\n\tconst parsedSearch = path.parse(searchFilePath);\n\n\tfor (const file of files) {\n\t\tif (!endsWithOneOf(file, MATCH_EXTENSIONS)) continue;\n\n\t\tif (path.parse(file).name === parsedSearch.name) return path.join(dir, file);\n\t}\n\n\treturn undefined;\n};\n\n/** Attempts to get the js/tsconfig file for the searched path\n *\n * @param searchPath\n * @returns\n */\nexport const tryGetTsconfig = (searchPath?: string): Result<TsConfigResult | null, string> => {\n\tlet config: TsConfigResult | null;\n\n\ttry {\n\t\tconfig = getTsconfig(searchPath, 'tsconfig.json');\n\n\t\tif (!config) {\n\t\t\t// if we don't find the config at first check for a jsconfig\n\t\t\tconfig = getTsconfig(searchPath, 'jsconfig.json');\n\n\t\t\tif (!config) {\n\t\t\t\treturn Ok(null);\n\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\treturn Err(`Error while trying to get ${color.bold('tsconfig.json')}: ${err}`);\n\t}\n\n\treturn Ok(config);\n};\n","import type { Agent } from 'package-manager-detector';\n\nexport type Flags = {\n\t'no-workspace'?: string;\n\t'install-as-dev-dependency': string;\n};\n\nexport const bun: Flags = {\n\t'no-workspace': '--no-workspace',\n\t'install-as-dev-dependency': '-D',\n};\n\nexport const deno: Flags = {\n\t'install-as-dev-dependency': '-D',\n};\n\nexport const npm: Flags = {\n\t'no-workspace': '--workspaces=false',\n\t'install-as-dev-dependency': '-D',\n};\n\nexport const pnpm: Flags = {\n\t'no-workspace': '--ignore-workspace',\n\t'install-as-dev-dependency': '-D',\n};\n\nexport const yarn: Flags = {\n\t'no-workspace': '--focus',\n\t'install-as-dev-dependency': '-D',\n};\n\nexport const flags: Record<Agent, Flags> = {\n\tbun,\n\tnpm,\n\tpnpm,\n\tdeno,\n\tyarn,\n\t'yarn@berry': yarn,\n\t'pnpm@6': pnpm,\n};\n","import Conf from 'conf';\n\nconst get = () => new Conf({ projectName: 'jsrepo' });\n\nexport { get };\n","import type Conf from 'conf';\nimport * as persisted from './persisted';\n\nconst HTTP_REGISTRY_LIST_KEY = 'http-registries-w-tokens';\n\nexport class TokenManager {\n\t#storage: Conf;\n\n\tconstructor(storage?: Conf) {\n\t\tthis.#storage = storage ?? persisted.get();\n\t}\n\n\tprivate getKey(name: string) {\n\t\treturn `${name}-token`.toLowerCase();\n\t}\n\n\tget(name: string): string | undefined {\n\t\tconst key = this.getKey(name);\n\n\t\treturn this.#storage.get(key, undefined) as string | undefined;\n\t}\n\n\tset(name: string, secret: string) {\n\t\tif (name.startsWith('http')) {\n\t\t\tlet registries = this.getHttpRegistriesWithTokens();\n\n\t\t\tconst registry = name.slice(5);\n\n\t\t\tif (!registries) {\n\t\t\t\tregistries = [];\n\t\t\t}\n\n\t\t\tif (!registries.includes(registry)) registries.push(registry);\n\n\t\t\tthis.#storage.set(HTTP_REGISTRY_LIST_KEY, registries);\n\t\t}\n\n\t\tconst key = this.getKey(name);\n\n\t\tthis.#storage.set(key, secret);\n\t}\n\n\tdelete(name: string) {\n\t\tif (name.startsWith('http')) {\n\t\t\tlet registries = this.getHttpRegistriesWithTokens();\n\n\t\t\tconst registry = name.slice(5);\n\n\t\t\tconst index = registries.indexOf(registry);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tregistries = [...registries.slice(0, index), ...registries.slice(index + 1)];\n\t\t\t}\n\n\t\t\tthis.#storage.set(HTTP_REGISTRY_LIST_KEY, registries);\n\t\t}\n\n\t\tconst key = this.getKey(name);\n\n\t\tthis.#storage.delete(key);\n\t}\n\n\tgetHttpRegistriesWithTokens(): string[] {\n\t\tconst registries = this.#storage.get(HTTP_REGISTRY_LIST_KEY);\n\n\t\tif (!registries) return [];\n\n\t\treturn registries as string[];\n\t}\n}\n","import Anthropic from '@anthropic-ai/sdk';\nimport { cancel, isCancel, password, type spinner } from '@clack/prompts';\nimport ollama from 'ollama';\nimport OpenAI from 'openai';\nimport * as lines from './blocks/ts/lines';\nimport { TokenManager } from './token-manager';\n\ntype File = {\n\tpath: string;\n\tcontent: string;\n};\n\nexport type Message = {\n\trole: 'assistant' | 'user';\n\tcontent: string;\n};\n\nexport type UpdateFileResult = {\n\tcontent: string;\n\t/** Prompt constructed by the user (for context) */\n\tprompt: string;\n};\n\nexport interface Model {\n\tupdateFile: (opts: {\n\t\toriginalFile: File;\n\t\tnewFile: File;\n\t\tloading: ReturnType<typeof spinner>;\n\t\tadditionalInstructions?: string;\n\t\tmessages?: Message[];\n\t\tverbose?: (msg: string) => void;\n\t}) => Promise<UpdateFileResult>;\n}\n\nexport type ModelName = 'Claude 3.7 Sonnet' | 'OpenAI o3-mini' | 'Phi4';\n\ntype Prompt = {\n\tsystem: string;\n\tmessage: string;\n};\n\nconst models: Record<ModelName, Model> = {\n\t'Claude 3.7 Sonnet': {\n\t\tupdateFile: async ({\n\t\t\toriginalFile,\n\t\t\tnewFile,\n\t\t\tloading,\n\t\t\tverbose,\n\t\t\tadditionalInstructions,\n\t\t\tmessages,\n\t\t}) => {\n\t\t\tconst apiKey = await getApiKey('Anthropic');\n\n\t\t\tif (!verbose) loading.start(`Asking ${'Claude 3.7 Sonnet'}`);\n\n\t\t\tconst prompt = createUpdatePrompt({\n\t\t\t\toriginalFile,\n\t\t\t\tnewFile,\n\t\t\t\tadditionalInstructions,\n\t\t\t\trePrompt: messages !== undefined && messages.length > 0,\n\t\t\t});\n\n\t\t\tverbose?.(\n\t\t\t\t`Prompting ${'Claude 3.7 Sonnet'} with:\\n${JSON.stringify(prompt, null, '\\t')}`\n\t\t\t);\n\n\t\t\tconst text = await getNextCompletionAnthropic({\n\t\t\t\tmodel: 'claude-3-7-sonnet-latest',\n\t\t\t\tprompt,\n\t\t\t\tapiKey,\n\t\t\t\tmessages,\n\t\t\t\tmaxTokens: (originalFile.content.length + newFile.content.length) * 2,\n\t\t\t});\n\n\t\t\tif (!verbose) loading.stop(`${'Claude 3.7 Sonnet'} updated the file`);\n\n\t\t\tif (!text) return { content: newFile.content, prompt: prompt.message };\n\n\t\t\treturn { content: unwrapCodeFromQuotes(text), prompt: prompt.message };\n\t\t},\n\t},\n\t'OpenAI o3-mini': {\n\t\tupdateFile: async ({\n\t\t\toriginalFile,\n\t\t\tnewFile,\n\t\t\tloading,\n\t\t\tverbose,\n\t\t\tadditionalInstructions,\n\t\t\tmessages,\n\t\t}) => {\n\t\t\tconst apiKey = await getApiKey('OpenAI');\n\n\t\t\tif (!verbose) loading.start(`Asking ${'OpenAI o3-mini'}`);\n\n\t\t\tconst prompt = createUpdatePrompt({\n\t\t\t\toriginalFile,\n\t\t\t\tnewFile,\n\t\t\t\tadditionalInstructions,\n\t\t\t\trePrompt: messages !== undefined && messages.length > 0,\n\t\t\t});\n\n\t\t\tverbose?.(`Prompting ${'OpenAI o3-mini'} with:\\n${JSON.stringify(prompt, null, '\\t')}`);\n\n\t\t\tconst text = await getNextCompletionOpenAI({\n\t\t\t\tmodel: 'o3-mini',\n\t\t\t\tprompt,\n\t\t\t\tapiKey,\n\t\t\t\tmessages,\n\t\t\t\tmaxTokens: (originalFile.content.length + newFile.content.length) * 2,\n\t\t\t});\n\n\t\t\tif (!verbose) loading.stop(`${'OpenAI o3-mini'} updated the file`);\n\n\t\t\tif (!text) return { content: newFile.content, prompt: prompt.message };\n\n\t\t\treturn { content: unwrapCodeFromQuotes(text), prompt: prompt.message };\n\t\t},\n\t},\n\tPhi4: {\n\t\tupdateFile: async ({\n\t\t\toriginalFile,\n\t\t\tnewFile,\n\t\t\tloading,\n\t\t\tverbose,\n\t\t\tadditionalInstructions,\n\t\t\tmessages,\n\t\t}) => {\n\t\t\tif (!verbose) loading.start(`Asking ${'Phi4'}`);\n\n\t\t\tconst prompt = createUpdatePrompt({\n\t\t\t\toriginalFile,\n\t\t\t\tnewFile,\n\t\t\t\tadditionalInstructions,\n\t\t\t\trePrompt: messages !== undefined && messages.length > 0,\n\t\t\t});\n\n\t\t\tverbose?.(`Prompting ${'Phi4'} with:\\n${JSON.stringify(prompt, null, '\\t')}`);\n\n\t\t\tconst text = await getNextCompletionOllama({ model: 'phi4', prompt, messages });\n\n\t\t\tif (!verbose) loading.stop(`${'Phi4'} updated the file`);\n\n\t\t\tif (!text) return { content: newFile.content, prompt: prompt.message };\n\n\t\t\treturn { content: unwrapCodeFromQuotes(text), prompt: prompt.message };\n\t\t},\n\t},\n};\n\nconst getNextCompletionOpenAI = async ({\n\tprompt,\n\tmaxTokens,\n\tmodel,\n\tapiKey,\n\tmessages,\n}: {\n\tprompt: Prompt;\n\tmessages?: Message[];\n\tmaxTokens: number;\n\tmodel: OpenAI.Chat.ChatModel;\n\tapiKey: string;\n}): Promise<string | null> => {\n\tconst openai = new OpenAI({ apiKey });\n\n\tconst msg = await openai.chat.completions.create({\n\t\tmodel,\n\t\tmax_completion_tokens: maxTokens,\n\t\tmessages: [\n\t\t\t{\n\t\t\t\trole: 'system',\n\t\t\t\tcontent: prompt.system,\n\t\t\t},\n\t\t\t...(messages ?? []),\n\t\t\t{\n\t\t\t\trole: 'user',\n\t\t\t\tcontent: prompt.message,\n\t\t\t},\n\t\t],\n\t});\n\n\tconst first = msg.choices[0];\n\n\tif (first.message.content === null) return null;\n\n\treturn first.message.content;\n};\n\nconst getNextCompletionAnthropic = async ({\n\tprompt,\n\tmessages,\n\tmaxTokens,\n\tmodel,\n\tapiKey,\n}: {\n\tprompt: Prompt;\n\tmessages?: Message[];\n\tmaxTokens: number;\n\tmodel: Anthropic.Messages.Model;\n\tapiKey: string;\n}): Promise<string | null> => {\n\tconst anthropic = new Anthropic({ apiKey });\n\n\t// didn't want to do it this way but I couldn't get `.map` to work\n\tconst history: Anthropic.Messages.MessageParam[] = [];\n\n\t// add history\n\tif (messages) {\n\t\tfor (const message of messages) {\n\t\t\thistory.push({\n\t\t\t\trole: message.role,\n\t\t\t\tcontent: [{ type: 'text', text: message.content }],\n\t\t\t});\n\t\t}\n\t}\n\n\t// add new message\n\thistory.push({\n\t\trole: 'user',\n\t\tcontent: [\n\t\t\t{\n\t\t\t\ttype: 'text',\n\t\t\t\ttext: prompt.message,\n\t\t\t},\n\t\t],\n\t});\n\n\tconst msg = await anthropic.messages.create({\n\t\tmodel,\n\t\tmax_tokens: Math.min(maxTokens, 8192),\n\t\ttemperature: 0.5,\n\t\tsystem: prompt.system,\n\t\tmessages: history,\n\t});\n\n\tconst first = msg.content[0];\n\n\t// if we don't get it in the format you want just return the new file\n\tif (first.type !== 'text') return null;\n\n\treturn first.text;\n};\n\nconst getNextCompletionOllama = async ({\n\tprompt,\n\tmessages,\n\tmodel,\n}: {\n\tprompt: Prompt;\n\tmessages?: Message[];\n\tmodel: string;\n}): Promise<string | null> => {\n\tconst resp = await ollama.chat({\n\t\tmodel,\n\t\tmessages: [\n\t\t\t{\n\t\t\t\trole: 'system',\n\t\t\t\tcontent: prompt.system,\n\t\t\t},\n\t\t\t...(messages ?? []),\n\t\t\t{\n\t\t\t\trole: 'user',\n\t\t\t\tcontent: prompt.message,\n\t\t\t},\n\t\t],\n\t});\n\n\treturn resp.message.content;\n};\n\nconst createUpdatePrompt = ({\n\toriginalFile,\n\tnewFile,\n\tadditionalInstructions,\n\trePrompt,\n}: {\n\toriginalFile: File;\n\tnewFile: File;\n\tadditionalInstructions?: string;\n\trePrompt: boolean;\n}): Prompt => {\n\treturn {\n\t\tsystem: 'You will merge two files provided by the user. You will respond only with the resulting code. DO NOT format the code with markdown, DO NOT put the code inside of triple quotes, only return the code as a raw string. DO NOT make unnecessary changes.',\n\t\tmessage: rePrompt\n\t\t\t? (additionalInstructions ?? '')\n\t\t\t: `\nThis is my current file ${originalFile.path}:\n<code>\n${originalFile.content}\n</code>\n\t\nThis is the file that has changes I want to update with ${newFile.path}:\n<code>\n${newFile.content}\n</code>${additionalInstructions ? `<additional-instructions>${additionalInstructions}</additional-instructions>` : ''}\n\t`,\n\t};\n};\n\n/** The AI isn't always that smart and likes to wrap the code in quotes even though I beg it not to.\n *  This function attempts to remove the quotes.\n */\nexport const unwrapCodeFromQuotes = (quoted: string): string => {\n\tlet code = quoted.trim();\n\n\tif (code.startsWith('```')) {\n\t\t// takes out the entire first line\n\t\t// this is because often a language will come after the triple quotes\n\t\tcode = lines.get(code).slice(1).join('\\n').trim();\n\t}\n\n\tif (code.endsWith('```')) {\n\t\tconst l = lines.get(code);\n\t\tcode = l\n\t\t\t.slice(0, l.length - 1)\n\t\t\t.join('\\n')\n\t\t\t.trim();\n\t}\n\n\treturn code;\n};\n\n/** Attempts to get the cached api key if it can't it will prompt the user\n *\n * @param name\n * @returns\n */\nconst getApiKey = async (name: 'OpenAI' | 'Anthropic'): Promise<string> => {\n\tconst storage = new TokenManager();\n\n\tlet apiKey = storage.get(name);\n\n\tif (!apiKey) {\n\t\t// prompt for api key\n\t\tconst result = await password({\n\t\t\tmessage: `Paste your ${name} API key:`,\n\t\t\tvalidate(value) {\n\t\t\t\tif (value.trim() === '') return 'Please provide an API key';\n\t\t\t},\n\t\t});\n\n\t\tif (isCancel(result) || !result) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tapiKey = result;\n\t}\n\n\tstorage.set(name, apiKey);\n\n\treturn apiKey;\n};\n\nexport { models };\n","import pkg from '../../package.json';\nimport type { PackageJson } from './package';\n\nexport const packageJson = pkg as PackageJson;\n","import color from 'chalk';\nimport { type Change, diffChars } from 'diff';\nimport * as array from './blocks/ts/array';\nimport * as lines from './blocks/ts/lines';\nimport { leftPadMin } from './blocks/ts/pad';\n\ntype Options = {\n\t/** The source file */\n\tfrom: string;\n\t/** The destination file */\n\tto: string;\n\t/** The changes to the file */\n\tchanges: Change[];\n\t/** Expands all lines to show the entire file */\n\texpand: boolean;\n\t/** Maximum lines to show before collapsing */\n\tmaxUnchanged: number;\n\t/** Color the removed lines */\n\tcolorRemoved?: (line: string) => string;\n\t/** Color the added lines */\n\tcolorAdded?: (line: string) => string;\n\t/** Color the removed chars */\n\tcolorCharsRemoved?: (line: string) => string;\n\t/** Color the added chars */\n\tcolorCharsAdded?: (line: string) => string;\n\t/** Prefixes each line with the string returned from this function. */\n\tprefix: () => string;\n\tintro: (options: Options) => string;\n\tonUnchanged: (options: Options) => string;\n};\n\n/** Check if a character is whitespace\n *\n * @param str\n * @returns\n */\nconst isWhitespace = (str: string) => /^\\s+$/g.test(str);\n\n/** We need to add a newline at the end of each change to make sure\n * the next change can start correctly. So we take off just 1.\n *\n * @param str\n * @returns\n */\nconst trimSingleNewLine = (str: string): string => {\n\tlet i = str.length - 1;\n\twhile (isWhitespace(str[i]) && i >= 0) {\n\t\tif (str[i] === '\\n') {\n\t\t\tif (str[i - 1] === '\\r') {\n\t\t\t\treturn str.slice(0, i - 1);\n\t\t\t}\n\n\t\t\treturn str.slice(0, i);\n\t\t}\n\n\t\ti--;\n\t}\n\n\treturn str;\n};\n\nconst formatDiff = ({\n\tfrom,\n\tto,\n\tchanges,\n\texpand = false,\n\tmaxUnchanged = 5,\n\tcolorRemoved = color.redBright,\n\tcolorAdded = color.greenBright,\n\tcolorCharsRemoved = color.bgRedBright,\n\tcolorCharsAdded = color.bgGreenBright,\n\tprefix,\n\tonUnchanged,\n\tintro,\n}: Options): string => {\n\tlet result = '';\n\n\tconst length = array.sum(changes, (change) => change.count ?? 0).toString().length + 1;\n\n\tlet lineOffset = 0;\n\n\tif (changes.length === 1 && !changes[0].added && !changes[0].removed) {\n\t\treturn onUnchanged({\n\t\t\tfrom,\n\t\t\tto,\n\t\t\tchanges,\n\t\t\texpand,\n\t\t\tmaxUnchanged,\n\t\t\tcolorAdded,\n\t\t\tcolorRemoved,\n\t\t\tprefix,\n\t\t\tonUnchanged,\n\t\t\tintro,\n\t\t});\n\t}\n\n\tresult += intro({\n\t\tfrom,\n\t\tto,\n\t\tchanges,\n\t\texpand,\n\t\tmaxUnchanged,\n\t\tcolorAdded,\n\t\tcolorRemoved,\n\t\tprefix,\n\t\tonUnchanged,\n\t\tintro,\n\t});\n\n\t/** Provides the line number prefix */\n\tconst linePrefix = (line: number): string =>\n\t\tcolor.gray(`${prefix?.() ?? ''}${leftPadMin(`${line + 1 + lineOffset} `, length)} `);\n\n\tfor (let i = 0; i < changes.length; i++) {\n\t\tconst change = changes[i];\n\n\t\tconst hasPreviousChange = changes[i - 1]?.added || changes[i - 1]?.removed;\n\t\tconst hasNextChange = changes[i + 1]?.added || changes[i + 1]?.removed;\n\n\t\tif (!change.added && !change.removed) {\n\t\t\t// show collapsed\n\t\t\tif (!expand && change.count !== undefined && change.count > maxUnchanged) {\n\t\t\t\tconst prevLineOffset = lineOffset;\n\t\t\t\tconst ls = lines.get(trimSingleNewLine(change.value));\n\n\t\t\t\tlet shownLines = 0;\n\n\t\t\t\tif (hasNextChange) shownLines += maxUnchanged;\n\t\t\t\tif (hasPreviousChange) shownLines += maxUnchanged;\n\n\t\t\t\t// just show all if we are going to show more than we have\n\t\t\t\tif (shownLines >= ls.length) {\n\t\t\t\t\tresult += `${lines.join(ls, {\n\t\t\t\t\t\tprefix: linePrefix,\n\t\t\t\t\t})}\\n`;\n\t\t\t\t\tlineOffset += ls.length;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// this writes the top few lines\n\t\t\t\tif (hasPreviousChange) {\n\t\t\t\t\tresult += `${lines.join(ls.slice(0, maxUnchanged), {\n\t\t\t\t\t\tprefix: linePrefix,\n\t\t\t\t\t})}\\n`;\n\t\t\t\t}\n\n\t\t\t\tif (ls.length > shownLines) {\n\t\t\t\t\tconst count = ls.length - shownLines;\n\t\t\t\t\tresult += `${lines.join(\n\t\t\t\t\t\tlines.get(\n\t\t\t\t\t\t\tcolor.gray(\n\t\t\t\t\t\t\t\t`+ ${count} more unchanged (${color.italic('-E to expand')})`\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprefix: () => `${prefix?.() ?? ''}${leftPadMin(' ', length)} `,\n\t\t\t\t\t\t}\n\t\t\t\t\t)}\\n`;\n\t\t\t\t}\n\n\t\t\t\tif (hasNextChange) {\n\t\t\t\t\tlineOffset = lineOffset + ls.length - maxUnchanged;\n\t\t\t\t\tresult += `${lines.join(ls.slice(ls.length - maxUnchanged), {\n\t\t\t\t\t\tprefix: linePrefix,\n\t\t\t\t\t})}\\n`;\n\t\t\t\t}\n\n\t\t\t\t// resets the line offset\n\t\t\t\tlineOffset = prevLineOffset + change.count;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// show expanded\n\n\t\t\tresult += `${lines.join(lines.get(trimSingleNewLine(change.value)), {\n\t\t\t\tprefix: linePrefix,\n\t\t\t})}\\n`;\n\t\t\tlineOffset += change.count ?? 0;\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst colorLineChange = (change: Change) => {\n\t\t\tif (change.added) {\n\t\t\t\treturn colorAdded(trimSingleNewLine(change.value));\n\t\t\t}\n\n\t\t\tif (change.removed) {\n\t\t\t\treturn colorRemoved(trimSingleNewLine(change.value));\n\t\t\t}\n\n\t\t\treturn change.value;\n\t\t};\n\n\t\tconst colorCharChange = (change: Change) => {\n\t\t\tif (change.added) {\n\t\t\t\treturn colorCharsAdded(trimSingleNewLine(change.value));\n\t\t\t}\n\n\t\t\tif (change.removed) {\n\t\t\t\treturn colorCharsRemoved(trimSingleNewLine(change.value));\n\t\t\t}\n\n\t\t\treturn change.value;\n\t\t};\n\n\t\tif (\n\t\t\tchange.removed &&\n\t\t\tchange.count === 1 &&\n\t\t\tchanges[i + 1]?.added &&\n\t\t\tchanges[i + 1]?.count === 1\n\t\t) {\n\t\t\t// single line change\n\t\t\tconst diffedChars = diffChars(change.value, changes[i + 1].value);\n\n\t\t\tconst sentence = diffedChars.map((chg) => colorCharChange(chg)).join('');\n\n\t\t\tresult += `${linePrefix(0)}${sentence}`;\n\n\t\t\tlineOffset += 1;\n\n\t\t\ti++;\n\t\t} else {\n\t\t\tif (isWhitespace(change.value)) {\n\t\t\t\t// adds some spaces to make sure that you can see the change\n\t\t\t\tresult += `${lines.join(lines.get(colorCharChange(change)), {\n\t\t\t\t\tprefix: (line) =>\n\t\t\t\t\t\t`${linePrefix(line)}${colorCharChange({ removed: true, value: '   ', added: false })}`,\n\t\t\t\t})}\\n`;\n\n\t\t\t\tif (!change.removed) {\n\t\t\t\t\tlineOffset += change.count ?? 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult += `${lines.join(lines.get(colorLineChange(change)), {\n\t\t\t\t\tprefix: linePrefix,\n\t\t\t\t})}\\n`;\n\n\t\t\t\tif (!change.removed) {\n\t\t\t\t\tlineOffset += change.count ?? 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!result.endsWith('\\n')) {\n\t\tresult = result += '\\n';\n\t}\n\n\treturn result;\n};\n\nexport { formatDiff };\n","import nodeFetch from 'node-fetch';\nimport { Err, Ok, type Result } from './blocks/ts/result';\nimport type { Package } from './parse-package-name';\nimport * as persisted from './persisted';\n\nconst LATEST_VERSION_KEY = 'latest-version';\nconst EXPIRATION_TIME = 60 * 60 * 1000; // 1 hour\n\ntype LatestVersion = {\n\texpiration: number;\n\tversion: string;\n};\n\n/** Checks for the latest version from the github repository. Will cache results for up to 1 hour. */\nexport const getLatestVersion = async ({\n\tnoCache = false,\n}: { noCache?: boolean } = {}): Promise<Result<string, string>> => {\n\ttry {\n\t\t// handle caching\n\t\tconst storage = persisted.get();\n\n\t\tlet version: string;\n\n\t\tif (!noCache) {\n\t\t\tconst latestVersion = storage.get(LATEST_VERSION_KEY) as LatestVersion | null;\n\n\t\t\tif (latestVersion) {\n\t\t\t\tif (latestVersion.expiration > Date.now()) {\n\t\t\t\t\tversion = latestVersion.version;\n\n\t\t\t\t\treturn Ok(version);\n\t\t\t\t}\n\n\t\t\t\tstorage.delete(LATEST_VERSION_KEY);\n\t\t\t}\n\t\t}\n\n\t\t// we abort the request after a second\n\t\t// because it really just isn't worth it if it's going to take that long\n\t\tconst controller = new AbortController();\n\n\t\tconst timeout = setTimeout(() => {\n\t\t\tcontroller.abort();\n\t\t}, 1000);\n\n\t\tconst response = await nodeFetch(\n\t\t\t'https://raw.githubusercontent.com/ieedan/jsrepo/refs/heads/main/packages/cli/package.json',\n\t\t\t{\n\t\t\t\tsignal: controller.signal,\n\t\t\t}\n\t\t);\n\n\t\tclearTimeout(timeout);\n\n\t\tif (!response.ok) {\n\t\t\treturn Err('Error getting version');\n\t\t}\n\n\t\tconst { version: ver } = (await response.json()) as Package;\n\n\t\tversion = ver;\n\n\t\tstorage.set(LATEST_VERSION_KEY, {\n\t\t\texpiration: Date.now() + EXPIRATION_TIME,\n\t\t\tversion,\n\t\t} satisfies LatestVersion);\n\n\t\treturn Ok(version);\n\t} catch (err) {\n\t\treturn Err(`Error getting version: ${err}`);\n\t}\n};\n","/**\n * Adapted from https://github.com/egoist/parse-package-name/blob/main/src/index.ts\n * @module\n */\n\nimport { Err, Ok, type Result } from './blocks/ts/result';\n\n// Parsed a scoped package name into name, version, and path.\nconst RE_SCOPED = /^(@[^\\/]+\\/[^@\\/]+)(?:@([^\\/]+))?(\\/.*)?$/;\n// Parsed a non-scoped package name into name, version, path\nconst RE_NON_SCOPED = /^([^@\\/]+)(?:@([^\\/]+))?(\\/.*)?$/;\n\nexport type Package = {\n\t/** Name of the package as it would be installed from npm */\n\tname: string;\n\t/** Version of the package */\n\tversion: string;\n\tpath: string;\n};\n\nconst parsePackageName = (input: string): Result<Package, string> => {\n\tconst m = RE_SCOPED.exec(input) || RE_NON_SCOPED.exec(input);\n\n\tif (!m) return Err(`invalid package name: ${input}`);\n\n\treturn Ok({\n\t\tname: m[1] || '',\n\t\tversion: m[2] || 'latest',\n\t\tpath: m[3] || '',\n\t});\n};\n\nexport { parsePackageName };\n","import fs from 'node:fs';\nimport path from 'pathe';\nimport semver from 'semver';\nimport { Err, Ok, type Result } from './blocks/ts/result';\nimport { parsePackageName } from './parse-package-name';\n\nconst findNearestPackageJson = (startDir: string, until: string): string | undefined => {\n\tconst packagePath = path.join(startDir, 'package.json');\n\n\tif (fs.existsSync(packagePath)) return packagePath;\n\n\tif (startDir === until) return undefined;\n\n\tconst segments = startDir.split(/[\\/\\\\]/);\n\n\treturn findNearestPackageJson(segments.slice(0, segments.length - 1).join('/'), until);\n};\n\nexport type PackageJson = {\n\tname: string;\n\tversion: string;\n\tdescription: string;\n\tscripts: Record<string, string>;\n\tdependencies: Record<string, string>;\n\tdevDependencies: Record<string, string>;\n};\n\nconst getPackage = (path: string): Result<Partial<PackageJson>, string> => {\n\tif (!fs.existsSync(path)) return Err(`${path} doesn't exist`);\n\n\tconst contents = fs.readFileSync(path).toString();\n\n\ttry {\n\t\treturn Ok(JSON.parse(contents));\n\t} catch (err) {\n\t\treturn Err(`Error reading package.json: ${err}`);\n\t}\n};\n\nexport const cleanVersion = (version: string) => {\n\tif (version[0] === '^') {\n\t\treturn version.slice(1);\n\t}\n\n\treturn version;\n};\n\n/** Returns only the dependencies that should be installed based on what is already in the package.json */\nconst returnShouldInstall = (\n\tdependencies: Set<string>,\n\tdevDependencies: Set<string>,\n\t{ cwd }: { cwd: string }\n): { devDependencies: Set<string>; dependencies: Set<string> } => {\n\t// don't mutate originals\n\tconst tempDeps = dependencies;\n\tconst tempDevDeps = devDependencies;\n\n\tconst packageResult = getPackage(path.join(cwd, 'package.json'));\n\n\tif (!packageResult.isErr()) {\n\t\tconst pkg = packageResult.unwrap();\n\n\t\tif (pkg.dependencies) {\n\t\t\tfor (const dep of tempDeps) {\n\t\t\t\t// this was already parsed when building\n\t\t\t\tconst { name, version } = parsePackageName(dep).unwrap();\n\n\t\t\t\tconst foundDep = pkg.dependencies[name];\n\n\t\t\t\t// if version isn't pinned and dep exists delete\n\t\t\t\tif (version === undefined && foundDep) {\n\t\t\t\t\ttempDeps.delete(dep);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// if the version installed satisfies the requested version remove the dep\n\t\t\t\tif (foundDep && semver.satisfies(cleanVersion(foundDep), version)) {\n\t\t\t\t\ttempDeps.delete(dep);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (pkg.devDependencies) {\n\t\t\tfor (const dep of tempDevDeps) {\n\t\t\t\t// this was already parsed when building\n\t\t\t\tconst { name, version } = parsePackageName(dep).unwrap();\n\n\t\t\t\tconst foundDep = pkg.devDependencies[name];\n\n\t\t\t\t// if version isn't pinned and dep exists delete\n\t\t\t\tif (version === undefined && foundDep) {\n\t\t\t\t\ttempDevDeps.delete(dep);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// if the version installed satisfies the requested version remove the dep\n\t\t\t\tif (foundDep && semver.satisfies(cleanVersion(foundDep), version)) {\n\t\t\t\t\ttempDevDeps.delete(dep);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { dependencies: tempDeps, devDependencies: tempDevDeps };\n};\n\nexport { findNearestPackageJson, getPackage, returnShouldInstall };\n","import { stripVTControlCharacters as stripAsni } from 'node:util';\nimport type { PartialConfiguration } from '@biomejs/wasm-nodejs';\nimport { cancel, confirm, intro, isCancel, log, select, spinner, text } from '@clack/prompts';\nimport boxen from 'boxen';\nimport color from 'chalk';\nimport { program } from 'commander';\nimport { diffLines } from 'diff';\nimport { type Agent, detect, resolveCommand } from 'package-manager-detector';\nimport type * as prettier from 'prettier';\nimport semver from 'semver';\nimport { cursor, erase } from 'sisteransi';\nimport { type Message, type ModelName, models } from './ai';\nimport * as ascii from './ascii';\nimport type { ProjectConfig } from './config';\nimport { packageJson } from './context';\nimport { installDependencies } from './dependencies';\nimport { formatDiff } from './diff';\nimport { formatFile } from './files';\nimport { getLatestVersion } from './get-latest-version';\nimport { returnShouldInstall } from './package';\nimport * as persisted from './persisted';\n\nexport type Task = {\n\tloadingMessage: string;\n\tcompletedMessage: string;\n\trun: () => Promise<void>;\n};\n\ntype TaskOptions = {\n\tloading: ReturnType<typeof spinner>;\n};\n\nexport const runTasks = async (tasks: Task[], { loading }: TaskOptions) => {\n\tfor (const task of tasks) {\n\t\tloading.start(task.loadingMessage);\n\n\t\ttry {\n\t\t\tawait task.run();\n\t\t} catch (err) {\n\t\t\tloading.stop(`Error while ${task.loadingMessage}`);\n\t\t\tconsole.error(err);\n\t\t}\n\n\t\tloading.stop(task.completedMessage);\n\t}\n};\n\nexport type ConcurrentTask = {\n\trun: ({ message }: { message: (str: string) => void }) => Promise<void>;\n};\n\nexport type ConcurrentOptions = {\n\tloading: ReturnType<typeof spinner>;\n\tstartMessage: string;\n\tstopMessage: string;\n\ttasks: ConcurrentTask[];\n};\n\nexport const runTasksConcurrently = async ({\n\ttasks,\n\tstartMessage,\n\tstopMessage,\n\tloading,\n}: ConcurrentOptions) => {\n\tloading.start(startMessage);\n\n\tawait Promise.all([...tasks.map((t) => t.run({ message: loading.message }))]);\n\n\tloading.stop(stopMessage);\n};\n\n/** A spinner compatible with verbose logging\n *\n * @param param0\n * @returns\n */\nconst _spinner = ({\n\tverbose,\n}: { verbose?: (msg: string) => void } = {}): ReturnType<typeof spinner> => {\n\tconst loading = spinner();\n\n\treturn {\n\t\tmessage: (msg) => {\n\t\t\tif (verbose) {\n\t\t\t\tverbose(msg ?? '');\n\t\t\t} else {\n\t\t\t\tloading.message(msg);\n\t\t\t}\n\t\t},\n\t\tstop: (msg) => {\n\t\t\tif (verbose) {\n\t\t\t\tverbose(msg ?? '');\n\t\t\t} else {\n\t\t\t\tloading.stop(msg);\n\t\t\t}\n\t\t},\n\t\tstart: (msg) => {\n\t\t\tif (verbose) {\n\t\t\t\tverbose(msg ?? '');\n\t\t\t} else {\n\t\t\t\tloading.start(msg);\n\t\t\t}\n\t\t},\n\t};\n};\n\nexport const nextSteps = (steps: string[]): string => {\n\tconst box = boxen(steps.join('\\n'), {\n\t\ttitle: 'Next Steps',\n\t\ttextAlignment: 'left',\n\t\tpadding: 1,\n\t\tborderColor: 'gray',\n\t\tborderStyle: {\n\t\t\ttopLeft: stripAsni(ascii.JUNCTION_RIGHT),\n\t\t\tbottomLeft: stripAsni(ascii.JUNCTION_RIGHT),\n\t\t\ttopRight: stripAsni(ascii.TOP_RIGHT_CORNER),\n\t\t\ttop: stripAsni(ascii.HORIZONTAL_LINE),\n\t\t\tbottom: stripAsni(ascii.HORIZONTAL_LINE),\n\t\t\tbottomRight: stripAsni(ascii.BOTTOM_RIGHT_CORNER),\n\t\t\tleft: stripAsni(ascii.VERTICAL_LINE),\n\t\t\tright: stripAsni(ascii.VERTICAL_LINE),\n\t\t},\n\t});\n\n\treturn `${ascii.VERTICAL_LINE}\\n${box}\\n`;\n};\n\nexport const truncatedList = (items: string[], maxLength = 3) => {\n\tconst truncated = items.slice(0, maxLength);\n\n\tconst remaining = items.length - truncated.length;\n\n\treturn `${truncated.join(', ')}${remaining > 0 ? ` and ${remaining} other(s)` : ''}`;\n};\n\nconst newerVersionAvailable = async (name: string, oldVersion: string, newVersion: string) => {\n\tconst pm = (await detect({ cwd: process.cwd() }))?.agent ?? 'npm';\n\n\tconst installCommand = resolveCommand(pm, 'global', ['jsrepo@latest']);\n\n\tconst text: string[] = [\n\t\t`Update available! ${color.redBright(oldVersion)} -> ${color.greenBright(newVersion)}`,\n\t\t`${color.cyan('Changelog')}: https://github.com/ieedan/jsrepo/releases/tag/${name}@${newVersion}`,\n\t\t`Run ${color.cyan(`${installCommand?.command} ${installCommand?.args.join(' ')}`)} to update!`,\n\t\t'',\n\t\t`${color.yellowBright('Star')} on GitHub for updates: https://github.com/ieedan/jsrepo`,\n\t];\n\n\tconst box = boxen(text.join('\\n'), {\n\t\tborderColor: 'gray',\n\t\tpadding: 1,\n\t\tmargin: 1,\n\t\ttextAlignment: 'center',\n\t});\n\n\treturn box;\n};\n\nconst _intro = async () => {\n\tconsole.clear();\n\n\tconst latestVersion = await getLatestVersion();\n\n\tif (latestVersion.isOk()) {\n\t\tif (semver.lt(packageJson.version, latestVersion.unwrap())) {\n\t\t\tconsole.info(\n\t\t\t\tawait newerVersionAvailable(\n\t\t\t\t\tpackageJson.name,\n\t\t\t\t\tpackageJson.version,\n\t\t\t\t\tlatestVersion.unwrap()\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\tintro(\n\t\t`${color.bgHex('#f7df1e').black(` ${packageJson.name} `)}${color.gray(` v${packageJson.version} `)}`\n\t);\n};\n\ntype UpdateBlockOptions = {\n\tincoming: {\n\t\tcontent: string;\n\t\tpath: string;\n\t};\n\tcurrent: {\n\t\tcontent: string;\n\t\tpath: string;\n\t};\n\tconfig: {\n\t\tformatter: ProjectConfig['formatter'];\n\t\tprettierOptions: prettier.Options | null;\n\t\tbiomeOptions: PartialConfiguration | null;\n\t};\n\toptions: {\n\t\tyes: boolean;\n\t\tno: boolean;\n\t\texpand: boolean;\n\t\tmaxUnchanged: number;\n\t\tverbose?: (msg: string) => void;\n\t\tloading: ReturnType<typeof spinner>;\n\t};\n};\n\ntype UpdateBlockResult =\n\t| {\n\t\t\tapplyChanges: true;\n\t\t\tupdatedContent: string;\n\t  }\n\t| {\n\t\t\tapplyChanges: false;\n\t  };\n\nconst MODEL_PREFERENCE_KEY = 'model-preference';\n\nexport const promptUpdateFile = async ({\n\tincoming,\n\tcurrent,\n\tconfig,\n\toptions,\n}: UpdateBlockOptions): Promise<UpdateBlockResult> => {\n\tconst storage = persisted.get();\n\n\tprocess.stdout.write(`${ascii.VERTICAL_LINE}\\n`);\n\n\tlet acceptedChanges = false;\n\n\tlet updatedContent = incoming.content;\n\n\tlet model: ModelName = storage.get(MODEL_PREFERENCE_KEY, 'Claude 3.5 Sonnet') as ModelName;\n\n\tlet messageHistory: Message[] = [];\n\n\twhile (true) {\n\t\tconst changes = diffLines(current.content, updatedContent);\n\n\t\t// print diff\n\t\tconst formattedDiff = formatDiff({\n\t\t\tfrom: incoming.path,\n\t\t\tto: current.path,\n\t\t\tchanges,\n\t\t\texpand: options.expand,\n\t\t\tmaxUnchanged: options.maxUnchanged,\n\t\t\tprefix: () => `${ascii.VERTICAL_LINE}  `,\n\t\t\tonUnchanged: ({ from, to, prefix }) =>\n\t\t\t\t`${prefix?.() ?? ''}${color.cyan(from)} → ${color.gray(to)} ${color.gray('(unchanged)')}\\n`,\n\t\t\tintro: ({ from, to, changes, prefix }) => {\n\t\t\t\tconst totalChanges = changes.filter((a) => a.added || a.removed).length;\n\n\t\t\t\treturn `${prefix?.() ?? ''}${color.cyan(from)} → ${color.gray(to)} (${totalChanges} change${\n\t\t\t\t\ttotalChanges === 1 ? '' : 's'\n\t\t\t\t})\\n${prefix?.() ?? ''}\\n`;\n\t\t\t},\n\t\t});\n\n\t\tprocess.stdout.write(formattedDiff);\n\n\t\t// if there are no changes then don't ask\n\t\tif (changes.length > 1 || current.content === '') {\n\t\t\tacceptedChanges = options.yes;\n\n\t\t\tif (!options.yes && !options.no) {\n\t\t\t\tconst confirmOptions = [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Accept',\n\t\t\t\t\t\tvalue: 'accept',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Reject',\n\t\t\t\t\t\tvalue: 'reject',\n\t\t\t\t\t},\n\t\t\t\t];\n\n\t\t\t\tif (messageHistory.length > 0) {\n\t\t\t\t\tconfirmOptions.push(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: `✨ ${color.yellow('Update with AI')} ✨ ${color.gray('(Iterate)')}`,\n\t\t\t\t\t\t\tvalue: 'update-iterate',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: `✨ ${color.yellow('Update with AI')} ✨ ${color.gray('(Start over)')}`,\n\t\t\t\t\t\t\tvalue: 'update',\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tconfirmOptions.push({\n\t\t\t\t\t\tlabel: `✨ ${color.yellow('Update with AI')} ✨`,\n\t\t\t\t\t\tvalue: 'update',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// prompt the user\n\t\t\t\tconst confirmResult = await select({\n\t\t\t\t\tmessage: 'Accept changes?',\n\t\t\t\t\toptions: confirmOptions,\n\t\t\t\t});\n\n\t\t\t\tif (isCancel(confirmResult)) {\n\t\t\t\t\tcancel('Canceled!');\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t}\n\n\t\t\t\tif (confirmResult === 'update' || confirmResult === 'update-iterate') {\n\t\t\t\t\t// clear chat context\n\t\t\t\t\tif (confirmResult === 'update') {\n\t\t\t\t\t\tmessageHistory = [];\n\t\t\t\t\t}\n\n\t\t\t\t\t// prompt for model\n\t\t\t\t\tconst modelResult = await select({\n\t\t\t\t\t\tmessage: 'Select a model',\n\t\t\t\t\t\toptions: Object.keys(models).map((key) => ({\n\t\t\t\t\t\t\tlabel: key,\n\t\t\t\t\t\t\tvalue: key,\n\t\t\t\t\t\t})),\n\t\t\t\t\t\tinitialValue: model,\n\t\t\t\t\t});\n\n\t\t\t\t\tif (isCancel(modelResult)) {\n\t\t\t\t\t\tcancel('Canceled!');\n\t\t\t\t\t\tprocess.exit(0);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (modelResult !== model) {\n\t\t\t\t\t\tstorage.set(MODEL_PREFERENCE_KEY, modelResult);\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel = modelResult as ModelName;\n\n\t\t\t\t\tconst additionalInstructions = await text({\n\t\t\t\t\t\tmessage: 'Additional instructions:',\n\t\t\t\t\t\tdefaultValue: 'None',\n\t\t\t\t\t\tvalidate: (val) => {\n\t\t\t\t\t\t\t// don't care if no messages have been sent\n\t\t\t\t\t\t\tif (messageHistory.length === 0) return undefined;\n\n\t\t\t\t\t\t\tif (val.trim() === '') {\n\t\t\t\t\t\t\t\treturn 'Please provide additional context so that I know how I can improve.';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\t\tif (isCancel(additionalInstructions)) {\n\t\t\t\t\t\tcancel('Canceled!');\n\t\t\t\t\t\tprocess.exit(0);\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst { content, prompt } = await models[model].updateFile({\n\t\t\t\t\t\t\toriginalFile: current,\n\t\t\t\t\t\t\tnewFile: {\n\t\t\t\t\t\t\t\tcontent:\n\t\t\t\t\t\t\t\t\tconfirmResult === 'update-iterate'\n\t\t\t\t\t\t\t\t\t\t? updatedContent\n\t\t\t\t\t\t\t\t\t\t: incoming.content,\n\t\t\t\t\t\t\t\tpath: incoming.path,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tadditionalInstructions:\n\t\t\t\t\t\t\t\tadditionalInstructions !== 'None'\n\t\t\t\t\t\t\t\t\t? additionalInstructions\n\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\tloading: options.loading,\n\t\t\t\t\t\t\tverbose: options.verbose,\n\t\t\t\t\t\t\tmessages: messageHistory,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tupdatedContent = content;\n\n\t\t\t\t\t\t// add messages to history\n\t\t\t\t\t\tmessageHistory.push({ role: 'user', content: prompt });\n\t\t\t\t\t\tmessageHistory.push({ role: 'assistant', content: content });\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\toptions.loading.stop();\n\t\t\t\t\t\tlog.error(color.red(`Error getting completions: ${err}`));\n\t\t\t\t\t\tprocess.stdout.write(`${ascii.VERTICAL_LINE}\\n`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tupdatedContent = await formatFile({\n\t\t\t\t\t\tfile: {\n\t\t\t\t\t\t\tcontent: updatedContent,\n\t\t\t\t\t\t\tdestPath: current.path,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbiomeOptions: config.biomeOptions,\n\t\t\t\t\t\tprettierOptions: config.prettierOptions,\n\t\t\t\t\t\tformatter: config.formatter,\n\t\t\t\t\t});\n\n\t\t\t\t\tprocess.stdout.write(`${ascii.VERTICAL_LINE}\\n`);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tacceptedChanges = confirmResult === 'accept';\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tbreak; // there were no changes or changes were automatically accepted\n\t}\n\n\tif (acceptedChanges) {\n\t\treturn { applyChanges: true, updatedContent };\n\t}\n\n\treturn { applyChanges: false };\n};\n\ntype InstallDependenciesOptions = {\n\tyes: boolean;\n\tno?: boolean;\n\tcwd: string;\n\tpm: Agent;\n\tignoreWorkspace?: boolean;\n};\n\ntype InstallDependenciesResult = {\n\t/** True if dependencies were installed */\n\tinstalled: boolean;\n\tdependencies: Set<string>;\n\tdevDependencies: Set<string>;\n};\n\nexport const promptInstallDependencies = async (\n\tdeps: Set<string>,\n\tdevDeps: Set<string>,\n\t{ yes, no = false, cwd, pm, ignoreWorkspace = false }: InstallDependenciesOptions\n): Promise<InstallDependenciesResult> => {\n\t// check if dependencies are already installed\n\tconst { dependencies, devDependencies } = returnShouldInstall(deps, devDeps, { cwd });\n\n\tconst hasDependencies = dependencies.size > 0 || devDependencies.size > 0;\n\n\tif (hasDependencies) {\n\t\tlet install = yes;\n\t\tif (!yes && !no) {\n\t\t\tconst result = await confirm({\n\t\t\t\tmessage: 'Would you like to install dependencies?',\n\t\t\t\tinitialValue: true,\n\t\t\t});\n\n\t\t\tif (isCancel(result)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tinstall = result;\n\t\t}\n\n\t\tif (install) {\n\t\t\tif (dependencies.size > 0) {\n\t\t\t\tawait installDependencies({\n\t\t\t\t\tpm,\n\t\t\t\t\tdeps: Array.from(dependencies),\n\t\t\t\t\tdev: false,\n\t\t\t\t\tcwd,\n\t\t\t\t\tignoreWorkspace,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (devDependencies.size > 0) {\n\t\t\t\tawait installDependencies({\n\t\t\t\t\tpm,\n\t\t\t\t\tdeps: Array.from(devDependencies),\n\t\t\t\t\tdev: true,\n\t\t\t\t\tcwd,\n\t\t\t\t\tignoreWorkspace,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn { installed: true, dependencies, devDependencies };\n\t\t}\n\t}\n\n\treturn { installed: false, dependencies, devDependencies };\n};\n\n// From sveltejs/cli https://github.com/sveltejs/cli/blob/main/packages/clack-prompts/index.ts#L606\nexport const taskLog = (title: string) => {\n\tconst BAR = color.dim(ascii.VERTICAL_LINE);\n\tconst ACTIVE = color.green(ascii.S_STEP_ACTIVE);\n\tconst SUCCESS = color.green(ascii.S_SUCCESS);\n\tconst ERROR = color.red(ascii.S_ERROR);\n\n\t// heading\n\tprocess.stdout.write(`${BAR}\\n`);\n\tprocess.stdout.write(`${ACTIVE}  ${title}\\n`);\n\n\tlet output = '';\n\tlet frame = '';\n\n\t// clears previous output\n\tconst clear = (eraseTitle = false): void => {\n\t\tif (!frame) return;\n\t\tconst terminalWidth = process.stdout.columns;\n\t\tconst frameHeight = frame.split('\\n').reduce((height, line) => {\n\t\t\t// accounts for line wraps\n\t\t\treturn height + Math.ceil(line.length / terminalWidth);\n\t\t}, 0);\n\t\tconst lines = frameHeight + (eraseTitle ? 1 : 0);\n\n\t\tprocess.stdout.write(cursor.up(lines));\n\t\tprocess.stdout.write(erase.down());\n\t};\n\n\t// logs the output\n\tconst print = (limit = 0): void => {\n\t\tconst lines = output.split('\\n').slice(-limit);\n\t\t// reset frame\n\t\tframe = '';\n\t\tfor (const line of lines) {\n\t\t\tframe += `${BAR}  ${line}\\n`;\n\t\t}\n\t\tprocess.stdout.write(color.dim(frame));\n\t};\n\n\treturn {\n\t\tset text(data: string) {\n\t\t\tclear();\n\t\t\toutput += data;\n\t\t\t// half the height of the terminal\n\t\t\tconst frameHeight = Math.ceil(process.stdout.rows / 2);\n\t\t\tprint(frameHeight);\n\t\t},\n\t\tfail(message: string): void {\n\t\t\tclear(true);\n\t\t\tprocess.stdout.write(`${ERROR}  ${message}\\n`);\n\t\t\tprint(); // log the output on failure\n\t\t},\n\t\tsuccess(message: string): void {\n\t\t\tclear(true);\n\t\t\tprocess.stdout.write(`${SUCCESS}  ${message}\\n`);\n\t\t},\n\t};\n};\n\nexport { _intro as intro, _spinner as spinner };\n","import color from 'chalk';\nimport { program } from 'commander';\nimport { execa } from 'execa';\nimport { type Agent, resolveCommand } from 'package-manager-detector';\nimport path from 'pathe';\nimport { flags } from './blocks/package-managers/flags';\nimport type { ProjectConfig } from './config';\nimport { taskLog } from './prompts';\n\nexport type Options = {\n\tpm: Agent;\n\tdeps: string[];\n\t/** Install as devDependency */\n\tdev: boolean;\n\tcwd: string;\n\tignoreWorkspace?: boolean;\n};\n\n/** Installs the provided dependencies using the provided package manager\n *\n * @param param0\n * @returns\n */\nexport const installDependencies = async ({\n\tpm,\n\tdeps,\n\tdev,\n\tcwd,\n\tignoreWorkspace = false,\n}: Options) => {\n\tconst args = [...deps];\n\n\tif (dev) {\n\t\targs.push(flags[pm]['install-as-dev-dependency']);\n\t}\n\n\tconst noWorkspace = flags[pm]['no-workspace'];\n\n\tif (ignoreWorkspace && noWorkspace) {\n\t\targs.push(noWorkspace);\n\t}\n\n\tconst add = resolveCommand(pm, 'add', args);\n\n\tif (add == null) {\n\t\tprogram.error(color.red(`Could not resolve add command for '${pm}'.`));\n\t}\n\n\tconst task = taskLog(`Installing dependencies with ${pm}...`);\n\n\ttry {\n\t\tconst proc = execa(add.command, [...add.args], { cwd });\n\n\t\tproc.stdout.on('data', (data) => {\n\t\t\ttask.text = data;\n\t\t});\n\n\t\tproc.stderr.on('data', (data) => {\n\t\t\ttask.text = data;\n\t\t});\n\n\t\tawait proc;\n\n\t\ttask.success(`Installed ${color.cyan(deps.join(', '))}`);\n\t} catch {\n\t\ttask.fail('Failed to install dependencies');\n\t\tprocess.exit(2);\n\t}\n};\n\nconst templatePattern = /\\{\\{([^\\/]+)\\/([^\\}]+)\\}\\}/g;\n\nexport type ResolveOptions = {\n\ttemplate: string;\n\tconfig: ProjectConfig;\n\tdestPath: string;\n\tcwd: string;\n};\n\n/** Takes a template and uses replaces it with an alias or relative path that resolves to the correct block\n *\n * @param param0\n * @returns\n */\nexport const resolveLocalDependencyTemplate = ({\n\ttemplate,\n\tconfig,\n\tdestPath,\n\tcwd,\n}: ResolveOptions) => {\n\tconst destDir = path.join(destPath, '../');\n\n\treturn template.replace(templatePattern, (_, category, name) => {\n\t\tif (config.paths[category] === undefined) {\n\t\t\t// if relative make it relative\n\t\t\tif (config.paths['*'].startsWith('.')) {\n\t\t\t\tconst relative = path.relative(\n\t\t\t\t\tdestDir,\n\t\t\t\t\tpath.join(cwd, config.paths['*'], category, name)\n\t\t\t\t);\n\n\t\t\t\treturn relative.startsWith('.') ? relative : `./${relative}`;\n\t\t\t}\n\n\t\t\treturn path.join(config.paths['*'], category, name);\n\t\t}\n\n\t\t// if relative make it relative\n\t\tif (config.paths[category].startsWith('.')) {\n\t\t\tconst relative = path.relative(destDir, path.join(cwd, config.paths[category], name));\n\n\t\t\treturn relative.startsWith('.') ? relative : `./${relative}`;\n\t\t}\n\n\t\treturn path.join(config.paths[category], name);\n\t});\n};\n","import fs from 'node:fs';\nimport { Biome, Distribution } from '@biomejs/js-api';\nimport * as cssDependency from 'css-dependency';\nimport * as prettier from 'prettier';\nimport { type Lang, formatError, resolveImports } from '.';\nimport * as lines from '../blocks/ts/lines';\nimport { Err, Ok } from '../blocks/ts/result';\n\n/** Language support for `*.css` files. */\nexport const css: Lang = {\n\tmatches: (fileName) => fileName.endsWith('.css'),\n\tresolveDependencies: ({ filePath, isSubDir, excludeDeps, dirs, cwd, containingDir }) => {\n\t\tconst sourceCode = fs.readFileSync(filePath).toString();\n\n\t\tconst parseResult = cssDependency.parse(sourceCode, { allowTailwindDirectives: true });\n\n\t\tif (parseResult.isErr()) {\n\t\t\treturn Err(parseResult.unwrapErr().message);\n\t\t}\n\n\t\tconst imports = parseResult.unwrap();\n\n\t\tconst resolveResult = resolveImports({\n\t\t\tmoduleSpecifiers: imports.map((imp) => imp.module),\n\t\t\tfilePath,\n\t\t\tisSubDir,\n\t\t\tdirs,\n\t\t\tcwd,\n\t\t\tcontainingDir,\n\t\t\tdoNotInstall: excludeDeps,\n\t\t});\n\n\t\tif (resolveResult.isErr()) {\n\t\t\treturn Err(\n\t\t\t\tresolveResult\n\t\t\t\t\t.unwrapErr()\n\t\t\t\t\t.map((err) => formatError(err))\n\t\t\t\t\t.join('\\n')\n\t\t\t);\n\t\t}\n\n\t\treturn Ok(resolveResult.unwrap());\n\t},\n\tcomment: (content) => `/*\\n${lines.join(lines.get(content), { prefix: () => '\\t' })}\\n*/`,\n\tformat: async (code, { formatter, prettierOptions, biomeOptions, filePath }) => {\n\t\tif (!formatter) return code;\n\n\t\tif (formatter === 'prettier') {\n\t\t\treturn await prettier.format(code, { filepath: filePath, ...prettierOptions });\n\t\t}\n\n\t\tconst biome = await Biome.create({\n\t\t\tdistribution: Distribution.NODE,\n\t\t});\n\n\t\tif (biomeOptions) {\n\t\t\tbiome.applyConfiguration(biomeOptions);\n\t\t}\n\n\t\treturn biome.formatContent(code, { filePath }).content;\n\t},\n};\n","import fs from 'node:fs';\nimport * as parse5 from 'parse5';\nimport * as prettier from 'prettier';\nimport { type Lang, formatError, resolveImports } from '.';\nimport * as lines from '../blocks/ts/lines';\nimport { Err, Ok } from '../blocks/ts/result';\n\n/** Language support for `*.html` files. */\nexport const html: Lang = {\n\tmatches: (fileName) => fileName.endsWith('.html'),\n\tresolveDependencies: ({ filePath, isSubDir, excludeDeps, dirs, cwd, containingDir }) => {\n\t\tconst sourceCode = fs.readFileSync(filePath).toString();\n\n\t\tconst ast = parse5.parse(sourceCode);\n\n\t\tconst imports: string[] = [];\n\n\t\t// @ts-ignore yeah I know\n\t\tconst walk = (node, enter: (node) => void) => {\n\t\t\tif (!node) return;\n\n\t\t\tenter(node);\n\n\t\t\tif (node.childNodes && node.childNodes.length > 0) {\n\t\t\t\tfor (const n of node.childNodes) {\n\t\t\t\t\twalk(n, enter);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tfor (const node of ast.childNodes) {\n\t\t\twalk(node, (n) => {\n\t\t\t\tif (n.tagName === 'script') {\n\t\t\t\t\tfor (const attr of n.attrs) {\n\t\t\t\t\t\tif (attr.name === 'src') {\n\t\t\t\t\t\t\timports.push(attr.value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tn.tagName === 'link' &&\n\t\t\t\t\t// @ts-ignore yeah I know\n\t\t\t\t\tn.attrs.find((attr) => attr.name === 'rel' && attr.value === 'stylesheet')\n\t\t\t\t) {\n\t\t\t\t\tfor (const attr of n.attrs) {\n\t\t\t\t\t\tif (attr.name === 'href' && !attr.value.startsWith('http')) {\n\t\t\t\t\t\t\timports.push(attr.value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst resolveResult = resolveImports({\n\t\t\tmoduleSpecifiers: imports,\n\t\t\tfilePath,\n\t\t\tisSubDir,\n\t\t\tdirs,\n\t\t\tcwd,\n\t\t\tcontainingDir,\n\t\t\tdoNotInstall: ['svelte', '@sveltejs/kit', ...excludeDeps],\n\t\t});\n\n\t\tif (resolveResult.isErr()) {\n\t\t\treturn Err(\n\t\t\t\tresolveResult\n\t\t\t\t\t.unwrapErr()\n\t\t\t\t\t.map((err) => formatError(err))\n\t\t\t\t\t.join('\\n')\n\t\t\t);\n\t\t}\n\n\t\treturn Ok(resolveResult.unwrap());\n\t},\n\tcomment: (content) => `<!--\\n${lines.join(lines.get(content), { prefix: () => '\\t' })}\\n-->`,\n\tformat: async (code, { formatter, prettierOptions }) => {\n\t\tif (!formatter) return code;\n\n\t\tif (formatter === 'prettier') {\n\t\t\treturn await prettier.format(code, { parser: 'html', ...prettierOptions });\n\t\t}\n\n\t\t// biome is in progress for formatting html\n\n\t\treturn code;\n\t},\n};\n","import fs from 'node:fs';\nimport { Biome, Distribution } from '@biomejs/js-api';\nimport oxc from 'oxc-parser';\nimport * as prettier from 'prettier';\nimport { type Lang, formatError, resolveImports } from '.';\nimport * as lines from '../blocks/ts/lines';\nimport { Err, Ok } from '../blocks/ts/result';\n\n/** Parses the provided code and returns the names of any other modules required by the module.\n *\n * @param fileName This must be provided for oxc to infer the dialect i.e. (jsx, tsx, js, ts)\n * @param code The code to be parsed\n * @returns\n */\nexport const getJavascriptImports = (fileName: string, code: string): string[] => {\n\tconst result = oxc.parseSync(fileName, code);\n\n\tconst modules: string[] = [];\n\n\t// handle static imports\n\tfor (const imp of result.module.staticImports) {\n\t\tmodules.push(imp.moduleRequest.value);\n\t}\n\n\t// handle dynamic imports\n\tfor (const imp of result.module.dynamicImports) {\n\t\t// trims the codes and gets the module\n\t\tconst mod = code.slice(imp.moduleRequest.start + 1, imp.moduleRequest.end - 1);\n\n\t\tmodules.push(mod);\n\t}\n\n\t// handle `export x from y` syntax\n\tfor (const exp of result.module.staticExports) {\n\t\tfor (const entry of exp.entries) {\n\t\t\tif (entry.moduleRequest) {\n\t\t\t\tmodules.push(entry.moduleRequest.value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn modules;\n};\n\n/** Language support for `*.(js|ts|jsx|tsx)` files. */\nexport const typescript: Lang = {\n\tmatches: (fileName) =>\n\t\tfileName.endsWith('.ts') ||\n\t\tfileName.endsWith('.js') ||\n\t\tfileName.endsWith('.tsx') ||\n\t\tfileName.endsWith('.jsx'),\n\tresolveDependencies: ({ filePath, isSubDir, excludeDeps, dirs, cwd, containingDir }) => {\n\t\tconst code = fs.readFileSync(filePath).toString();\n\n\t\tconst modules = getJavascriptImports(filePath, code);\n\n\t\tconst resolveResult = resolveImports({\n\t\t\tmoduleSpecifiers: modules,\n\t\t\tfilePath,\n\t\t\tisSubDir,\n\t\t\tdirs,\n\t\t\tcwd,\n\t\t\tcontainingDir,\n\t\t\tdoNotInstall: excludeDeps,\n\t\t});\n\n\t\tif (resolveResult.isErr()) {\n\t\t\treturn Err(\n\t\t\t\tresolveResult\n\t\t\t\t\t.unwrapErr()\n\t\t\t\t\t.map((err) => formatError(err))\n\t\t\t\t\t.join('\\n')\n\t\t\t);\n\t\t}\n\n\t\treturn Ok(resolveResult.unwrap());\n\t},\n\tcomment: (content) => `/*\\n${lines.join(lines.get(content), { prefix: () => '\\t' })}\\n*/`,\n\tformat: async (code, { formatter, filePath, prettierOptions, biomeOptions }) => {\n\t\tif (!formatter) return code;\n\n\t\tif (formatter === 'prettier') {\n\t\t\treturn await prettier.format(code, { filepath: filePath, ...prettierOptions });\n\t\t}\n\n\t\tconst biome = await Biome.create({\n\t\t\tdistribution: Distribution.NODE,\n\t\t});\n\n\t\tif (biomeOptions) {\n\t\t\tbiome.applyConfiguration(biomeOptions);\n\t\t}\n\n\t\treturn biome.formatContent(code, { filePath }).content;\n\t},\n};\n","import { Biome, Distribution } from '@biomejs/js-api';\nimport * as prettier from 'prettier';\nimport type { Lang } from '.';\nimport * as lines from '../blocks/ts/lines';\nimport { Ok } from '../blocks/ts/result';\n\nconst format: Lang['format'] = async (\n\tcode,\n\t{ formatter, prettierOptions, biomeOptions, filePath }\n) => {\n\tif (!formatter) return code;\n\n\tif (formatter === 'prettier') {\n\t\treturn await prettier.format(code, { filepath: filePath, ...prettierOptions });\n\t}\n\n\tconst biome = await Biome.create({\n\t\tdistribution: Distribution.NODE,\n\t});\n\n\tif (biomeOptions) {\n\t\tbiome.applyConfiguration({\n\t\t\t...biomeOptions,\n\t\t\tjson: { parser: { allowComments: true } },\n\t\t});\n\t}\n\n\treturn biome.formatContent(code, { filePath }).content;\n};\n\n/** Language support for `*.(json)` files. */\nexport const json: Lang = {\n\tmatches: (fileName) => fileName.endsWith('.json'),\n\tresolveDependencies: () =>\n\t\tOk({ dependencies: [], local: [], devDependencies: [], imports: {} }),\n\t// json doesn't support comments\n\tcomment: (content: string) => content,\n\tformat,\n};\n\n/** Language support for `*.(jsonc)` files. */\nexport const jsonc: Lang = {\n\tmatches: (fileName) => fileName.endsWith('.jsonc'),\n\tresolveDependencies: () =>\n\t\tOk({ dependencies: [], local: [], devDependencies: [], imports: {} }),\n\tcomment: (content) => `/*\\n${lines.join(lines.get(content), { prefix: () => '\\t' })}\\n*/`,\n\tformat,\n};\n","import fs from 'node:fs';\nimport * as cssDependency from 'css-dependency';\nimport * as prettier from 'prettier';\nimport { type Lang, formatError, resolveImports } from '.';\nimport * as lines from '../blocks/ts/lines';\nimport { Err, Ok } from '../blocks/ts/result';\n\n/** Language support for `*.(sass|scss)` files. */\nexport const sass: Lang = {\n\tmatches: (fileName) => fileName.endsWith('.sass') || fileName.endsWith('.scss'),\n\tresolveDependencies: ({ filePath, isSubDir, excludeDeps, dirs, cwd, containingDir }) => {\n\t\tconst sourceCode = fs.readFileSync(filePath).toString();\n\n\t\tconst parseResult = cssDependency.parse(sourceCode);\n\n\t\tif (parseResult.isErr()) {\n\t\t\treturn Err(parseResult.unwrapErr().message);\n\t\t}\n\n\t\tconst imports = parseResult.unwrap();\n\n\t\tconst resolveResult = resolveImports({\n\t\t\tmoduleSpecifiers: imports.map((imp) => imp.module),\n\t\t\tfilePath,\n\t\t\tisSubDir,\n\t\t\tdirs,\n\t\t\tcwd,\n\t\t\tcontainingDir,\n\t\t\tdoNotInstall: excludeDeps,\n\t\t});\n\n\t\tif (resolveResult.isErr()) {\n\t\t\treturn Err(\n\t\t\t\tresolveResult\n\t\t\t\t\t.unwrapErr()\n\t\t\t\t\t.map((err) => formatError(err))\n\t\t\t\t\t.join('\\n')\n\t\t\t);\n\t\t}\n\n\t\treturn Ok(resolveResult.unwrap());\n\t},\n\tcomment: (content) => `/*\\n${lines.join(lines.get(content), { prefix: () => '\\t' })}\\n*/`,\n\tformat: async (code, { formatter, prettierOptions }) => {\n\t\tif (!formatter) return code;\n\n\t\tif (formatter === 'prettier') {\n\t\t\treturn await prettier.format(code, { parser: 'scss', ...prettierOptions });\n\t\t}\n\n\t\treturn code;\n\t},\n};\n","import fs from 'node:fs';\nimport { type Node, walk } from 'estree-walker';\nimport * as prettier from 'prettier';\nimport prettierPluginSvelte from 'prettier-plugin-svelte';\nimport * as sv from 'svelte/compiler';\nimport { type Lang, formatError, resolveImports } from '.';\nimport * as lines from '../blocks/ts/lines';\nimport { Err, Ok } from '../blocks/ts/result';\n\n/** Language support for `*.svelte` files. */\nexport const svelte: Lang = {\n\tmatches: (fileName) => fileName.endsWith('.svelte'),\n\tresolveDependencies: ({ filePath, isSubDir, excludeDeps, dirs, cwd, containingDir }) => {\n\t\tconst sourceCode = fs.readFileSync(filePath).toString();\n\n\t\tconst root = sv.parse(sourceCode, { modern: true, filename: filePath });\n\n\t\t// if no script tag then no dependencies\n\t\tif (!root.instance && !root.module)\n\t\t\treturn Ok({ dependencies: [], devDependencies: [], local: [], imports: {} });\n\n\t\tconst modules: string[] = [];\n\n\t\tconst enter = (node: Node) => {\n\t\t\tif (\n\t\t\t\tnode.type === 'ImportDeclaration' ||\n\t\t\t\tnode.type === 'ExportAllDeclaration' ||\n\t\t\t\tnode.type === 'ExportNamedDeclaration'\n\t\t\t) {\n\t\t\t\tif (typeof node.source?.value === 'string') {\n\t\t\t\t\tmodules.push(node.source.value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (node.type === 'ImportExpression') {\n\t\t\t\tif (node.source.type === 'Literal' && typeof node.source.value === 'string') {\n\t\t\t\t\tmodules.push(node.source.value);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (root.instance) {\n\t\t\t// biome-ignore lint/suspicious/noExplicitAny: The root instance is just missing the `id` prop\n\t\t\twalk(root.instance as any, { enter });\n\t\t}\n\n\t\tif (root.module) {\n\t\t\t// biome-ignore lint/suspicious/noExplicitAny: The root instance is just missing the `id` prop\n\t\t\twalk(root.module as any, { enter });\n\t\t}\n\n\t\tconst resolveResult = resolveImports({\n\t\t\tmoduleSpecifiers: modules,\n\t\t\tfilePath,\n\t\t\tisSubDir,\n\t\t\tdirs,\n\t\t\tcwd,\n\t\t\tcontainingDir,\n\t\t\tdoNotInstall: ['svelte', '@sveltejs/kit', ...excludeDeps],\n\t\t});\n\n\t\tif (resolveResult.isErr()) {\n\t\t\treturn Err(\n\t\t\t\tresolveResult\n\t\t\t\t\t.unwrapErr()\n\t\t\t\t\t.map((err) => formatError(err))\n\t\t\t\t\t.join('\\n')\n\t\t\t);\n\t\t}\n\n\t\treturn Ok(resolveResult.unwrap());\n\t},\n\tcomment: (content) => `<!--\\n${lines.join(lines.get(content), { prefix: () => '\\t' })}\\n-->`,\n\tformat: async (code, { formatter, filePath, prettierOptions }) => {\n\t\tif (!formatter) return code;\n\n\t\t// only attempt to format if svelte plugin is included in the config.\n\t\tif (\n\t\t\tformatter === 'prettier' &&\n\t\t\tprettierOptions &&\n\t\t\tprettierOptions.plugins?.find((plugin) => plugin === 'prettier-plugin-svelte')\n\t\t) {\n\t\t\treturn await prettier.format(code, {\n\t\t\t\tfilepath: filePath,\n\t\t\t\tplugins: [prettierPluginSvelte],\n\t\t\t\t...prettierOptions,\n\t\t\t});\n\t\t}\n\n\t\treturn code;\n\t},\n};\n","import type { Lang } from '.';\nimport * as lines from '../blocks/ts/lines';\nimport { Ok } from '../blocks/ts/result';\n\n/** Language support for `*.svg` files. */\nexport const svg: Lang = {\n\tmatches: (fileName) => fileName.endsWith('.svg'),\n\tresolveDependencies: () =>\n\t\tOk({ dependencies: [], local: [], devDependencies: [], imports: {} }),\n\tcomment: (content) => `<!--\\n${lines.join(lines.get(content), { prefix: () => '\\t' })}\\n-->`,\n\tformat: async (code) => code,\n};\n","import fs from 'node:fs';\nimport * as prettier from 'prettier';\nimport * as v from 'vue/compiler-sfc';\nimport { type Lang, formatError, resolveImports } from '.';\nimport * as lines from '../blocks/ts/lines';\nimport { Err, Ok } from '../blocks/ts/result';\nimport { getJavascriptImports } from './javascript';\n\n/** Language support for `*.vue` files. */\nexport const vue: Lang = {\n\tmatches: (fileName) => fileName.endsWith('.vue'),\n\tresolveDependencies: ({ filePath, isSubDir, excludeDeps, dirs, cwd, containingDir }) => {\n\t\tconst code = fs.readFileSync(filePath).toString();\n\n\t\tconst parsed = v.parse(code, { filename: filePath });\n\n\t\tconst modules: string[] = [];\n\n\t\tif (parsed.descriptor.script?.content) {\n\t\t\tconst mods = getJavascriptImports('noop.ts', parsed.descriptor.script.content);\n\n\t\t\tmodules.push(...mods);\n\t\t}\n\n\t\tif (parsed.descriptor.scriptSetup?.content) {\n\t\t\tconst mods = getJavascriptImports('noop.ts', parsed.descriptor.scriptSetup.content);\n\n\t\t\tmodules.push(...mods);\n\t\t}\n\n\t\tif (modules.length === 0)\n\t\t\treturn Ok({ dependencies: [], devDependencies: [], local: [], imports: {} });\n\n\t\tconst resolveResult = resolveImports({\n\t\t\tmoduleSpecifiers: modules,\n\t\t\tfilePath,\n\t\t\tisSubDir,\n\t\t\tdirs,\n\t\t\tcwd,\n\t\t\tcontainingDir,\n\t\t\tdoNotInstall: ['vue', 'nuxt', ...excludeDeps],\n\t\t});\n\n\t\tif (resolveResult.isErr()) {\n\t\t\treturn Err(\n\t\t\t\tresolveResult\n\t\t\t\t\t.unwrapErr()\n\t\t\t\t\t.map((err) => formatError(err))\n\t\t\t\t\t.join('\\n')\n\t\t\t);\n\t\t}\n\n\t\treturn Ok(resolveResult.unwrap());\n\t},\n\tcomment: (content) => `<!--\\n${lines.join(lines.get(content), { prefix: () => '\\t' })}\\n-->`,\n\tformat: async (code, { formatter, prettierOptions }) => {\n\t\tif (!formatter) return code;\n\n\t\tif (formatter === 'prettier') {\n\t\t\treturn await prettier.format(code, { parser: 'vue', ...prettierOptions });\n\t\t}\n\n\t\t// biome has issues with vue support\n\t\treturn code;\n\t},\n};\n","import * as prettier from 'prettier';\nimport type { Lang } from '.';\nimport * as lines from '../blocks/ts/lines';\nimport { Ok } from '../blocks/ts/result';\n\n/** Language support for `*.(yaml|yml)` files. */\nexport const yaml: Lang = {\n\tmatches: (fileName) => fileName.endsWith('.yml') || fileName.endsWith('.yaml'),\n\tresolveDependencies: () =>\n\t\tOk({ dependencies: [], local: [], devDependencies: [], imports: {} }),\n\tcomment: (content: string) => lines.join(lines.get(content), { prefix: () => '# ' }),\n\tformat: async (code, { formatter, prettierOptions }) => {\n\t\tif (!formatter) return code;\n\n\t\tif (formatter === 'prettier') {\n\t\t\treturn await prettier.format(code, { parser: 'yaml', ...prettierOptions });\n\t\t}\n\n\t\treturn code;\n\t},\n};\n","import fs from 'node:fs';\nimport { builtinModules } from 'node:module';\nimport type { PartialConfiguration } from '@biomejs/wasm-nodejs';\nimport color from 'chalk';\nimport { createPathsMatcher } from 'get-tsconfig';\nimport path from 'pathe';\nimport type * as prettier from 'prettier';\nimport validatePackageName from 'validate-npm-package-name';\nimport * as ascii from '../ascii';\nimport * as lines from '../blocks/ts/lines';\nimport { Err, Ok, type Result } from '../blocks/ts/result';\nimport type { Formatter } from '../config';\nimport { tryGetTsconfig } from '../files';\nimport { findNearestPackageJson } from '../package';\nimport { parsePackageName } from '../parse-package-name';\nimport { css } from './css';\nimport { html } from './html';\nimport { typescript } from './javascript';\nimport { json, jsonc } from './json';\nimport { sass } from './sass';\nimport { svelte } from './svelte';\nimport { svg } from './svg';\nimport { vue } from './vue';\nimport { yaml } from './yaml';\n\nexport type ResolvedDependencies = {\n\tlocal: string[];\n\tdevDependencies: string[];\n\tdependencies: string[];\n\t/** Maps a literal import to a template import to be replaced during add/update */\n\timports: Record<string, string>;\n};\n\nexport type ResolveDependencyOptions = {\n\tfilePath: string;\n\t/** Only valid for folder based blocks. Helps identify a self dependency */\n\tcontainingDir?: string;\n\tisSubDir: boolean;\n\texcludeDeps: string[];\n\tcwd: string;\n\tdirs: string[];\n};\n\nexport type FormatOptions = {\n\tformatter?: Formatter;\n\t/** Can be used to infer the prettier parser */\n\tfilePath: string;\n\tprettierOptions: prettier.Options | null;\n\tbiomeOptions: PartialConfiguration | null;\n};\n\nexport type Lang = {\n\t/** Matches the supported file types */\n\tmatches: (fileName: string) => boolean;\n\t/** Reads the file and gets any dependencies from its imports */\n\tresolveDependencies: (opts: ResolveDependencyOptions) => Result<ResolvedDependencies, string>;\n\t/** Returns a multiline comment containing the content */\n\tcomment: (content: string) => string;\n\tformat: (code: string, opts: FormatOptions) => Promise<string>;\n};\n\nexport type ResolveImportOptions = {\n\tmoduleSpecifiers: string[];\n\tisSubDir: boolean;\n\tfilePath: string;\n\t/** Only valid for folder based blocks. Helps identify a self dependency */\n\tcontainingDir?: string;\n\tdoNotInstall?: string[];\n\tdirs: string[];\n\tcwd: string;\n};\n\nexport const formatError = (err: string) => {\n\treturn `${lines.join(lines.get(err), {\n\t\tprefix: (l) => {\n\t\t\tif (l === 0) return `${ascii.VERTICAL_LINE}  ${ascii.ERROR} `;\n\n\t\t\treturn `${ascii.VERTICAL_LINE}  `;\n\t\t},\n\t})}`;\n};\n\nexport const resolveImports = ({\n\tmoduleSpecifiers,\n\tisSubDir,\n\tfilePath,\n\tcontainingDir,\n\tdoNotInstall,\n\tdirs,\n\tcwd,\n}: ResolveImportOptions): Result<ResolvedDependencies, string[]> => {\n\tconst errors: string[] = [];\n\n\tconst deps = new Set<string>();\n\tconst localDeps = new Set<string>();\n\tconst imports: Record<string, string> = {};\n\n\tfor (const specifier of moduleSpecifiers) {\n\t\t// don't add dependencies to node\n\t\tif (builtinModules.includes(specifier) || specifier.startsWith('node:')) continue;\n\n\t\t// check if specifier is a local dependency\n\t\tif (specifier.startsWith('.')) {\n\t\t\tconst localDep = resolveLocalImport(specifier, isSubDir, {\n\t\t\t\tfilePath,\n\t\t\t\tcontainingDir,\n\t\t\t\tdirs,\n\t\t\t\tcwd,\n\t\t\t});\n\n\t\t\tif (localDep.isErr()) {\n\t\t\t\terrors.push(localDep.unwrapErr());\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst dep = localDep.unwrap();\n\n\t\t\tif (dep) {\n\t\t\t\tlocalDeps.add(dep.dependency);\n\t\t\t\timports[specifier] = dep.template;\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\t\t// check if the specifier is a package\n\t\tconst parsed = parsePackageName(specifier);\n\n\t\tif (!parsed.isErr()) {\n\t\t\tconst depInfo = parsed.unwrap();\n\n\t\t\tif (validatePackageName(depInfo.name).validForNewPackages) {\n\t\t\t\tdeps.add(specifier);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// if specifier wasn't a local dependency or package then it might be a path alias\n\t\tconst localDep = tryResolveLocalAlias(specifier, isSubDir, {\n\t\t\tfilePath,\n\t\t\tcontainingDir,\n\t\t\tdirs,\n\t\t\tcwd,\n\t\t});\n\n\t\tif (localDep.isErr()) {\n\t\t\terrors.push(localDep.unwrapErr());\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst dep = localDep.unwrap();\n\n\t\tif (dep) {\n\t\t\tlocalDeps.add(dep.dependency);\n\t\t\timports[specifier] = dep.template;\n\t\t} else {\n\t\t\tconsole.warn(\n\t\t\t\t`${ascii.VERTICAL_LINE}  ${ascii.WARN} Skipped adding import \\`${color.cyan(specifier)}\\` from ${filePath}. Reason: Not a valid package name or path alias.`\n\t\t\t);\n\t\t}\n\t}\n\n\tif (errors.length > 0) {\n\t\treturn Err(errors);\n\t}\n\n\tconst { devDependencies, dependencies } = resolveRemoteDeps(Array.from(deps), filePath, {\n\t\tdoNotInstall: doNotInstall ? doNotInstall : [],\n\t});\n\n\treturn Ok({\n\t\tdependencies,\n\t\tdevDependencies,\n\t\tlocal: Array.from(localDeps),\n\t\timports,\n\t} satisfies ResolvedDependencies);\n};\n\ntype ResolveLocalImportResult = {\n\t/** The local block that is a dependency */\n\tdependency: string;\n\t/** A template used to resolve the import during add/update */\n\ttemplate: string;\n};\n\nconst resolveLocalImport = (\n\tmod: string,\n\tisSubDir: boolean,\n\t{\n\t\tfilePath,\n\t\tcontainingDir,\n\t\tdropExtension = true,\n\t\talias,\n\t\tdirs,\n\t\tcwd,\n\t}: {\n\t\tfilePath: string;\n\t\tcontainingDir?: string;\n\t\tdirs: string[];\n\t\talias?: string;\n\t\tmodIsFile?: boolean;\n\t\tcwd: string;\n\t\tdropExtension?: boolean;\n\t}\n): Result<ResolveLocalImportResult | undefined, string> => {\n\tif (isSubDir && (mod.startsWith('./') || mod === '.')) return Ok(undefined);\n\n\t// get the path to the current category\n\t// if the block is a subdirectory block then containing dir must exist\n\tconst categoryDir = isSubDir ? path.join(containingDir!, '../') : path.join(filePath, '../');\n\n\t// get the actual path to the module\n\tconst modPath = path.join(path.join(filePath, '../'), mod);\n\n\t// get the full path to the current category containing folder\n\tconst fullDir = path.join(categoryDir, '../');\n\n\t// prevent self reference in subdirectories\n\tif (containingDir && modPath.startsWith(containingDir)) return Ok(undefined);\n\n\tif (modPath.startsWith(fullDir)) {\n\t\treturn Ok(parsePath(modPath.slice(fullDir.length), dropExtension));\n\t}\n\n\tfor (const dir of dirs) {\n\t\tconst containingPath = path.resolve(path.join(cwd, dir));\n\t\tconst absPath = path.resolve(modPath);\n\n\t\tif (absPath.startsWith(containingPath)) {\n\t\t\treturn Ok(parsePath(absPath.slice(containingPath.length + 1), dropExtension));\n\t\t}\n\t}\n\n\treturn Err(\n\t\t`${filePath}:\\n${alias ? alias : mod} references code not contained in ${color.bold(dirs.join(', '))} and cannot be resolved.`\n\t);\n};\n\nconst parsePath = (localPath: string, dropExtension = true): ResolveLocalImportResult => {\n\tlet [category, block, ...rest] = localPath.split('/');\n\n\t// if undefined we assume we are pointing to the index file\n\tif (block === undefined) {\n\t\tblock = 'index';\n\t}\n\n\tlet trimmedBlock = block;\n\n\t// remove file extension\n\tif (dropExtension && trimmedBlock.includes('.')) {\n\t\ttrimmedBlock = trimmedBlock.slice(\n\t\t\t0,\n\t\t\ttrimmedBlock.length - path.parse(trimmedBlock).ext.length\n\t\t);\n\t}\n\n\tconst blockSpecifier = `${category}/${trimmedBlock}`;\n\n\tlet template = `{{${blockSpecifier}}}`;\n\n\tif (rest.length === 0) {\n\t\tif (trimmedBlock.length !== block.length) {\n\t\t\t// add extension to template\n\t\t\ttemplate += path.parse(block).ext;\n\t\t}\n\t} else {\n\t\ttemplate += `/${rest.join('/')}`;\n\t}\n\n\treturn { dependency: blockSpecifier, template };\n};\n\n/** Tries to resolve the modules as an alias using the tsconfig. */\nconst tryResolveLocalAlias = (\n\tmod: string,\n\tisSubDir: boolean,\n\t{\n\t\tfilePath,\n\t\tdirs,\n\t\tcwd,\n\t\tcontainingDir,\n\t}: { filePath: string; containingDir?: string; dirs: string[]; cwd: string }\n): Result<ResolveLocalImportResult | undefined, string> => {\n\tconst configResult = tryGetTsconfig(filePath);\n\n\tif (configResult.isErr()) return Err(configResult.unwrapErr());\n\n\tconst config = configResult.unwrap();\n\n\tif (config === null) return Ok(undefined);\n\n\tconst matcher = createPathsMatcher(config);\n\n\tif (matcher) {\n\t\t// if the mod is actually remote the returns paths will be empty\n\t\tconst paths = matcher(mod);\n\n\t\tfor (const modPath of paths) {\n\t\t\tconst foundMod = searchForModule(modPath);\n\n\t\t\tif (!foundMod) continue;\n\n\t\t\tconst pathResolved = path.relative(\n\t\t\t\tpath.resolve(path.join(filePath, '../')),\n\t\t\t\tfoundMod.prettyPath\n\t\t\t);\n\n\t\t\t// if it is not equal the extension has already been dropped\n\t\t\t// we omit the '' extension because it there is no extension there is nothing to be dropped\n\t\t\tconst shouldDropExtension = resolutionEquality(foundMod.prettyPath, foundMod.path, [\n\t\t\t\t'.js',\n\t\t\t\t'.ts',\n\t\t\t]);\n\n\t\t\tconst localDep = resolveLocalImport(pathResolved, isSubDir, {\n\t\t\t\tfilePath,\n\t\t\t\tcontainingDir,\n\t\t\t\talias: mod,\n\t\t\t\tdropExtension: shouldDropExtension,\n\t\t\t\tdirs,\n\t\t\t\tcwd,\n\t\t\t\tmodIsFile: foundMod.type === 'file',\n\t\t\t});\n\n\t\t\tif (localDep.isErr()) return Err(localDep.unwrapErr());\n\n\t\t\tif (localDep.unwrap()) return Ok(localDep.unwrap()!);\n\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn Ok(undefined);\n};\n\n/** Node allows no extension or a .js extension or a .ts extension to all resolve to the same place because of this we employ a different method of equality.\n *\n *  Basically we want to treat a path with a .js extension as equal to the same path with a .ts extension and vise versa.\n */\nconst resolutionEquality = (pathA: string, pathB: string, validExtensions = ['.ts', '.js', '']) => {\n\tif (pathA === pathB) return true;\n\n\tconst parsedA = path.parse(pathA);\n\tconst parsedB = path.parse(pathB);\n\n\tconst pathAWithoutExtension = path.join(parsedA.dir, parsedA.name);\n\tconst pathBWithoutExtension = path.join(parsedB.dir, parsedB.name);\n\n\t// if paths without extension aren't equal then return false\n\tif (pathAWithoutExtension !== pathBWithoutExtension) return false;\n\n\t// as long as both paths have a .js or .ts extension we can be sure that they are equal\n\tif (validExtensions.includes(parsedA.ext) && validExtensions.includes(parsedB.ext)) return true;\n\n\treturn false;\n};\n\n/** Searches around for the module\n *\n * @param path\n */\nconst searchForModule = (\n\tmodPath: string\n): { path: string; prettyPath: string; type: 'file' | 'directory' } | undefined => {\n\tif (fs.existsSync(modPath)) {\n\t\treturn {\n\t\t\tpath: modPath,\n\t\t\tprettyPath: modPath,\n\t\t\ttype: fs.statSync(modPath).isDirectory() ? 'directory' : 'file',\n\t\t};\n\t}\n\n\tconst containing = path.join(modPath, '../');\n\n\t// if containing folder doesn't exist this can't exist\n\tif (!fs.existsSync(containing)) return undefined;\n\n\tconst modParsed = path.parse(modPath);\n\n\t// sometimes it will point to .js because it will resolve in prod but not for us\n\tif (modParsed.ext === '.js') {\n\t\tconst newPath = `${modPath.slice(0, modPath.length - 3)}.ts`;\n\n\t\tif (fs.existsSync(newPath)) return { path: newPath, prettyPath: modPath, type: 'file' };\n\t}\n\n\tconst files = fs.readdirSync(containing);\n\n\tfor (const file of files) {\n\t\tconst fileParsed = path.parse(file);\n\n\t\t// this way the extension doesn't matter\n\t\tif (fileParsed.name === modParsed.base) {\n\t\t\tconst filePath = path.join(containing, file);\n\n\t\t\t// we remove the extension since it wasn't included by the user\n\t\t\tconst prettyPath = filePath.slice(0, filePath.length - fileParsed.ext.length);\n\n\t\t\treturn {\n\t\t\t\tpath: filePath,\n\t\t\t\tprettyPath: prettyPath,\n\t\t\t\ttype: fs.statSync(filePath).isDirectory() ? 'directory' : 'file',\n\t\t\t};\n\t\t}\n\t}\n\n\treturn undefined;\n};\n\n/** Iterates over the dependency and resolves each one using the nearest package.json file.\n * Strips node APIs and pins the version of each dependency based on what is in the package.json.\n *\n * @param deps\n * @param filePath\n * @returns\n */\nconst resolveRemoteDeps = (\n\tdeps: string[],\n\tfilePath: string,\n\t{ doNotInstall }: { doNotInstall: string[] } = {\n\t\tdoNotInstall: [],\n\t}\n) => {\n\tconst exemptDeps = new Set(doNotInstall);\n\n\tconst pkgPath = findNearestPackageJson(path.dirname(filePath), '');\n\n\tconst dependencies = new Set<string>();\n\tconst devDependencies = new Set<string>();\n\n\tif (pkgPath) {\n\t\tconst { devDependencies: packageDevDependencies, dependencies: packageDependencies } =\n\t\t\tJSON.parse(fs.readFileSync(pkgPath, 'utf-8'));\n\n\t\tfor (const dep of deps) {\n\t\t\tconst parsed = parsePackageName(dep);\n\n\t\t\tif (parsed.isErr()) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`${ascii.VERTICAL_LINE}  ${ascii.WARN} Skipped adding import \\`${color.cyan(dep)}\\`. Reason: Couldn't parse package name`\n\t\t\t\t);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst depInfo = parsed.unwrap();\n\n\t\t\tif (!validatePackageName(depInfo.name).validForNewPackages) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`${ascii.VERTICAL_LINE}  ${ascii.WARN} Skipped adding import \\`${color.cyan(dep)}\\`. Reason: Not a valid package name`\n\t\t\t\t);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (exemptDeps.has(depInfo.name)) continue;\n\n\t\t\tlet version: string | undefined = undefined;\n\t\t\tif (packageDependencies !== undefined) {\n\t\t\t\tversion = packageDependencies[depInfo.name];\n\t\t\t}\n\n\t\t\tif (version !== undefined) {\n\t\t\t\tdependencies.add(`${depInfo.name}@${version}`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (packageDevDependencies !== undefined) {\n\t\t\t\tversion = packageDevDependencies[depInfo.name];\n\t\t\t}\n\n\t\t\tif (version !== undefined) {\n\t\t\t\tdevDependencies.add(`${depInfo.name}@${version}`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// if no version found just add it without a version\n\t\t\tdependencies.add(depInfo.name);\n\t\t}\n\t}\n\n\treturn {\n\t\tdependencies: Array.from(dependencies),\n\t\tdevDependencies: Array.from(devDependencies),\n\t};\n};\n\nconst languages: Lang[] = [css, html, json, jsonc, sass, svelte, svg, typescript, vue, yaml];\n\nexport {\n\tcss,\n\thtml,\n\tjson,\n\tjsonc,\n\tsass,\n\tsvelte,\n\tsvg,\n\ttypescript,\n\tvue,\n\tyaml,\n\tlanguages,\n\tresolutionEquality,\n};\n","import fs from 'node:fs';\nimport color from 'chalk';\nimport path from 'pathe';\nimport * as v from 'valibot';\nimport type { Block, Category, Manifest } from '../../types';\nimport * as ascii from '../ascii';\nimport type { RegistryConfig } from '../config';\nimport { parsePackageName } from '../parse-package-name';\n\n// Update this list as needed\n// Use the name of the package not the framework\nconst FRAMEWORKS = new Set([\n\t// svelte\n\t'svelte',\n\t'@sveltejs/kit',\n\n\t// vue\n\t'vue',\n\t'nuxt',\n\n\t// react\n\t'react',\n\t'react-dom',\n\t'next',\n\t'@remix-run/react',\n\n\t// angular\n\t'@angular/core',\n\t'@angular/common',\n\t'@angular/forms',\n\t'@angular/platform-browser',\n\t'@angular/platform-browser-dynamic',\n\t'@angular/router',\n\n\t// misc\n\t'@builder.io/qwik',\n\t'astro',\n\t'solid-js',\n]);\n\nconst ruleLevelSchema = v.union([v.literal('off'), v.literal('warn'), v.literal('error')]);\n\nexport type RuleLevel = v.InferInput<typeof ruleLevelSchema>;\n\nexport type CheckOptions = {\n\tmanifest: Manifest;\n\toptions: (string | number)[];\n\tcwd: string;\n\tconfig: RegistryConfig;\n};\n\nexport type Rule = { description: string } & (\n\t| {\n\t\t\tscope: 'block';\n\t\t\tcheck: (block: Block, opts: CheckOptions) => string[] | undefined;\n\t  }\n\t| {\n\t\t\tscope: 'global';\n\t\t\tcheck: (opts: CheckOptions) => string[] | undefined;\n\t  }\n);\n\nconst ruleKeySchema = v.union([\n\tv.literal('no-category-index-file-dependency'),\n\tv.literal('no-unpinned-dependency'),\n\tv.literal('require-local-dependency-exists'),\n\tv.literal('max-local-dependencies'),\n\tv.literal('no-circular-dependency'),\n\tv.literal('no-unused-block'),\n\tv.literal('no-framework-dependency'),\n\tv.literal('require-config-file-exists'),\n\tv.literal('no-config-file-framework-dependency'),\n\tv.literal('no-config-file-unpinned-dependency'),\n]);\n\nexport type RuleKey = v.InferInput<typeof ruleKeySchema>;\n\nconst rules: Record<RuleKey, Rule> = {\n\t'no-unpinned-dependency': {\n\t\tdescription: 'Require all dependencies to have a pinned version.',\n\t\tscope: 'block',\n\t\tcheck: (block) => {\n\t\t\tconst errors: string[] = [];\n\n\t\t\tfor (const dep of [...block.dependencies, ...block.devDependencies]) {\n\t\t\t\tif (!dep.includes('@')) {\n\t\t\t\t\terrors.push(`Couldn't find a version to use for ${color.bold(dep)}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn errors.length > 0 ? errors : undefined;\n\t\t},\n\t},\n\t'require-local-dependency-exists': {\n\t\tdescription: 'Require all local dependencies to exist.',\n\t\tscope: 'block',\n\t\tcheck: (block, { manifest }) => {\n\t\t\tconst errors: string[] = [];\n\n\t\t\tfor (const dep of block.localDependencies) {\n\t\t\t\tconst [depCategoryName, depBlockName] = dep.split('/');\n\n\t\t\t\tconst depCategory = manifest.categories.find(\n\t\t\t\t\t(cat) => cat.name.trim() === depCategoryName.trim()\n\t\t\t\t);\n\n\t\t\t\tconst error = `${color.bold(`${block.category}/${block.name}`)} depends on local dependency ${color.bold(dep)} which doesn't exist`;\n\n\t\t\t\tif (!depCategory) {\n\t\t\t\t\terrors.push(error);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (depCategory.blocks.find((b) => b.name === depBlockName) === undefined) {\n\t\t\t\t\terrors.push(error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn errors.length > 0 ? errors : undefined;\n\t\t},\n\t},\n\t'no-category-index-file-dependency': {\n\t\tdescription: 'Disallow depending on the index file of a category.',\n\t\tscope: 'block',\n\t\tcheck: (block, { manifest }) => {\n\t\t\tconst errors: string[] = [];\n\n\t\t\tfor (const dep of block.localDependencies) {\n\t\t\t\tconst [categoryName, name] = dep.split('/');\n\n\t\t\t\tif (name !== 'index') continue;\n\n\t\t\t\tconst category = manifest.categories.find((cat) => cat.name === categoryName);\n\n\t\t\t\tif (!category) continue;\n\n\t\t\t\tconst depBlock = category.blocks.find((b) => b.name === name);\n\n\t\t\t\tif (!depBlock) continue;\n\n\t\t\t\terrors.push(\n\t\t\t\t\t`${color.bold(`${block.category}/${block.name}`)} depends on ${color.bold(`${categoryName}/${name}`)}`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn errors.length > 0 ? errors : undefined;\n\t\t},\n\t},\n\t'max-local-dependencies': {\n\t\tdescription: 'Enforces a limit on the amount of local dependencies a block can have.',\n\t\tscope: 'block',\n\t\tcheck: (block, { options }) => {\n\t\t\tconst errors: string[] = [];\n\n\t\t\tlet limit: number;\n\n\t\t\tif (typeof options[0] !== 'number') {\n\t\t\t\tlimit = 5;\n\t\t\t} else {\n\t\t\t\tlimit = options[0];\n\t\t\t}\n\n\t\t\tif (block.localDependencies.length > limit) {\n\t\t\t\terrors.push(\n\t\t\t\t\t`${color.bold(`${block.category}/${block.name}`)} has too many local dependencies (${color.bold(block.localDependencies.length)}) limit (${color.bold(limit)})`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn errors.length > 0 ? errors : undefined;\n\t\t},\n\t},\n\t'no-circular-dependency': {\n\t\tdescription: 'Disallow circular dependencies.',\n\t\tscope: 'block',\n\t\tcheck: (block, { manifest }) => {\n\t\t\tconst errors: string[] = [];\n\n\t\t\tconst specifier = `${block.category}/${block.name}`;\n\n\t\t\tconst chain = searchForDep(specifier, block, manifest.categories);\n\n\t\t\tif (chain) {\n\t\t\t\terrors.push(\n\t\t\t\t\t`There is a circular dependency in ${color.bold(specifier)}: ${color.bold(chain.join(' -> '))}`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn errors.length > 0 ? errors : undefined;\n\t\t},\n\t},\n\t'no-unused-block': {\n\t\tdescription: 'Disallow unused blocks. (Not listed and not a dependency of another block)',\n\t\tscope: 'block',\n\t\tcheck: (block, { manifest }) => {\n\t\t\tif (block.list) return;\n\n\t\t\tconst specifier = `${block.category}/${block.name}`;\n\n\t\t\tconst listedBlocks = manifest.categories\n\t\t\t\t.flatMap((cat) => cat.blocks)\n\t\t\t\t.filter((b) => b.list);\n\n\t\t\tfor (const block of listedBlocks) {\n\t\t\t\tconst chain = searchForDep(specifier, block, manifest.categories);\n\n\t\t\t\tif (chain) return;\n\t\t\t}\n\n\t\t\treturn [`${color.bold(specifier)} is unused and will be ${color.bold.red('removed')}`];\n\t\t},\n\t},\n\t'no-framework-dependency': {\n\t\tdescription: 'Disallow frameworks (Svelte, Vue, React) as dependencies.',\n\t\tscope: 'block',\n\t\tcheck: (block) => {\n\t\t\tconst errors: string[] = [];\n\n\t\t\tconst frameworkDeps = [...block.devDependencies, ...block.dependencies]\n\t\t\t\t.map((d) => parsePackageName(d).unwrap().name)\n\t\t\t\t.filter((d) => FRAMEWORKS.has(d));\n\n\t\t\tif (frameworkDeps.length > 0) {\n\t\t\t\tfor (const frameworkDep of frameworkDeps) {\n\t\t\t\t\terrors.push(\n\t\t\t\t\t\t`${color.bold(`${block.category}/${block.name}`)} depends on ${color.bold(frameworkDep)} causing it to be installed when added`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn errors.length > 0 ? errors : undefined;\n\t\t},\n\t},\n\t'require-config-file-exists': {\n\t\tdescription: 'Require all of the paths listed in `configFiles` to exist.',\n\t\tscope: 'global',\n\t\tcheck: ({ manifest, cwd }) => {\n\t\t\tconst errors: string[] = [];\n\n\t\t\tif (manifest.configFiles === undefined) return undefined;\n\n\t\t\tfor (const file of manifest.configFiles) {\n\t\t\t\tif (fs.existsSync(path.join(cwd, file.path))) continue;\n\n\t\t\t\terrors.push(\n\t\t\t\t\t`The ${color.bold(file.name)} config file doesn't exist at ${color.bold(path.join(cwd, file.path))}`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn errors.length > 0 ? errors : undefined;\n\t\t},\n\t},\n\t'no-config-file-framework-dependency': {\n\t\tdescription: 'Disallow frameworks (Svelte, Vue, React) as dependencies of config files.',\n\t\tscope: 'global',\n\t\tcheck: ({ manifest }) => {\n\t\t\tconst errors: string[] = [];\n\n\t\t\tif (manifest.configFiles === undefined) return undefined;\n\n\t\t\tfor (const configFile of manifest.configFiles) {\n\t\t\t\tconst frameworkDeps = [\n\t\t\t\t\t...(configFile.devDependencies ?? []),\n\t\t\t\t\t...(configFile.dependencies ?? []),\n\t\t\t\t]\n\t\t\t\t\t.map((d) => parsePackageName(d).unwrap().name)\n\t\t\t\t\t.filter((d) => FRAMEWORKS.has(d));\n\n\t\t\t\tif (frameworkDeps.length > 0) {\n\t\t\t\t\tfor (const frameworkDep of frameworkDeps) {\n\t\t\t\t\t\terrors.push(\n\t\t\t\t\t\t\t`${color.bold(configFile.name)} depends on ${color.bold(frameworkDep)} causing it to be installed when added`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn errors.length > 0 ? errors : undefined;\n\t\t},\n\t},\n\t'no-config-file-unpinned-dependency': {\n\t\tdescription: 'Require all dependencies of config files to have a pinned version.',\n\t\tscope: 'global',\n\t\tcheck: ({ manifest }) => {\n\t\t\tconst errors: string[] = [];\n\n\t\t\tif (!manifest.configFiles) return undefined;\n\n\t\t\tfor (const configFile of manifest.configFiles) {\n\t\t\t\tfor (const dep of [\n\t\t\t\t\t...(configFile.dependencies ?? []),\n\t\t\t\t\t...(configFile.devDependencies ?? []),\n\t\t\t\t]) {\n\t\t\t\t\tif (!dep.includes('@')) {\n\t\t\t\t\t\terrors.push(`Couldn't find a version to use for ${color.bold(dep)}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn errors.length > 0 ? errors : undefined;\n\t\t},\n\t},\n} as const;\n\nconst ruleConfigSchema = v.record(\n\truleKeySchema,\n\tv.union([\n\t\truleLevelSchema,\n\t\tv.tupleWithRest(\n\t\t\t[ruleLevelSchema, v.union([v.string(), v.number()])],\n\t\t\tv.union([v.string(), v.number()])\n\t\t),\n\t])\n);\n\nexport type RuleConfig = v.InferInput<typeof ruleConfigSchema>;\n\nconst DEFAULT_CONFIG: RuleConfig = {\n\t'no-category-index-file-dependency': 'warn',\n\t'no-unpinned-dependency': 'warn',\n\t'require-local-dependency-exists': 'error',\n\t'max-local-dependencies': ['warn', 10],\n\t'no-circular-dependency': 'error',\n\t'no-unused-block': 'warn',\n\t'no-framework-dependency': 'warn',\n\t'require-config-file-exists': 'error',\n\t'no-config-file-framework-dependency': 'warn',\n\t'no-config-file-unpinned-dependency': 'warn',\n} as const;\n\n/** Runs checks on the manifest file.\n *\n * @param manifest\n * @param config\n * @param ruleConfig\n * @returns\n */\nconst runRules = (\n\tmanifest: Manifest,\n\tconfig: RegistryConfig,\n\tcwd: string,\n\truleConfig: RuleConfig = DEFAULT_CONFIG\n): { warnings: string[]; errors: string[] } => {\n\tconst warnings: string[] = [];\n\tconst errors: string[] = [];\n\n\t// run global rules\n\tfor (const [name, rule] of Object.entries(rules)) {\n\t\tif (rule.scope === 'block') continue;\n\n\t\tconst conf = ruleConfig[name as RuleKey]!;\n\n\t\tlet level: RuleLevel;\n\t\tconst options: (string | number)[] = [];\n\t\tif (Array.isArray(conf)) {\n\t\t\tlevel = conf[0];\n\t\t\toptions.push(...conf.slice(1));\n\t\t} else {\n\t\t\tlevel = conf;\n\t\t}\n\n\t\tif (level === 'off') continue;\n\n\t\tconst ruleErrors = rule.check({ manifest, options, cwd, config });\n\n\t\tif (!ruleErrors) continue;\n\n\t\tif (level === 'error') {\n\t\t\terrors.push(\n\t\t\t\t...ruleErrors.map(\n\t\t\t\t\t(err) =>\n\t\t\t\t\t\t`${ascii.VERTICAL_LINE}  ${ascii.ERROR} ${color.red(err)} ${color.gray(name)}`\n\t\t\t\t)\n\t\t\t);\n\t\t\tcontinue;\n\t\t}\n\n\t\twarnings.push(\n\t\t\t...ruleErrors.map(\n\t\t\t\t(err) => `${ascii.VERTICAL_LINE}  ${ascii.WARN} ${err} ${color.gray(name)}`\n\t\t\t)\n\t\t);\n\t}\n\n\t// run block rules\n\tfor (const category of manifest.categories) {\n\t\tfor (const block of category.blocks) {\n\t\t\tfor (const [name, rule] of Object.entries(rules)) {\n\t\t\t\tif (rule.scope === 'global') continue;\n\n\t\t\t\tconst conf = ruleConfig[name as RuleKey]!;\n\n\t\t\t\tlet level: RuleLevel;\n\t\t\t\tconst options: (string | number)[] = [];\n\t\t\t\tif (Array.isArray(conf)) {\n\t\t\t\t\tlevel = conf[0];\n\t\t\t\t\toptions.push(...conf.slice(1));\n\t\t\t\t} else {\n\t\t\t\t\tlevel = conf;\n\t\t\t\t}\n\n\t\t\t\tif (level === 'off') continue;\n\n\t\t\t\tconst ruleErrors = rule.check(block, { manifest, options, cwd, config });\n\n\t\t\t\tif (!ruleErrors) continue;\n\n\t\t\t\tif (level === 'error') {\n\t\t\t\t\terrors.push(\n\t\t\t\t\t\t...ruleErrors.map(\n\t\t\t\t\t\t\t(err) =>\n\t\t\t\t\t\t\t\t`${ascii.VERTICAL_LINE}  ${ascii.ERROR} ${color.red(err)} ${color.gray(name)}`\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\twarnings.push(\n\t\t\t\t\t...ruleErrors.map(\n\t\t\t\t\t\t(err) => `${ascii.VERTICAL_LINE}  ${ascii.WARN} ${err} ${color.gray(name)}`\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { warnings, errors };\n};\n\n/** Searches for the local dependency tree for the provided specifier returns the path it took to find the dependency */\nconst searchForDep = (\n\tsearch: string,\n\tblock: Block,\n\tcategories: Category[],\n\tchain: string[] = []\n): string[] | undefined => {\n\tconst newChain = [...chain, `${block.category}/${block.name}`];\n\n\tfor (const dep of block.localDependencies) {\n\t\tif (dep === search) return newChain;\n\n\t\t// it will be found in another pass but we don't want to get a stack overflow\n\t\tif (chain.includes(dep)) return undefined;\n\n\t\tconst [categoryName, blockName] = dep.split('/');\n\n\t\tconst depBlock = categories\n\t\t\t.find((cat) => cat.name === categoryName)\n\t\t\t?.blocks.find((b) => b.name === blockName);\n\n\t\tif (!depBlock) continue;\n\n\t\tconst found = searchForDep(search, depBlock, categories, newChain);\n\n\t\tif (found) return [...found, search];\n\t}\n\n\treturn undefined;\n};\n\n/** Checks if the provided block is depended on anywhere */\nconst isDependedOn = (specifier: string, categories: Category[]): boolean => {\n\tfor (const category of categories) {\n\t\tfor (const block of category.blocks) {\n\t\t\tif (!block.list) continue;\n\n\t\t\tconst chain = searchForDep(specifier, block, categories);\n\n\t\t\tif (chain) return true;\n\t\t}\n\t}\n\n\treturn false;\n};\n\nexport {\n\trules,\n\trunRules,\n\tDEFAULT_CONFIG,\n\truleLevelSchema,\n\truleConfigSchema,\n\truleKeySchema,\n\tsearchForDep,\n\tisDependedOn,\n};\n","import fs from 'node:fs';\nimport color from 'chalk';\nimport { createPathsMatcher } from 'get-tsconfig';\nimport path from 'pathe';\nimport * as v from 'valibot';\nimport { type Block, configFileSchema, manifestMeta, peerDependencySchema } from '../types';\nimport { Err, Ok, type Result } from './blocks/ts/result';\nimport { ruleConfigSchema } from './build/check';\nimport { tryGetTsconfig } from './files';\n\nexport const PROJECT_CONFIG_NAME = 'jsrepo.json';\nexport const REGISTRY_CONFIG_NAME = 'jsrepo-build-config.json';\n\nexport const formatterSchema = v.union([v.literal('prettier'), v.literal('biome')]);\n\nexport const pathsSchema = v.objectWithRest(\n\t{\n\t\t'*': v.string(),\n\t},\n\tv.string()\n);\n\nexport type Paths = v.InferInput<typeof pathsSchema>;\n\nexport const projectConfigSchema = v.object({\n\t$schema: v.string(),\n\trepos: v.optional(v.array(v.string()), []),\n\tincludeTests: v.boolean(),\n\tpaths: pathsSchema,\n\tconfigFiles: v.optional(v.record(v.string(), v.string())),\n\twatermark: v.optional(v.boolean(), true),\n\tformatter: v.optional(formatterSchema),\n});\n\nexport const getProjectConfig = (cwd: string): Result<ProjectConfig, string> => {\n\tif (!fs.existsSync(path.join(cwd, PROJECT_CONFIG_NAME))) {\n\t\treturn Err('Could not find your configuration file! Please run `init`.');\n\t}\n\n\tconst config = v.safeParse(\n\t\tprojectConfigSchema,\n\t\tJSON.parse(fs.readFileSync(path.join(cwd, PROJECT_CONFIG_NAME)).toString())\n\t);\n\n\tif (!config.success) {\n\t\treturn Err(`There was an error reading your \\`${PROJECT_CONFIG_NAME}\\` file!`);\n\t}\n\n\treturn Ok(config.output);\n};\n\nexport type ProjectConfig = v.InferOutput<typeof projectConfigSchema>;\n\nexport type Formatter = v.InferOutput<typeof formatterSchema>;\n\nexport const registryConfigSchema = v.object({\n\t$schema: v.string(),\n\tmeta: v.optional(manifestMeta),\n\tpeerDependencies: v.optional(peerDependencySchema),\n\tconfigFiles: v.optional(v.array(configFileSchema)),\n\tdirs: v.array(v.string()),\n\toutputDir: v.optional(v.string()),\n\tincludeBlocks: v.optional(v.array(v.string()), []),\n\tincludeCategories: v.optional(v.array(v.string()), []),\n\texcludeBlocks: v.optional(v.array(v.string()), []),\n\texcludeCategories: v.optional(v.array(v.string()), []),\n\tdoNotListBlocks: v.optional(v.array(v.string()), []),\n\tdoNotListCategories: v.optional(v.array(v.string()), []),\n\tlistBlocks: v.optional(v.array(v.string()), []),\n\tlistCategories: v.optional(v.array(v.string()), []),\n\texcludeDeps: v.optional(v.array(v.string()), []),\n\tallowSubdirectories: v.optional(v.boolean()),\n\tpreview: v.optional(v.boolean()),\n\trules: v.optional(ruleConfigSchema),\n});\n\nexport const getRegistryConfig = (cwd: string): Result<RegistryConfig | null, string> => {\n\tif (!fs.existsSync(path.join(cwd, REGISTRY_CONFIG_NAME))) {\n\t\treturn Ok(null);\n\t}\n\n\tconst config = v.safeParse(\n\t\tregistryConfigSchema,\n\t\tJSON.parse(fs.readFileSync(path.join(cwd, REGISTRY_CONFIG_NAME)).toString())\n\t);\n\n\tif (!config.success) {\n\t\treturn Err(`There was an error reading your \\`${REGISTRY_CONFIG_NAME}\\` file!`);\n\t}\n\n\treturn Ok(config.output);\n};\n\nexport type RegistryConfig = v.InferOutput<typeof registryConfigSchema>;\n\n/** Resolves the paths relative to the cwd */\nexport const resolvePaths = (paths: Paths, cwd: string): Result<Paths, string> => {\n\tconst config = tryGetTsconfig(cwd).unwrapOr(null);\n\n\tconst matcher = config ? createPathsMatcher(config) : null;\n\n\tconst newPaths: Paths = { '*': '' };\n\n\tfor (const [category, p] of Object.entries(paths)) {\n\t\tif (p.startsWith('./')) {\n\t\t\tnewPaths[category] = path.relative(cwd, path.join(path.resolve(cwd), p));\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (matcher === null) {\n\t\t\treturn Err(\n\t\t\t\t`Cannot resolve ${color.bold(`\\`\"${category}\": \"${p}\"\\``)} from paths because we couldn't find a tsconfig! If you intended to use a relative path ensure that your path starts with ${color.bold('`./`')}.`\n\t\t\t);\n\t\t}\n\n\t\tconst resolved = tryResolvePath(p, matcher, cwd);\n\n\t\tif (!resolved) {\n\t\t\treturn Err(\n\t\t\t\t`Cannot resolve ${color.bold(`\\`\"${category}\": \"${p}\"\\``)} from paths because we couldn't find a matching alias in the tsconfig. If you intended to use a relative path ensure that your path starts with ${color.bold('`./`')}.`\n\t\t\t);\n\t\t}\n\n\t\tnewPaths[category] = resolved;\n\t}\n\n\treturn Ok(newPaths);\n};\n\nconst tryResolvePath = (\n\tunresolvedPath: string,\n\tmatcher: (specifier: string) => string[],\n\tcwd: string\n): string | undefined => {\n\tconst paths = matcher(unresolvedPath);\n\n\treturn paths.length > 0 ? path.relative(cwd, paths[0]) : undefined;\n};\n\n/** Gets the path where the block should be installed.\n *\n * @param block\n * @param resolvedPaths\n * @param cwd\n * @returns\n */\nexport const getPathForBlock = (block: Block, resolvedPaths: Paths, cwd: string): string => {\n\tlet directory: string;\n\n\tif (resolvedPaths[block.category] !== undefined) {\n\t\tdirectory = path.join(cwd, resolvedPaths[block.category]);\n\t} else {\n\t\tdirectory = path.join(cwd, resolvedPaths['*'], block.category);\n\t}\n\n\treturn directory;\n};\n","import color from 'chalk';\nimport nodeFetch from 'node-fetch';\nimport {\n\thttp,\n\tazure,\n\tbitbucket,\n\tfetchManifest,\n\tfetchRaw,\n\tgithub,\n\tgitlab,\n\tproviders,\n\tselectProvider,\n} from '.';\nimport type { Block, Manifest } from '../../types';\nimport { Err, Ok, type Result } from '../blocks/ts/result';\nimport * as u from '../blocks/ts/url';\nimport * as persisted from '../persisted';\nimport { TokenManager } from '../token-manager';\nimport type { RegistryProvider, RegistryProviderState } from './types';\n\nexport type RemoteBlock = Block & { sourceRepo: RegistryProviderState };\n\n/** Wraps the basic implementation to inject `node-fetch` and the correct token. */\nexport const internalFetchRaw = async (\n\tstate: RegistryProviderState,\n\tresourcePath: string,\n\t{ verbose }: { verbose?: (msg: string) => void } = {}\n) => {\n\treturn await fetchRaw(state, resourcePath, {\n\t\tverbose,\n\t\t// @ts-expect-error but it does work\n\t\tfetch: nodeFetch,\n\t\ttoken: getProviderToken(state.provider, state.url),\n\t});\n};\n\n/** Wraps the basic implementation to inject `node-fetch` and the correct token. */\nexport const internalFetchManifest = async (\n\tstate: RegistryProviderState,\n\t{ verbose }: { verbose?: (msg: string) => void } = {}\n) => {\n\treturn await fetchManifest(state, {\n\t\tverbose,\n\t\t// @ts-expect-error but it does work\n\t\tfetch: nodeFetch,\n\t\ttoken: getProviderToken(state.provider, state.url),\n\t});\n};\n\n/** Gets the locally stored token for the given provider */\nexport const getProviderToken = (provider: RegistryProvider, url: string): string | undefined => {\n\tconst storage = new TokenManager();\n\n\t// there isn't an auth implementation for http\n\tif (provider.name === 'http') {\n\t\treturn storage.get(`http-${new URL(url).origin}`);\n\t}\n\n\treturn storage.get(provider.name);\n};\n\n/** Parses the provided url and returns the state.\n *\n * @param repo\n * @returns\n */\nexport const getProviderState = async (\n\trepo: string,\n\t{ noCache = false }: { noCache?: boolean } = {}\n): Promise<Result<RegistryProviderState, string>> => {\n\tconst provider = selectProvider(repo);\n\n\tif (provider) {\n\t\tconst storage = persisted.get();\n\n\t\t// only git providers are cached\n\t\tif (provider.name !== http.name && !noCache) {\n\t\t\tconst cached = storage.get(`${repo}-state`);\n\n\t\t\tif (cached) return Ok({ ...(cached as RegistryProviderState), provider });\n\t\t}\n\n\t\tconst parsed = provider.parse(repo, { fullyQualified: false });\n\n\t\tconst state = await provider.state(repo, {\n\t\t\ttoken: getProviderToken(provider, parsed.url),\n\t\t\t// @ts-expect-error but it does work\n\t\t\tfetch: nodeFetch,\n\t\t});\n\n\t\t// only cache git providers\n\t\tif (provider.name !== http.name && !noCache) {\n\t\t\tstorage.set(`${repo}-state`, state);\n\t\t}\n\n\t\treturn Ok(state);\n\t}\n\n\treturn Err(\n\t\t`Only ${providers.map((p, i) => `${i === providers.length - 1 ? 'and ' : ''}${color.bold(p.name)}`).join(', ')} registries are supported at this time!`\n\t);\n};\n\n/** Gets the provider state for each provided repo url\n *\n * @param repos\n * @returns\n */\nexport const forEachPathGetProviderState = async (\n\trepos: string[],\n\t{ noCache = false }: { noCache?: boolean } = {}\n): Promise<Result<RegistryProviderState[], { message: string; repo: string }>> => {\n\tconst resolvedPaths: RegistryProviderState[] = [];\n\n\tconst errors = await Promise.all(\n\t\trepos.map(async (repo) => {\n\t\t\tconst getProviderResult = await getProviderState(repo, { noCache });\n\n\t\t\tif (getProviderResult.isErr())\n\t\t\t\treturn Err({ message: getProviderResult.unwrapErr(), repo });\n\n\t\t\tconst providerState = getProviderResult.unwrap();\n\n\t\t\tresolvedPaths.push(providerState);\n\t\t})\n\t);\n\n\tconst err = errors.find((err) => err !== undefined);\n\n\tif (err) return err;\n\n\treturn Ok(resolvedPaths);\n};\n\n/** Fetches blocks for each registry and stores them in a map by their repo as well as category and block name.\n *\n * Example Key:\n * `github/ieedan/std/utils/math`\n *\n * @param repos\n * @returns\n */\nexport const fetchBlocks = async (\n\t...repos: RegistryProviderState[]\n): Promise<Result<Map<string, RemoteBlock>, { message: string; repo: string }>> => {\n\tconst blocksMap = new Map<string, RemoteBlock>();\n\n\tconst errors = await Promise.all(\n\t\trepos.map(async (state) => {\n\t\t\tconst getManifestResult = await internalFetchManifest(state);\n\n\t\t\tif (getManifestResult.isErr()) {\n\t\t\t\treturn Err({ message: getManifestResult.unwrapErr(), repo: state.url });\n\t\t\t}\n\n\t\t\tconst manifest = getManifestResult.unwrap();\n\n\t\t\tfor (const category of manifest.categories) {\n\t\t\t\tfor (const block of category.blocks) {\n\t\t\t\t\tblocksMap.set(u.join(state.url, `${block.category}/${block.name}`), {\n\t\t\t\t\t\t...block,\n\t\t\t\t\t\tsourceRepo: state,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t);\n\n\tconst err = errors.find((err) => err !== undefined);\n\n\tif (err) return err;\n\n\treturn Ok(blocksMap);\n};\n\n/** Maps the result of fetchManifests into a map of remote blocks\n *\n * @param manifests\n */\nexport const getRemoteBlocks = (manifests: FetchManifestResult[]) => {\n\tconst blocksMap = new Map<string, RemoteBlock>();\n\n\tfor (const manifest of manifests) {\n\t\tfor (const category of manifest.manifest.categories) {\n\t\t\tfor (const block of category.blocks) {\n\t\t\t\tblocksMap.set(u.join(manifest.state.url, `${block.category}/${block.name}`), {\n\t\t\t\t\t...block,\n\t\t\t\t\tsourceRepo: manifest.state,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\treturn blocksMap;\n};\n\nexport type FetchManifestResult = {\n\tstate: RegistryProviderState;\n\tmanifest: Manifest;\n};\n\n/** Fetches the manifests for each provider\n *\n * @param repos\n * @returns\n */\nexport const fetchManifests = async (\n\t...repos: RegistryProviderState[]\n): Promise<Result<FetchManifestResult[], { message: string; repo: string }>> => {\n\tconst manifests: FetchManifestResult[] = [];\n\n\tconst errors = await Promise.all(\n\t\trepos.map(async (state) => {\n\t\t\tconst getManifestResult = await internalFetchManifest(state);\n\n\t\t\tif (getManifestResult.isErr()) {\n\t\t\t\treturn Err({ message: getManifestResult.unwrapErr(), repo: state.url });\n\t\t\t}\n\n\t\t\tconst manifest = getManifestResult.unwrap();\n\n\t\t\tmanifests.push({ state, manifest });\n\t\t})\n\t);\n\n\tconst err = errors.find((err) => err !== undefined);\n\n\tif (err) return err;\n\n\treturn Ok(manifests);\n};\n\nexport * from './types';\n\nexport {\n\tazure,\n\tbitbucket,\n\tgithub,\n\tgitlab,\n\thttp,\n\tproviders,\n\tinternalFetchManifest as fetchManifest,\n\tinternalFetchRaw as fetchRaw,\n\tselectProvider,\n};\n","import fs from 'node:fs';\nimport color from 'chalk';\nimport { program } from 'commander';\nimport path from 'pathe';\nimport type { Block } from '../types';\nimport * as array from './blocks/ts/array';\nimport { Err, Ok, type Result } from './blocks/ts/result';\nimport * as url from './blocks/ts/url';\nimport { isTestFile } from './build';\nimport { type Paths, type ProjectConfig, getPathForBlock, resolvePaths } from './config';\nimport * as registry from './registry-providers/internal';\n\nexport const resolveTree = async (\n\tblockSpecifiers: string[],\n\tblocksMap: Map<string, registry.RemoteBlock>,\n\trepoPaths: registry.RegistryProviderState[],\n\tinstalled: Map<string, registry.RemoteBlock> = new Map()\n): Promise<Result<registry.RemoteBlock[], string>> => {\n\tconst blocks = new Map<string, registry.RemoteBlock>();\n\n\tfor (const blockSpecifier of blockSpecifiers) {\n\t\tlet block: registry.RemoteBlock | undefined = undefined;\n\n\t\tconst provider = registry.selectProvider(blockSpecifier);\n\n\t\t// if the block starts with github (or another provider) we know it has been resolved\n\t\tif (!provider) {\n\t\t\tif (repoPaths.length === 0) {\n\t\t\t\treturn Err(\n\t\t\t\t\tcolor.red(\n\t\t\t\t\t\t`If your config doesn't contain repos then you must provide the repo in the block specifier ex: \\`${color.bold(\n\t\t\t\t\t\t\t`github/ieedan/std/${blockSpecifier}`\n\t\t\t\t\t\t)}\\`!`\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// check every repo for the block and return the first block found\n\t\t\tfor (const providerState of repoPaths) {\n\t\t\t\tconst { url: repoIdent, specifier } = providerState.provider.parse(\n\t\t\t\t\turl.join(providerState.url, blockSpecifier),\n\t\t\t\t\t{ fullyQualified: true }\n\t\t\t\t);\n\n\t\t\t\tconst tempBlock = blocksMap.get(url.join(repoIdent, specifier!));\n\n\t\t\t\tif (tempBlock === undefined) continue;\n\n\t\t\t\tblock = tempBlock;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\t// get shortened name\n\t\t\tconst { url: repoIdent, specifier } = provider.parse(blockSpecifier, {\n\t\t\t\tfullyQualified: true,\n\t\t\t});\n\n\t\t\t// just beautifies name a bit\n\t\t\tblock = blocksMap.get(url.join(repoIdent, specifier!));\n\t\t}\n\n\t\tif (!block) {\n\t\t\treturn Err(`Invalid block! ${color.bold(blockSpecifier)} does not exist!`);\n\t\t}\n\n\t\tconst specifier = `${block.category}/${block.name}`;\n\n\t\tblocks.set(specifier, block);\n\n\t\tif (block.localDependencies && block.localDependencies.length > 0) {\n\t\t\tconst subDeps = await resolveTree(\n\t\t\t\tblock.localDependencies.filter((dep) => !blocks.has(dep) && !installed.has(dep)),\n\t\t\t\tblocksMap,\n\t\t\t\trepoPaths,\n\t\t\t\tblocks\n\t\t\t);\n\n\t\t\tif (subDeps.isErr()) return Err(subDeps.unwrapErr());\n\n\t\t\tfor (const dep of subDeps.unwrap()) {\n\t\t\t\tblocks.set(`${dep.category}/${dep.name}`, dep);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn Ok(array.fromMap(blocks, (_, val) => val));\n};\n\ntype InstalledBlock = {\n\tspecifier: `${string}/${string}`;\n\tpath: string;\n\tblock: Block;\n};\n\n/** Finds installed blocks and returns them as `<category>/<name>`\n *\n * @param blocks\n * @param config\n * @returns\n */\nexport const getInstalled = (\n\tblocks: Map<string, Block>,\n\tconfig: ProjectConfig,\n\tcwd: string\n): InstalledBlock[] => {\n\tconst installedBlocks: InstalledBlock[] = [];\n\n\tconst resolvedPaths = resolvePaths(config.paths, cwd).match(\n\t\t(v) => v,\n\t\t(err) => program.error(color.red(err))\n\t);\n\n\tfor (const [_, block] of blocks) {\n\t\tconst baseDir = getPathForBlock(block, resolvedPaths, cwd);\n\n\t\tlet blockPath = path.join(baseDir, block.files[0]);\n\t\tif (block.subdirectory) {\n\t\t\tblockPath = path.join(baseDir, block.name);\n\t\t}\n\n\t\tif (fs.existsSync(blockPath))\n\t\t\tinstalledBlocks.push({\n\t\t\t\tspecifier: `${block.category}/${block.name}`,\n\t\t\t\tpath: blockPath,\n\t\t\t\tblock,\n\t\t\t});\n\t}\n\n\treturn installedBlocks;\n};\n\nexport type RegistryFile = {\n\tname: string;\n\tcontent: Result<string, string>;\n};\n\ntype PreloadedBlock = {\n\tblock: registry.RemoteBlock;\n\tfiles: Promise<RegistryFile[]>;\n};\n\n/** Starts loading the content of the files for each block and\n * returns the blocks mapped to a promise that contains their files and their contents.\n *\n * @param blocks\n * @returns\n */\nexport const preloadBlocks = (\n\tblocks: registry.RemoteBlock[],\n\tconfig: ProjectConfig\n): PreloadedBlock[] => {\n\tconst preloaded: PreloadedBlock[] = [];\n\n\tfor (const block of blocks) {\n\t\t// filters out test files if they are not supposed to be included\n\t\tconst includedFiles = block.files.filter((file) =>\n\t\t\tisTestFile(file) ? config.includeTests : true\n\t\t);\n\n\t\tconst files = Promise.all(\n\t\t\tincludedFiles.map(async (file) => {\n\t\t\t\tconst content = await registry.fetchRaw(\n\t\t\t\t\tblock.sourceRepo,\n\t\t\t\t\tpath.join(block.directory, file)\n\t\t\t\t);\n\n\t\t\t\treturn { name: file, content };\n\t\t\t})\n\t\t);\n\n\t\tpreloaded.push({\n\t\t\tblock,\n\t\t\tfiles,\n\t\t});\n\t}\n\n\treturn preloaded;\n};\n\n/** Gets the path for the file belonging to the provided block\n *\n * @param fileName\n * @param block\n * @param resolvedPaths\n * @param cwd\n * @returns\n */\nexport const getBlockFilePath = (\n\tfileName: string,\n\tblock: registry.RemoteBlock,\n\tresolvedPaths: Paths,\n\tcwd: string\n) => {\n\tconst directory = getPathForBlock(block, resolvedPaths, cwd);\n\n\tif (block.subdirectory) {\n\t\treturn path.join(directory, block.name, fileName);\n\t}\n\n\treturn path.join(directory, fileName);\n};\n","/*\n\tInstalled from github/ieedan/std\n*/\n\n/** Returns a promise that immediately resolves to `T`, useful when you need to mix sync and async code.\n *\n * ### Usage\n * ```ts\n * const promises: Promise<number>[] = [];\n *\n * promises.push(noopPromise(10));\n * ```\n *\n * @param val\n */\nexport const noopPromise = <T>(val: T) => new Promise<T>((res) => res(val));\n","import fs from 'node:fs';\nimport type { PartialConfiguration } from '@biomejs/wasm-nodejs';\nimport path from 'pathe';\nimport * as prettier from 'prettier';\nimport type { Formatter } from './config';\n\nexport type FormatterConfig = {\n\tprettierOptions: prettier.Options | null;\n\tbiomeOptions: PartialConfiguration | null;\n};\n\nexport const loadFormatterConfig = async ({\n\tformatter,\n\tcwd,\n}: { formatter?: Formatter; cwd: string }): Promise<FormatterConfig> => {\n\tlet prettierOptions: prettier.Options | null = null;\n\tif (formatter === 'prettier') {\n\t\tprettierOptions = await prettier.resolveConfig(path.join(cwd, '.prettierrc'));\n\t}\n\n\tlet biomeOptions: PartialConfiguration | null = null;\n\tif (formatter === 'biome') {\n\t\tconst configPath = path.join(cwd, 'biome.json');\n\t\tif (fs.existsSync(configPath)) {\n\t\t\tbiomeOptions = JSON.parse(fs.readFileSync(configPath).toString());\n\t\t}\n\t}\n\n\treturn {\n\t\tbiomeOptions,\n\t\tprettierOptions,\n\t};\n};\n","export const getWatermark = (repoUrl: string): string => {\n\treturn `Installed from ${repoUrl}`;\n};\n","import color from 'chalk';\nimport { program } from 'commander';\nimport path from 'pathe';\nimport semver from 'semver';\nimport type { Manifest } from '../types';\nimport * as ASCII from './ascii';\nimport { cleanVersion, getPackage } from './package';\nimport type { RegistryProviderState } from './registry-providers';\n\n/** Checks if there are any reasons that the CLI should not proceed and logs warnings or stops execution accordingly.\n *\n * @param providerState\n * @param manifest\n * @returns\n */\nexport const checkPreconditions = (\n\tproviderState: RegistryProviderState,\n\tmanifest: Manifest,\n\tcwd: string\n) => {\n\tif (!manifest.peerDependencies) return;\n\n\tconst pkg = getPackage(path.join(cwd, 'package.json')).match(\n\t\t(v) => v,\n\t\t(err) => {\n\t\t\tif (err.endsWith(\"doesn't exist\")) {\n\t\t\t\tprogram.error(\n\t\t\t\t\t`Couldn't find your ${color.bold('package.json')}. Please create one.`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tprogram.error(color.red(err));\n\t\t}\n\t);\n\n\tconst dependencies = { ...pkg.dependencies, ...pkg.devDependencies };\n\n\tconst incompatible: {\n\t\tname: string;\n\t\tversion: string;\n\t\texists: boolean;\n\t\texpected: string;\n\t\tmessage?: string;\n\t}[] = [];\n\n\tfor (const [name, options] of Object.entries(manifest.peerDependencies)) {\n\t\tlet expected: string;\n\t\tlet message: string | undefined = undefined;\n\n\t\tif (typeof options === 'string') {\n\t\t\texpected = options;\n\t\t} else {\n\t\t\texpected = options.version;\n\t\t\tmessage = options.message;\n\t\t}\n\n\t\tconst version = dependencies[name];\n\n\t\tif (!version) {\n\t\t\tincompatible.push({\n\t\t\t\tname,\n\t\t\t\texpected,\n\t\t\t\tmessage,\n\t\t\t\tversion,\n\t\t\t\texists: false,\n\t\t\t});\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!semver.satisfies(cleanVersion(version), expected)) {\n\t\t\tincompatible.push({\n\t\t\t\tname,\n\t\t\t\texpected,\n\t\t\t\tmessage,\n\t\t\t\tversion,\n\t\t\t\texists: true,\n\t\t\t});\n\t\t}\n\t}\n\n\tif (incompatible.length > 0) {\n\t\tprocess.stdout.write(\n\t\t\t`${ASCII.VERTICAL_LINE}\\n${color.yellow('▲')} ${ASCII.JUNCTION_TOP} Issues with ${color.bold(providerState.url)} peer dependencies\\n`\n\t\t);\n\t\tconst msgs = incompatible\n\t\t\t.map((dep, i) => {\n\t\t\t\tconst last = incompatible.length - 1 === i;\n\n\t\t\t\tlet message: string;\n\n\t\t\t\tif (dep.exists) {\n\t\t\t\t\tmessage = `${color.yellowBright('x unmet peer')} need ${color.bold(`${dep.name}@`)}${color.greenBright.bold(dep.expected)} >> found ${color.yellowBright.bold(dep.version)}`;\n\t\t\t\t} else {\n\t\t\t\t\tmessage = `${color.red('x missing peer')} need ${color.bold(`${dep.name}@`)}${color.greenBright.bold(dep.expected)}`;\n\t\t\t\t}\n\n\t\t\t\tconst versionMessage = `${ASCII.VERTICAL_LINE} ${last ? ASCII.BOTTOM_LEFT_CORNER : ASCII.JUNCTION_RIGHT}${ASCII.HORIZONTAL_LINE} ${message}`;\n\n\t\t\t\tif (!dep.message) {\n\t\t\t\t\treturn versionMessage;\n\t\t\t\t}\n\n\t\t\t\treturn `${versionMessage}\\n${ASCII.VERTICAL_LINE} ${!last ? ASCII.VERTICAL_LINE : ''}  ${color.gray(dep.message)}`;\n\t\t\t})\n\t\t\t.join('\\n');\n\n\t\tprocess.stdout.write(`${msgs}\\n`);\n\t}\n};\n","import { cancel, confirm, isCancel, log, outro, password, select, text } from '@clack/prompts';\nimport color from 'chalk';\nimport { Argument, Command } from 'commander';\nimport * as v from 'valibot';\nimport { getProjectConfig } from '../utils/config';\nimport { intro } from '../utils/prompts';\nimport { http } from '../utils/registry-providers';\nimport { TokenManager } from '../utils/token-manager';\n\nconst schema = v.object({\n\ttoken: v.optional(v.string()),\n\tlogout: v.boolean(),\n\tcwd: v.string(),\n});\n\ntype Options = v.InferInput<typeof schema>;\n\nconst services = ['Anthropic', 'Azure', 'BitBucket', 'GitHub', 'GitLab', 'OpenAI', 'http'].sort();\n\nexport const auth = new Command('auth')\n\t.description('Provide a token for access to private repositories.')\n\t.addArgument(\n\t\tnew Argument('service', 'The service you want to authenticate to.')\n\t\t\t.choices(services.map((s) => s.toLowerCase()))\n\t\t\t.argOptional()\n\t)\n\t.option('--logout', 'Execute the logout flow.', false)\n\t.option('--token <token>', 'The token to use for authenticating to this service.')\n\t.option('--cwd <path>', 'The current working directory.', process.cwd())\n\t.action(async (service, opts) => {\n\t\tconst options = v.parse(schema, opts);\n\n\t\tawait intro();\n\n\t\tawait _auth(service, options);\n\n\t\toutro(color.green('All done!'));\n\t});\n\nconst _auth = async (service: string | undefined, options: Options) => {\n\tconst configuredRegistries: string[] = getProjectConfig(options.cwd).match(\n\t\t(v) => v.repos.filter(http.matches),\n\t\t() => []\n\t);\n\n\tlet selectedService = services.find((s) => s.toLowerCase() === service?.toLowerCase());\n\n\tconst storage = new TokenManager();\n\n\t// logout flow\n\tif (options.logout) {\n\t\tif (selectedService !== undefined) {\n\t\t\tif (selectedService === 'http') {\n\t\t\t\tawait promptHttpLogout(storage);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstorage.delete(selectedService);\n\t\t\tlog.success(`Logged out of ${selectedService}.`);\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const serviceName of services) {\n\t\t\tif (serviceName === 'http') {\n\t\t\t\tawait promptHttpLogout(storage);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (storage.get(serviceName) === undefined) {\n\t\t\t\tlog.step(color.gray(`Already logged out of ${color.bold(serviceName)}.`));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst response = await confirm({\n\t\t\t\tmessage: `Logout of ${color.bold(serviceName)}?`,\n\t\t\t\tinitialValue: true,\n\t\t\t});\n\n\t\t\tif (isCancel(response)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tif (!response) continue;\n\n\t\t\tstorage.delete(serviceName);\n\t\t}\n\n\t\treturn;\n\t}\n\n\t// login flow\n\tif (selectedService === undefined) {\n\t\tconst response = await select({\n\t\t\tmessage: 'Which service do you want to authenticate to?',\n\t\t\toptions: services.map((serviceName) => ({\n\t\t\t\tlabel: serviceName,\n\t\t\t\tvalue: serviceName,\n\t\t\t})),\n\t\t\tinitialValue: services[0],\n\t\t});\n\n\t\tif (isCancel(response)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tselectedService = response;\n\n\t\tif (selectedService === 'http') {\n\t\t\tlet selectedRegistry = 'Other';\n\n\t\t\tif (configuredRegistries.length > 0) {\n\t\t\t\tconfiguredRegistries.push('Other');\n\n\t\t\t\tconst response = await select({\n\t\t\t\t\tmessage: 'Which registry do you want to authenticate to?',\n\t\t\t\t\toptions: configuredRegistries.map((serviceName) => ({\n\t\t\t\t\t\tlabel: serviceName,\n\t\t\t\t\t\tvalue: serviceName,\n\t\t\t\t\t})),\n\t\t\t\t\tinitialValue: services[0],\n\t\t\t\t});\n\n\t\t\t\tif (isCancel(response)) {\n\t\t\t\t\tcancel('Canceled!');\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t}\n\n\t\t\t\tselectedRegistry = new URL(response).origin;\n\t\t\t}\n\n\t\t\t// prompt for registry\n\t\t\tif (selectedRegistry === 'Other') {\n\t\t\t\tconst response = await text({\n\t\t\t\t\tmessage: 'Please enter the registry url you want to authenticate to:',\n\t\t\t\t\tplaceholder: 'https://example.com',\n\t\t\t\t\tvalidate(value) {\n\t\t\t\t\t\tif (value.trim() === '') return 'Please provide a value';\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// try to parse the url\n\t\t\t\t\t\t\tnew URL(value);\n\t\t\t\t\t\t} catch {\n\t\t\t\t\t\t\t// if parsing fails return the error\n\t\t\t\t\t\t\treturn 'Please provide a valid url';\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tif (isCancel(response)) {\n\t\t\t\t\tcancel('Canceled!');\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t}\n\n\t\t\t\tselectedRegistry = new URL(response).origin;\n\t\t\t}\n\n\t\t\tselectedService = `http-${selectedRegistry}`;\n\t\t}\n\t}\n\n\tlet serviceName = selectedService;\n\n\tif (serviceName.startsWith('http')) {\n\t\tserviceName = serviceName.slice(5);\n\t}\n\n\tif (options.token === undefined) {\n\t\tconst response = await password({\n\t\t\tmessage: `Paste your token for ${color.bold(serviceName)}:`,\n\t\t\tvalidate(value) {\n\t\t\t\tif (value.trim() === '') return 'Please provide a value';\n\t\t\t},\n\t\t});\n\n\t\tif (isCancel(response) || !response) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\toptions.token = response;\n\t}\n\n\tstorage.set(selectedService, options.token);\n\n\tlog.success(`Logged into ${color.bold(serviceName)}.`);\n};\n\nconst promptHttpLogout = async (storage: TokenManager) => {\n\t// list all providers for logout\n\tconst registries = storage.getHttpRegistriesWithTokens();\n\n\tif (registries.length === 0) {\n\t\tlog.step(color.gray(`Already logged out of ${color.bold('http')}.`));\n\t}\n\n\tfor (const registry of registries) {\n\t\tlet registryUrl: URL;\n\n\t\ttry {\n\t\t\tregistryUrl = new URL(registry);\n\t\t} catch {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst response = await confirm({\n\t\t\tmessage: `Logout of ${color.bold(registryUrl.origin)}?`,\n\t\t\tinitialValue: true,\n\t\t});\n\n\t\tif (isCancel(response)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tif (!response) continue;\n\n\t\tstorage.delete(`http-${registryUrl.origin}`);\n\t}\n};\n","import fs from 'node:fs';\nimport { log, outro } from '@clack/prompts';\nimport color from 'chalk';\nimport { Command, program } from 'commander';\nimport ignore from 'ignore';\nimport path from 'pathe';\nimport * as v from 'valibot';\nimport { MANIFEST_FILE } from '../constants';\nimport type { Category, Manifest } from '../types';\nimport * as ascii from '../utils/ascii';\nimport { buildBlocksDirectory, buildConfigFiles, pruneUnused } from '../utils/build';\nimport { DEFAULT_CONFIG, runRules } from '../utils/build/check';\nimport { type RegistryConfig, getRegistryConfig } from '../utils/config';\nimport { parseManifest } from '../utils/manifest';\nimport { intro, spinner } from '../utils/prompts';\n\n// sensible defaults for ignored directories\nconst IGNORED_DIRS = ['.git', 'node_modules'] as const;\n\nconst schema = v.object({\n\tdirs: v.optional(v.array(v.string())),\n\toutputDir: v.optional(v.string()),\n\tincludeBlocks: v.optional(v.array(v.string())),\n\tincludeCategories: v.optional(v.array(v.string())),\n\texcludeBlocks: v.optional(v.array(v.string())),\n\texcludeCategories: v.optional(v.array(v.string())),\n\texcludeDeps: v.optional(v.array(v.string())),\n\tlistBlocks: v.optional(v.array(v.string())),\n\tlistCategories: v.optional(v.array(v.string())),\n\tdoNotListBlocks: v.optional(v.array(v.string())),\n\tdoNotListCategories: v.optional(v.array(v.string())),\n\tallowSubdirectories: v.optional(v.boolean()),\n\tpreview: v.optional(v.boolean()),\n\toutput: v.boolean(),\n\tverbose: v.boolean(),\n\tcwd: v.string(),\n});\n\ntype Options = v.InferInput<typeof schema>;\n\nconst build = new Command('build')\n\t.description(`Builds the provided --dirs in the project root into a \\`${MANIFEST_FILE}\\` file.`)\n\t.option('--dirs [dirs...]', 'The directories containing the blocks.')\n\t.option(\n\t\t'--output-dir <dir>',\n\t\t'The directory to output the registry to. (Copies jsrepo-manifest.json + all required files)'\n\t)\n\t.option('--include-blocks [blockNames...]', 'Include only the blocks with these names.')\n\t.option(\n\t\t'--include-categories [categoryNames...]',\n\t\t'Include only the categories with these names.'\n\t)\n\t.option('--exclude-blocks [blockNames...]', 'Do not include the blocks with these names.')\n\t.option(\n\t\t'--exclude-categories [categoryNames...]',\n\t\t'Do not include the categories with these names.'\n\t)\n\t.option('--list-blocks [blockNames...]', 'List only the blocks with these names.')\n\t.option('--list-categories [categoryNames...]', 'List only the categories with these names.')\n\t.option('--do-not-list-blocks [blockNames...]', 'Do not list the blocks with these names.')\n\t.option(\n\t\t'--do-not-list-categories [categoryNames...]',\n\t\t'Do not list the categories with these names.'\n\t)\n\t.option('--exclude-deps [deps...]', 'Dependencies that should not be added.')\n\t.option('--allow-subdirectories', 'Allow subdirectories to be built.')\n\t.option('--preview', 'Display a preview of the blocks list.')\n\t.option('--no-output', `Do not output a \\`${MANIFEST_FILE}\\` file.`)\n\t.option('--verbose', 'Include debug logs.', false)\n\t.option('--cwd <path>', 'The current working directory.', process.cwd())\n\t.action(async (opts) => {\n\t\tconst options = v.parse(schema, opts);\n\n\t\tawait intro();\n\n\t\tawait _build(options);\n\n\t\toutro(color.green('All done!'));\n\t});\n\nconst _build = async (options: Options) => {\n\tconst verbose = (msg: string) => {\n\t\tif (options.verbose) {\n\t\t\tconsole.info(`${ascii.INFO} ${msg}`);\n\t\t}\n\t};\n\n\tconst loading = spinner({ verbose: options.verbose ? verbose : undefined });\n\n\tconst categories: Category[] = [];\n\n\tconst config: RegistryConfig = getRegistryConfig(options.cwd).match(\n\t\t(val) => {\n\t\t\tif (val === null) {\n\t\t\t\treturn {\n\t\t\t\t\t$schema: '',\n\t\t\t\t\tdirs: options.dirs ?? [],\n\t\t\t\t\toutputDir: options.outputDir,\n\t\t\t\t\tdoNotListBlocks: options.doNotListBlocks ?? [],\n\t\t\t\t\tdoNotListCategories: options.doNotListCategories ?? [],\n\t\t\t\t\tlistBlocks: options.listBlocks ?? [],\n\t\t\t\t\tlistCategories: options.listCategories ?? [],\n\t\t\t\t\texcludeDeps: options.excludeDeps ?? [],\n\t\t\t\t\tincludeBlocks: options.includeBlocks ?? [],\n\t\t\t\t\tincludeCategories: options.includeCategories ?? [],\n\t\t\t\t\texcludeBlocks: options.excludeBlocks ?? [],\n\t\t\t\t\texcludeCategories: options.excludeCategories ?? [],\n\t\t\t\t\tallowSubdirectories: options.allowSubdirectories,\n\t\t\t\t\tpreview: options.preview,\n\t\t\t\t} satisfies RegistryConfig;\n\t\t\t}\n\n\t\t\tconst mergedVal = val;\n\n\t\t\t// overwrites config with flag values\n\n\t\t\tif (options.dirs) mergedVal.dirs = options.dirs;\n\t\t\tif (options.outputDir) mergedVal.outputDir = options.outputDir;\n\t\t\tif (options.doNotListBlocks) mergedVal.doNotListBlocks = options.doNotListBlocks;\n\t\t\tif (options.doNotListCategories)\n\t\t\t\tmergedVal.doNotListCategories = options.doNotListCategories;\n\t\t\tif (options.listBlocks) mergedVal.listBlocks = options.listBlocks;\n\t\t\tif (options.listCategories) mergedVal.listCategories = options.listCategories;\n\t\t\tif (options.includeBlocks) mergedVal.includeBlocks = options.includeBlocks;\n\t\t\tif (options.includeCategories) mergedVal.includeCategories = options.includeCategories;\n\t\t\tif (options.excludeBlocks) mergedVal.excludeBlocks = options.excludeBlocks;\n\t\t\tif (options.excludeCategories) mergedVal.excludeCategories = options.excludeCategories;\n\t\t\tif (options.excludeDeps) mergedVal.excludeDeps = options.excludeDeps;\n\t\t\tif (options.allowSubdirectories !== undefined)\n\t\t\t\tmergedVal.allowSubdirectories = options.allowSubdirectories;\n\t\t\tif (options.preview !== undefined) mergedVal.preview = options.preview;\n\n\t\t\tmergedVal.rules = { ...DEFAULT_CONFIG, ...mergedVal.rules };\n\n\t\t\treturn mergedVal;\n\t\t},\n\t\t(err) => program.error(color.red(err))\n\t);\n\n\tlet outDir: string;\n\n\tif (config.outputDir) {\n\t\toutDir = path.join(options.cwd, config.outputDir);\n\t} else {\n\t\toutDir = options.cwd;\n\t}\n\n\tconst manifestOut = path.join(outDir, MANIFEST_FILE);\n\n\tif (options.output && fs.existsSync(manifestOut)) {\n\t\t// we need to remove all previously copied directories\n\t\tif (config.outputDir) {\n\t\t\t// read old manifest to determine where the unwanted files are\n\t\t\t// we can't just rm -rf because other static files could be hosted out of the same directory\n\t\t\tconst oldManifest = parseManifest(fs.readFileSync(manifestOut).toString());\n\n\t\t\tif (oldManifest.isOk()) {\n\t\t\t\t// first just remove all the files\n\t\t\t\tfor (const category of oldManifest.unwrap().categories) {\n\t\t\t\t\tfor (const block of category.blocks) {\n\t\t\t\t\t\tconst newDirPath = path.join(outDir, block.directory);\n\n\t\t\t\t\t\tif (fs.existsSync(newDirPath)) {\n\t\t\t\t\t\t\tfs.rmSync(newDirPath, { recursive: true });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfs.rmSync(manifestOut);\n\t}\n\n\tconst ig = ignore();\n\n\ttry {\n\t\tconst ignoreFile = fs.readFileSync(path.join(options.cwd, '.gitignore')).toString();\n\n\t\tig.add(ignoreFile);\n\t} catch {\n\t\t// just continue on\n\t}\n\n\tig.add(IGNORED_DIRS);\n\n\tfor (const dir of config.dirs) {\n\t\tconst dirPath = path.join(options.cwd, dir);\n\n\t\tloading.start(`Building ${color.cyan(dirPath)}`);\n\n\t\tconst builtCategories = buildBlocksDirectory(dirPath, {\n\t\t\tcwd: options.cwd,\n\t\t\tignore: ig,\n\t\t\tconfig,\n\t\t});\n\n\t\tfor (const category of builtCategories) {\n\t\t\tif (categories.find((cat) => cat.name === category.name) !== undefined) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`${ascii.VERTICAL_LINE}  ${ascii.WARN} Skipped adding \\`${color.cyan(`${dir}/${category.name}`)}\\` because a category with the same name already exists!`\n\t\t\t\t);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcategories.push(category);\n\t\t}\n\n\t\tloading.stop(`Built ${color.cyan(dirPath)}`);\n\t}\n\n\tconst configFiles = buildConfigFiles(config, { cwd: options.cwd });\n\n\tconst manifest = createManifest(categories, configFiles, config);\n\n\tloading.start('Checking manifest');\n\n\tconst { warnings, errors } = runRules(manifest, config, options.cwd, config.rules);\n\n\tloading.stop('Completed checking manifest.');\n\n\t// add gap for errors\n\tif (warnings.length > 0 || errors.length > 0) {\n\t\tconsole.log(ascii.VERTICAL_LINE);\n\t}\n\n\tfor (const warning of warnings) {\n\t\tconsole.log(warning);\n\t}\n\n\tif (errors.length > 0) {\n\t\tfor (const error of errors) {\n\t\t\tconsole.log(error);\n\t\t}\n\n\t\tprogram.error(\n\t\t\tcolor.red(\n\t\t\t\t`Completed checking manifest with ${color.bold(`${errors.length} error(s)`)} and ${color.bold(`${warnings.length} warning(s)`)}`\n\t\t\t)\n\t\t);\n\t}\n\n\t// removes any unused blocks or categories\n\tconst [prunedCategories, count] = pruneUnused(manifest.categories);\n\n\tmanifest.categories = prunedCategories;\n\n\tif (count > 0) {\n\t\tlog.step(`Removed ${count} unused block${count > 1 ? 's' : ''}.`);\n\t}\n\n\tif (config.preview) {\n\t\tconst blocks = manifest.categories.flatMap((cat) =>\n\t\t\tcat.blocks.filter((b) => b.list).map((b) => `${color.cyan(b.category)}/${b.name}`)\n\t\t);\n\n\t\tlog.message(`${color.yellow('Preview')}:`);\n\n\t\tfor (const block of blocks) {\n\t\t\tconsole.log(`${ascii.VERTICAL_LINE}  ◻ ${block}`);\n\t\t}\n\t}\n\n\tif (options.output) {\n\t\tif (config.outputDir) {\n\t\t\tloading.start(`Copying registry files to \\`${color.cyan(outDir)}\\``);\n\n\t\t\t// copy config files to output directory\n\t\t\tif (manifest.configFiles) {\n\t\t\t\tfor (const file of manifest.configFiles) {\n\t\t\t\t\tconst originalPath = path.join(options.cwd, file.path);\n\t\t\t\t\tconst destPath = path.join(outDir, file.path);\n\n\t\t\t\t\tconst containing = path.join(destPath, '../');\n\n\t\t\t\t\tif (!fs.existsSync(containing)) {\n\t\t\t\t\t\tfs.mkdirSync(containing, { recursive: true });\n\t\t\t\t\t}\n\n\t\t\t\t\tfs.copyFileSync(originalPath, destPath);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// copy the files for each block in each category\n\t\t\tfor (const category of manifest.categories) {\n\t\t\t\tfor (const block of category.blocks) {\n\t\t\t\t\tconst originalPath = path.join(options.cwd, block.directory);\n\t\t\t\t\tconst newDirPath = path.join(outDir, block.directory);\n\n\t\t\t\t\tfor (const file of block.files) {\n\t\t\t\t\t\tconst containing = path.join(newDirPath, file, '../');\n\n\t\t\t\t\t\tif (!fs.existsSync(containing)) {\n\t\t\t\t\t\t\tfs.mkdirSync(containing, { recursive: true });\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfs.copyFileSync(path.join(originalPath, file), path.join(newDirPath, file));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tloading.stop(`Copied registry files to \\`${color.cyan(outDir)}\\``);\n\t\t}\n\n\t\tloading.start(`Writing output to \\`${color.cyan(manifestOut)}\\``);\n\n\t\t// write manifest\n\t\tfs.writeFileSync(manifestOut, JSON.stringify(manifest, null, '\\t'));\n\n\t\tloading.stop(`Wrote output to \\`${color.cyan(manifestOut)}\\``);\n\t}\n};\n\nexport const createManifest = (\n\tcategories: Category[],\n\tconfigFiles: Manifest['configFiles'],\n\tconfig: RegistryConfig\n) => {\n\tconst manifest: Manifest = {\n\t\tmeta: config.meta,\n\t\tpeerDependencies: config.peerDependencies,\n\t\tconfigFiles,\n\t\tcategories,\n\t};\n\n\treturn manifest;\n};\n\nexport { build };\n","import fs from 'node:fs';\nimport { cancel, confirm, isCancel, select } from '@clack/prompts';\nimport color from 'chalk';\nimport { Argument, Command, program } from 'commander';\nimport { execa } from 'execa';\nimport { resolveCommand } from 'package-manager-detector/commands';\nimport { detect } from 'package-manager-detector/detect';\nimport path from 'pathe';\nimport * as v from 'valibot';\nimport * as ascii from '../utils/ascii';\nimport { resolveTree } from '../utils/blocks';\nimport * as url from '../utils/blocks/ts/url';\nimport { isTestFile } from '../utils/build';\nimport { type ProjectConfig, getProjectConfig, resolvePaths } from '../utils/config';\nimport {\n\ttype ConcurrentTask,\n\tintro,\n\tpromptInstallDependencies,\n\trunTasksConcurrently,\n\tspinner,\n} from '../utils/prompts';\nimport * as registry from '../utils/registry-providers/internal';\n\nconst schema = v.objectWithRest(\n\t{\n\t\trepo: v.optional(v.string()),\n\t\tallow: v.boolean(),\n\t\tcache: v.boolean(),\n\t\tverbose: v.boolean(),\n\t\tcwd: v.string(),\n\t},\n\tv.unknown()\n);\n\ntype Options = v.InferInput<typeof schema>;\n\nconst exec = new Command('exec')\n\t.alias('x')\n\t.description('Execute a block as a script.')\n\t.addArgument(\n\t\tnew Argument(\n\t\t\t'script',\n\t\t\t'Name of the script you want to execute. ex: (general/hello, github/ieedan/std/general/hello)'\n\t\t).argOptional()\n\t)\n\t.option('--repo <repo>', 'Repository to download and run the script from.')\n\t.option('-A, --allow', 'Allow jsrepo to download code from the provided repo.', false)\n\t.option('--no-cache', 'Disable caching of resolved git urls.')\n\t.option('--verbose', 'Include debug logs.', false)\n\t.option('--cwd <path>', 'The current working directory.', process.cwd())\n\t.allowExcessArguments()\n\t.allowUnknownOption()\n\t.action(async (script, opts, command) => {\n\t\tconst options = v.parse(schema, opts);\n\n\t\tawait intro();\n\n\t\tawait _exec(script, options, command);\n\t});\n\n// biome-ignore lint/suspicious/noExplicitAny: we don't have a type for command\nconst _exec = async (s: string | undefined, options: Options, command: any) => {\n\tconst verbose = (msg: string) => {\n\t\tif (options.verbose) {\n\t\t\tconsole.info(`${ascii.INFO} ${msg}`);\n\t\t}\n\t};\n\n\tlet script = s;\n\n\tconst loading = spinner({ verbose: options.verbose ? verbose : undefined });\n\n\tconst configResult = getProjectConfig(options.cwd);\n\n\t/** The user has opted for no config */\n\tconst noConfig = configResult.isErr();\n\n\tlet config: ProjectConfig;\n\n\tif (configResult.isErr()) {\n\t\t// add default config used for default values in prompts\n\t\tconfig = {\n\t\t\t$schema: '',\n\t\t\tincludeTests: false,\n\t\t\twatermark: true,\n\t\t\tpaths: {\n\t\t\t\t'*': './',\n\t\t\t},\n\t\t\trepos: [],\n\t\t};\n\t} else {\n\t\tconfig = configResult.unwrap();\n\t}\n\n\tlet repoPaths = config.repos;\n\n\t// we just want to override all others if supplied via the CLI\n\tif (options.repo) repoPaths = [options.repo];\n\n\tconst provider = script ? registry.selectProvider(script) : undefined;\n\n\t// we are only getting repos for blocks that specified repos\n\tif (script && provider) {\n\t\tconst { url: repo } = provider.parse(script, { fullyQualified: true });\n\n\t\tif (!repoPaths.find((repoPath) => repoPath === repo)) {\n\t\t\tif (!options.allow) {\n\t\t\t\tconst result = await confirm({\n\t\t\t\t\tmessage: `Allow ${ascii.JSREPO} to download and run code from ${color.cyan(repo)}?`,\n\t\t\t\t\tinitialValue: true,\n\t\t\t\t});\n\n\t\t\t\tif (isCancel(result) || !result) {\n\t\t\t\t\tcancel('Canceled!');\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\trepoPaths = [repo];\n\t\t}\n\t}\n\n\tif (!options.allow && options.repo) {\n\t\tconst result = await confirm({\n\t\t\tmessage: `Allow ${ascii.JSREPO} to download and run code from ${color.cyan(options.repo)}?`,\n\t\t\tinitialValue: true,\n\t\t});\n\n\t\tif (isCancel(result) || !result) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\t}\n\n\tif (repoPaths.length === 0) {\n\t\tif (noConfig) {\n\t\t\tprogram.error(\n\t\t\t\tcolor.red(\n\t\t\t\t\t`Fully quality your script ex: (github/ieedan/std/scripts/build) or provide the \\`${color.bold(\n\t\t\t\t\t\t'--repo'\n\t\t\t\t\t)}\\` flag to specify a registry.`\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tprogram.error(\n\t\t\tcolor.red(\n\t\t\t\t`There were no repos present in your config and you didn't provide the \\`${color.bold(\n\t\t\t\t\t'--repo'\n\t\t\t\t)}\\` flag with a repo.`\n\t\t\t)\n\t\t);\n\t}\n\n\tloading.start(`Fetching scripts from ${color.cyan(repoPaths.join(', '))}`);\n\n\tconst resolvedRepos: registry.RegistryProviderState[] = (\n\t\tawait registry.forEachPathGetProviderState(repoPaths, { noCache: !options.cache })\n\t).match(\n\t\t(val) => val,\n\t\t({ repo, message }) => {\n\t\t\tloading.stop(`Failed to get info for ${color.cyan(repo)}`);\n\t\t\tprogram.error(color.red(message));\n\t\t}\n\t);\n\n\tconst blocksMap = (await registry.fetchBlocks(...resolvedRepos)).match(\n\t\t(val) => val,\n\t\t({ repo, message }) => {\n\t\t\tloading.stop(`Failed fetching scripts from ${color.cyan(repo)}`);\n\t\t\tprogram.error(color.red(message));\n\t\t}\n\t);\n\n\tloading.stop(`Retrieved scripts from ${color.cyan(repoPaths.join(', '))}`);\n\n\t// if no blocks are provided prompt the user for what blocks they want\n\tif (!script) {\n\t\tconst promptResult = await select({\n\t\t\tmessage: 'Select which script to run.',\n\t\t\toptions: Array.from(blocksMap.entries())\n\t\t\t\t.filter(([_, value]) => value.list)\n\t\t\t\t.map(([key, value]) => {\n\t\t\t\t\tlet label: string;\n\n\t\t\t\t\t// show the full repo if there are multiple repos\n\t\t\t\t\tif (repoPaths.length > 1) {\n\t\t\t\t\t\tlabel = `${color.cyan(url.join(value.sourceRepo.url, value.category))}/${value.name}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlabel = `${color.cyan(value.category)}/${value.name}`;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlabel: label,\n\t\t\t\t\t\tvalue: key,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t});\n\n\t\tif (isCancel(promptResult)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tscript = promptResult as string;\n\t}\n\n\tconst installingBlocks = (await resolveTree([script], blocksMap, resolvedRepos)).match(\n\t\t(val) => val,\n\t\t(err) => program.error(err)\n\t);\n\n\tconst tempDirBase = 'temp-jsrepo-exec';\n\n\tconst tempDirectoryRelative = `./${tempDirBase}/${encodeURIComponent(script)}`;\n\n\tconst tempDirectory = path.join(process.cwd(), tempDirectoryRelative);\n\n\tconfig.paths['*'] = tempDirectoryRelative;\n\n\tfs.mkdirSync(tempDirectory, { recursive: true });\n\n\tconst pm = (await detect({ cwd: process.cwd() }))?.agent ?? 'npm';\n\n\tconst tasks: ConcurrentTask[] = [];\n\n\tconst devDeps: Set<string> = new Set<string>();\n\tconst deps: Set<string> = new Set<string>();\n\n\tconst resolvedPathsResult = resolvePaths(config.paths, options.cwd);\n\n\tif (resolvedPathsResult.isErr()) {\n\t\tprogram.error(color.red(resolvedPathsResult.unwrapErr()));\n\t}\n\n\tconst resolvedPaths = resolvedPathsResult.unwrap();\n\n\tconst addedBlocks: string[] = [];\n\n\tfor (const block of installingBlocks) {\n\t\tconst fullSpecifier = `${block.sourceRepo.url}/${block.category}/${block.name}`;\n\t\tconst shortSpecifier = `${block.category}/${block.name}`;\n\n\t\tconst providerInfo = block.sourceRepo;\n\n\t\tconst directory = path.join(options.cwd, resolvedPaths['*'], block.category);\n\n\t\taddedBlocks.push(shortSpecifier);\n\n\t\ttasks.push({\n\t\t\trun: async ({ message }) => {\n\t\t\t\tmessage(`Adding ${color.cyan(fullSpecifier)}`);\n\n\t\t\t\t// in case the directory didn't already exist\n\t\t\t\tfs.mkdirSync(directory, { recursive: true });\n\n\t\t\t\tconst files: { content: string; destPath: string }[] = [];\n\n\t\t\t\tconst getSourceFile = async (filePath: string) => {\n\t\t\t\t\tconst content = await registry.fetchRaw(providerInfo, filePath);\n\n\t\t\t\t\tif (content.isErr()) {\n\t\t\t\t\t\tloading.stop(color.red(`Error fetching ${color.bold(filePath)}`));\n\t\t\t\t\t\tprogram.error(\n\t\t\t\t\t\t\tcolor.red(`There was an error trying to get ${fullSpecifier}`)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn content.unwrap();\n\t\t\t\t};\n\n\t\t\t\tfor (const sourceFile of block.files) {\n\t\t\t\t\tif (!config.includeTests && isTestFile(sourceFile)) continue;\n\n\t\t\t\t\tconst sourcePath = path.join(block.directory, sourceFile);\n\n\t\t\t\t\tlet destPath: string;\n\t\t\t\t\tif (block.subdirectory) {\n\t\t\t\t\t\tdestPath = path.join(directory, block.name, sourceFile);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdestPath = path.join(directory, sourceFile);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst content = await getSourceFile(sourcePath);\n\n\t\t\t\t\tconst pathFolder = destPath.slice(0, destPath.length - sourceFile.length);\n\n\t\t\t\t\tfs.mkdirSync(pathFolder, {\n\t\t\t\t\t\trecursive: true,\n\t\t\t\t\t});\n\n\t\t\t\t\tfiles.push({ content, destPath });\n\t\t\t\t}\n\n\t\t\t\tfor (const file of files) {\n\t\t\t\t\tfs.writeFileSync(file.destPath, file.content);\n\t\t\t\t}\n\n\t\t\t\tif (config.includeTests && block.tests) {\n\t\t\t\t\tconst { devDependencies } = JSON.parse(\n\t\t\t\t\t\tfs.readFileSync(path.join(options.cwd, 'package.json')).toString()\n\t\t\t\t\t);\n\n\t\t\t\t\tif (devDependencies === undefined || devDependencies.vitest === undefined) {\n\t\t\t\t\t\tdevDeps.add('vitest');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (const dep of block.devDependencies) {\n\t\t\t\t\tdevDeps.add(dep);\n\t\t\t\t}\n\n\t\t\t\tfor (const dep of block.dependencies) {\n\t\t\t\t\tdeps.add(dep);\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t}\n\n\tawait runTasksConcurrently({\n\t\tstartMessage: 'Adding blocks',\n\t\tstopMessage: `Added ${color.cyan(addedBlocks.join(', '))}`,\n\t\tloading,\n\t\ttasks,\n\t});\n\n\tconst hasDependencies = deps.size > 0 || devDeps.size > 0;\n\n\t// create temporary package.json\n\tif (hasDependencies) {\n\t\t// add package.json\n\t\tconst packageContent = {\n\t\t\tname: 'temp-package',\n\t\t\ttype: 'module',\n\t\t\tversion: '0.0.1',\n\t\t};\n\n\t\tconst packagePath = path.join(tempDirectory, 'package.json');\n\n\t\tfs.writeFileSync(packagePath, JSON.stringify(packageContent, null, '\\t'));\n\t}\n\n\tawait promptInstallDependencies(deps, devDeps, {\n\t\tyes: true,\n\t\tno: false,\n\t\tcwd: tempDirectory,\n\t\tpm,\n\t\tignoreWorkspace: true,\n\t});\n\n\tconst startIndex = (command.parent.rawArgs as string[]).findIndex((arg) => arg === '--');\n\n\tlet passthroughArgs: string[] = [];\n\n\tif (startIndex !== -1) {\n\t\tpassthroughArgs = command.parent.rawArgs.slice(startIndex + 1);\n\t}\n\n\tverbose(`Passing args ${color.cyan(passthroughArgs.join(' '))}`);\n\n\t// run the cli\n\n\tconsole.clear();\n\n\tconst runningBlock = installingBlocks[0];\n\n\tlet file: string;\n\n\t// tsx seems to be smart enough to figure out if it is a .ts file\n\tif (runningBlock.subdirectory) {\n\t\tfile = path.join(tempDirectory, `${runningBlock.category}/${runningBlock.name}/index.js`);\n\t} else {\n\t\tfile = path.join(tempDirectory, `${runningBlock.category}/${runningBlock.name}.js`);\n\t}\n\n\tconst cmd = resolveCommand(pm, 'execute', ['tsx', file, ...passthroughArgs]);\n\n\tif (!cmd) {\n\t\tprogram.error(color.red('Error resolving run command!'));\n\t}\n\n\ttry {\n\t\tawait execa(cmd.command, cmd.args, {\n\t\t\tcwd: process.cwd(),\n\t\t\tstdin: process.stdin,\n\t\t\tstdout: process.stdout,\n\t\t});\n\t} finally {\n\t\tfs.rmSync(path.join(process.cwd(), tempDirBase), { recursive: true, force: true });\n\t}\n};\n\nexport { exec };\n","import fs from 'node:fs';\nimport {\n\tcancel,\n\tconfirm,\n\tisCancel,\n\tlog,\n\tmultiselect,\n\toutro,\n\tpassword,\n\tselect,\n\tspinner,\n\ttext,\n} from '@clack/prompts';\nimport color from 'chalk';\nimport { Command, Option, program } from 'commander';\nimport { createPathsMatcher } from 'get-tsconfig';\nimport { detect, resolveCommand } from 'package-manager-detector';\nimport path from 'pathe';\nimport * as v from 'valibot';\nimport * as ascii from '../utils/ascii';\nimport * as u from '../utils/blocks/ts/url';\nimport {\n\ttype Formatter,\n\tPROJECT_CONFIG_NAME,\n\ttype Paths,\n\ttype ProjectConfig,\n\tREGISTRY_CONFIG_NAME,\n\tformatterSchema,\n\tgetProjectConfig,\n\tgetRegistryConfig,\n} from '../utils/config';\nimport { packageJson } from '../utils/context';\nimport { formatFile, matchJSDescendant, tryGetTsconfig } from '../utils/files';\nimport { loadFormatterConfig } from '../utils/format';\nimport { json } from '../utils/language-support';\nimport { checkPreconditions } from '../utils/preconditions';\nimport {\n\ttype Task,\n\tintro,\n\tnextSteps,\n\tpromptInstallDependencies,\n\tpromptUpdateFile,\n\trunTasks,\n} from '../utils/prompts';\nimport * as registry from '../utils/registry-providers/internal';\nimport { TokenManager } from '../utils/token-manager';\n\nconst schema = v.object({\n\trepos: v.optional(v.array(v.string())),\n\twatermark: v.boolean(),\n\ttests: v.optional(v.boolean()),\n\tformatter: v.optional(formatterSchema),\n\tproject: v.optional(v.boolean()),\n\tregistry: v.optional(v.boolean()),\n\tscript: v.string(),\n\texpand: v.boolean(),\n\tmaxUnchanged: v.number(),\n\tyes: v.boolean(),\n\tcache: v.boolean(),\n\tcwd: v.string(),\n});\n\ntype Options = v.InferInput<typeof schema>;\n\nconst init = new Command('init')\n\t.description('Initializes your project with a configuration file.')\n\t.argument('[registries...]', 'Registries to install the blocks from.', [])\n\t.option('--repos [repos...]', 'Repository to install the blocks from. (DEPRECATED)')\n\t.option(\n\t\t'--no-watermark',\n\t\t'Will not add a watermark to each file upon adding it to your project.'\n\t)\n\t.option('--tests', 'Will include tests with the blocks.')\n\t.addOption(\n\t\tnew Option(\n\t\t\t'--formatter <formatter>',\n\t\t\t'What formatter to use when adding or updating blocks.'\n\t\t).choices(['prettier', 'biome'])\n\t)\n\t.option('-P, --project', 'Takes you through the steps to initialize a project.')\n\t.option('-R, --registry', 'Takes you through the steps to initialize a registry.')\n\t.option(\n\t\t'--script <name>',\n\t\t'The name of the build script. (For Registry setup)',\n\t\t'build:registry'\n\t)\n\t.option('-E, --expand', 'Expands the diff so you see the entire file.', false)\n\t.option(\n\t\t'--max-unchanged <number>',\n\t\t'Maximum unchanged lines that will show without being collapsed.',\n\t\t(val) => Number.parseInt(val), // this is such a dumb api thing\n\t\t3\n\t)\n\t.option('-y, --yes', 'Skip confirmation prompt.', false)\n\t.option('--no-cache', 'Disable caching of resolved git urls.')\n\t.option('--cwd <path>', 'The current working directory.', process.cwd())\n\t.action(async (registries, opts) => {\n\t\tconst options = v.parse(schema, opts);\n\n\t\tawait intro();\n\n\t\tif (options.registry !== undefined && options.project !== undefined) {\n\t\t\tprogram.error(\n\t\t\t\tcolor.red(\n\t\t\t\t\t`You cannot provide both ${color.bold('--project')} and ${color.bold('--registry')} at the same time.`\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tif (options.repos !== undefined) {\n\t\t\tlog.warn(\n\t\t\t\t`The ${color.gray('`--repos`')} flag is deprecated! Instead supply registries as arguments. ${color.cyan(`\\`jsrepo init ${options.repos.join(' ')}\\``)}`\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\toptions.registry === undefined &&\n\t\t\toptions.project === undefined &&\n\t\t\tregistries.length === 0\n\t\t) {\n\t\t\tconst response = await select({\n\t\t\t\tmessage: 'Initialize a project or registry?',\n\t\t\t\toptions: [\n\t\t\t\t\t{ value: 'project', label: 'project' },\n\t\t\t\t\t{ value: 'registry', label: 'registry' },\n\t\t\t\t],\n\t\t\t\tinitialValue: 'project',\n\t\t\t});\n\n\t\t\tif (isCancel(response)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\toptions.project = response === 'project';\n\t\t}\n\n\t\tif (options.project || registries.length > 0) {\n\t\t\tawait _initProject(registries, options);\n\t\t} else {\n\t\t\tawait _initRegistry(options);\n\t\t}\n\n\t\toutro(color.green('All done!'));\n\t});\n\nconst _initProject = async (registries: string[], options: Options) => {\n\tconst initialConfig = getProjectConfig(options.cwd);\n\n\tconst loading = spinner();\n\n\tlet paths: Paths;\n\tlet configFiles: Record<string, string> = {};\n\n\tconst tsconfigResult = tryGetTsconfig(options.cwd).unwrapOr(null);\n\n\tconst defaultPathResult = await text({\n\t\tmessage: 'Please enter a default path to install the blocks',\n\t\tvalidate(value) {\n\t\t\tif (value.trim() === '') return 'Please provide a value';\n\n\t\t\tif (!value.startsWith('./')) {\n\t\t\t\tconst error =\n\t\t\t\t\t'Invalid path alias! If you are intending to use a relative path make sure it starts with `./`';\n\n\t\t\t\tif (tsconfigResult === null) {\n\t\t\t\t\treturn error;\n\t\t\t\t}\n\n\t\t\t\tconst matcher = createPathsMatcher(tsconfigResult);\n\n\t\t\t\tif (matcher) {\n\t\t\t\t\tconst found = matcher(value);\n\n\t\t\t\t\tif (found.length === 0) return error;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tplaceholder: './src/blocks',\n\t\tinitialValue: initialConfig.isOk() ? initialConfig.unwrap().paths['*'] : undefined,\n\t});\n\n\tif (isCancel(defaultPathResult)) {\n\t\tcancel('Canceled!');\n\t\tprocess.exit(0);\n\t}\n\n\tif (initialConfig.isOk()) {\n\t\tpaths = { ...initialConfig.unwrap().paths, '*': defaultPathResult };\n\t\tconfigFiles = initialConfig.unwrap().configFiles ?? {};\n\t} else {\n\t\tpaths = { '*': defaultPathResult };\n\t}\n\n\t// configure formatter\n\tif (!options.formatter) {\n\t\tlet defaultFormatter = initialConfig.isErr()\n\t\t\t? 'none'\n\t\t\t: (initialConfig.unwrap().formatter ?? 'none');\n\n\t\tif (fs.existsSync(path.join(options.cwd, '.prettierrc'))) {\n\t\t\tdefaultFormatter = 'prettier';\n\t\t}\n\n\t\tif (fs.existsSync(path.join(options.cwd, 'biome.json'))) {\n\t\t\tdefaultFormatter = 'biome';\n\t\t}\n\n\t\tconst response = await select({\n\t\t\tmessage: 'Which formatter would you like to use?',\n\t\t\toptions: ['Prettier', 'Biome', 'None'].map((val) => ({\n\t\t\t\tvalue: val.toLowerCase(),\n\t\t\t\tlabel: val,\n\t\t\t})),\n\t\t\tinitialValue: defaultFormatter,\n\t\t});\n\n\t\tif (isCancel(response)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tif (response !== 'none') {\n\t\t\toptions.formatter = response as Formatter;\n\t\t}\n\t}\n\n\tconst repos = Array.from(\n\t\tnew Set([\n\t\t\t...registries,\n\t\t\t...(options.repos ?? []),\n\t\t\t...(initialConfig.isOk() ? initialConfig.unwrap().repos : []),\n\t\t])\n\t);\n\n\tconst deps = new Set<string>();\n\tconst devDeps = new Set<string>();\n\n\tconst setupRepo = async (url: string) => {\n\t\tconst promptResult = await promptForRegistryConfig({\n\t\t\turl,\n\t\t\tpaths,\n\t\t\tconfigFiles,\n\t\t\toptions,\n\t\t\tformatter: options.formatter,\n\t\t});\n\n\t\tfor (const dep of promptResult.dependencies) {\n\t\t\tdeps.add(dep);\n\t\t}\n\n\t\tfor (const dep of promptResult.devDependencies) {\n\t\t\tdevDeps.add(dep);\n\t\t}\n\n\t\tpaths = promptResult.paths;\n\t\tconfigFiles = promptResult.configFiles;\n\t};\n\n\tif (repos.length > 0) {\n\t\tfor (const repo of repos) {\n\t\t\t// if already present in config ask if you would like to set it up\n\t\t\tif (\n\t\t\t\t!registries.find((r) => r === repo) &&\n\t\t\t\tinitialConfig.isOk() &&\n\t\t\t\tinitialConfig.unwrap().repos.find((r) => r === repo)\n\t\t\t) {\n\t\t\t\tconst confirmResult = await confirm({\n\t\t\t\t\tmessage: `Initialize ${repo}?`,\n\t\t\t\t\tinitialValue: options.yes,\n\t\t\t\t});\n\n\t\t\t\tif (isCancel(confirmResult)) {\n\t\t\t\t\tcancel('Canceled!');\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t}\n\n\t\t\t\tif (!confirmResult) continue;\n\t\t\t}\n\n\t\t\tlog.info(`Initializing ${color.cyan(repo)}`);\n\n\t\t\tawait setupRepo(repo);\n\t\t}\n\t}\n\n\twhile (true) {\n\t\tconst confirmResult = await confirm({\n\t\t\tmessage: `Add ${repos.length > 0 ? 'another' : 'a'} repo?`,\n\t\t\tinitialValue: repos.length === 0, // default to yes for first repo\n\t\t});\n\n\t\tif (isCancel(confirmResult)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tif (!confirmResult) break;\n\n\t\tconst result = await text({\n\t\t\tmessage: 'Where should we download the blocks from?',\n\t\t\tplaceholder: 'github/ieedan/std',\n\t\t\tvalidate: (val) => {\n\t\t\t\tif (val.trim().length === 0) return 'Please provide a value';\n\n\t\t\t\tif (!registry.selectProvider(val)) {\n\t\t\t\t\treturn `Invalid provider! Valid providers (${registry.providers.map((provider) => provider.name).join(', ')})`;\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\n\t\tif (isCancel(result)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tawait setupRepo(result);\n\n\t\trepos.push(result);\n\t}\n\n\tconst config: ProjectConfig = {\n\t\t$schema: `https://unpkg.com/jsrepo@${packageJson.version}/schemas/project-config.json`,\n\t\trepos,\n\t\tincludeTests:\n\t\t\tinitialConfig.isOk() && options.tests === undefined\n\t\t\t\t? initialConfig.unwrap().includeTests\n\t\t\t\t: (options.tests ?? false),\n\t\twatermark: options.watermark,\n\t\tformatter: options.formatter,\n\t\tconfigFiles,\n\t\tpaths,\n\t};\n\n\tloading.start(`Writing config to \\`${PROJECT_CONFIG_NAME}\\``);\n\n\tconst { prettierOptions, biomeOptions } = await loadFormatterConfig({\n\t\tformatter: config.formatter,\n\t\tcwd: options.cwd,\n\t});\n\n\tconst configPath = path.join(options.cwd, PROJECT_CONFIG_NAME);\n\n\tconst configContent = await json.format(JSON.stringify(config, null, '\\t'), {\n\t\tbiomeOptions,\n\t\tprettierOptions,\n\t\tfilePath: configPath,\n\t\tformatter: config.formatter,\n\t});\n\n\tif (!fs.existsSync(options.cwd)) {\n\t\tfs.mkdirSync(options.cwd, { recursive: true });\n\t}\n\n\tfs.writeFileSync(configPath, configContent);\n\n\tloading.stop(`Wrote config to \\`${PROJECT_CONFIG_NAME}\\`.`);\n\n\tconst pm = (await detect({ cwd: options.cwd }))?.agent ?? 'npm';\n\n\tconst installResult = await promptInstallDependencies(deps, devDeps, {\n\t\tyes: options.yes,\n\t\tcwd: options.cwd,\n\t\tpm,\n\t});\n\n\tif (installResult.dependencies.size > 0 || installResult.devDependencies.size > 0) {\n\t\t// next steps if they didn't install dependencies\n\t\tlet steps = [];\n\n\t\tif (!installResult.installed) {\n\t\t\tif (deps.size > 0) {\n\t\t\t\tconst cmd = resolveCommand(pm, 'add', [...deps]);\n\n\t\t\t\tsteps.push(\n\t\t\t\t\t`Install dependencies \\`${color.cyan(`${cmd?.command} ${cmd?.args.join(' ')}`)}\\``\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (devDeps.size > 0) {\n\t\t\t\tconst cmd = resolveCommand(pm, 'add', [...devDeps, '-D']);\n\n\t\t\t\tsteps.push(\n\t\t\t\t\t`Install dev dependencies \\`${color.cyan(`${cmd?.command} ${cmd?.args.join(' ')}`)}\\``\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// put steps with numbers above here\n\t\tsteps = steps.map((step, i) => `${i + 1}. ${step}`);\n\n\t\tif (!installResult.installed) {\n\t\t\tsteps.push('');\n\t\t}\n\n\t\tsteps.push(`Add blocks with ${color.cyan('jsrepo add')}!`);\n\n\t\tconst next = nextSteps(steps);\n\n\t\tprocess.stdout.write(next);\n\t}\n};\n\nconst promptForRegistryConfig = async ({\n\turl,\n\tpaths,\n\tconfigFiles,\n\tformatter,\n\toptions,\n}: {\n\turl: string;\n\tpaths: Paths;\n\tconfigFiles: Record<string, string>;\n\tformatter: ProjectConfig['formatter'];\n\toptions: Options;\n}): Promise<{\n\tpaths: Paths;\n\tconfigFiles: Record<string, string>;\n\tdependencies: string[];\n\tdevDependencies: string[];\n}> => {\n\tconst loading = spinner();\n\n\tconst storage = new TokenManager();\n\n\tconst provider = registry.selectProvider(url);\n\n\tif (!provider) {\n\t\tprogram.error(\n\t\t\tcolor.red(\n\t\t\t\t`Invalid provider! Valid providers (${registry.providers.map((provider) => provider.name).join(', ')})`\n\t\t\t)\n\t\t);\n\t}\n\n\tlet tokenKey: string = provider.name;\n\n\tif (provider.name === registry.http.name) {\n\t\tconst parsed = registry.http.parse(url, { fullyQualified: false });\n\n\t\t// this is safe since we had to parse the url earlier to get the provider\n\t\tconst registryUrl = new URL(parsed.url);\n\n\t\ttokenKey = `http-${registryUrl.origin}`;\n\t}\n\n\tconst token = storage.get(tokenKey);\n\n\t// don't ask if the provider is a custom domain\n\tif (!token && !options.yes) {\n\t\tconst result = await confirm({\n\t\t\tmessage: 'Would you like to add an auth token?',\n\t\t\tinitialValue: false,\n\t\t});\n\n\t\tif (isCancel(result)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tif (result) {\n\t\t\tconst response = await password({\n\t\t\t\tmessage: 'Paste your token',\n\t\t\t\tvalidate(value) {\n\t\t\t\t\tif (value.trim() === '') return 'Please provide a value';\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (isCancel(response)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tstorage.set(tokenKey, response);\n\t\t}\n\t}\n\n\tloading.start(`Fetching manifest from ${color.cyan(url)}`);\n\n\tconst providerState = (await registry.getProviderState(url, { noCache: !options.cache })).match(\n\t\t(v) => v,\n\t\t(err) => program.error(color.red(err))\n\t);\n\n\tconst manifest = (await registry.fetchManifest(providerState)).match(\n\t\t(v) => v,\n\t\t(err) => program.error(color.red(err))\n\t);\n\n\tloading.stop(`Fetched manifest from ${color.cyan(url)}`);\n\n\tcheckPreconditions(providerState, manifest, options.cwd);\n\n\tconst dependencies: string[] = [];\n\tconst devDependencies: string[] = [];\n\n\t// setup config files\n\tif (manifest.configFiles) {\n\t\tconst { prettierOptions, biomeOptions } = await loadFormatterConfig({\n\t\t\tformatter: formatter,\n\t\t\tcwd: options.cwd,\n\t\t});\n\n\t\tfor (const file of manifest.configFiles) {\n\t\t\tif (file.optional && !options.yes) {\n\t\t\t\tconst result = await confirm({\n\t\t\t\t\tmessage: `Would you like to add the ${file.name} file?`,\n\t\t\t\t\tinitialValue: true,\n\t\t\t\t});\n\n\t\t\t\tif (isCancel(result)) {\n\t\t\t\t\tcancel('Canceled!');\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t}\n\n\t\t\t\tif (!result) continue;\n\t\t\t}\n\n\t\t\tdependencies.push(...(file.dependencies ?? []));\n\t\t\tdevDependencies.push(...(file.devDependencies ?? []));\n\n\t\t\t// get the path to the file from the user\n\t\t\tif (!configFiles[file.name]) {\n\t\t\t\tconst result = await text({\n\t\t\t\t\tmessage: `Where is your ${file.name} file?`,\n\t\t\t\t\tdefaultValue: file.expectedPath,\n\t\t\t\t\tinitialValue: file.expectedPath,\n\t\t\t\t\tplaceholder: file.expectedPath,\n\t\t\t\t\tvalidate(value) {\n\t\t\t\t\t\tif (value.trim() === '') return 'Please provide a value';\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tif (isCancel(result)) {\n\t\t\t\t\tcancel('Canceled!');\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t}\n\n\t\t\t\tconfigFiles[file.name] = result;\n\t\t\t}\n\n\t\t\tlet fullFilePath = path.join(options.cwd, configFiles[file.name]);\n\n\t\t\tlet fileContents: string | undefined;\n\n\t\t\tif (fs.existsSync(fullFilePath)) {\n\t\t\t\tfileContents = fs.readFileSync(fullFilePath).toString();\n\t\t\t} else {\n\t\t\t\tconst dir = path.dirname(fullFilePath);\n\n\t\t\t\tif (fs.existsSync(dir)) {\n\t\t\t\t\tconst matchedPath = matchJSDescendant(fullFilePath);\n\n\t\t\t\t\tif (matchedPath) {\n\t\t\t\t\t\tfileContents = fs.readFileSync(matchedPath).toString();\n\n\t\t\t\t\t\tconst newPath = path.relative(options.cwd, matchedPath);\n\n\t\t\t\t\t\tlog.warn(\n\t\t\t\t\t\t\t`Located ${color.bold(configFiles[file.name])} at ${color.bold(newPath)}`\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// update path\n\t\t\t\t\t\tconfigFiles[file.name] = newPath;\n\n\t\t\t\t\t\tfullFilePath = path.join(options.cwd, newPath);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tloading.start(`Fetching the ${color.cyan(file.name)} from ${color.cyan(url)}`);\n\n\t\t\tconst remoteContent = (await registry.fetchRaw(providerState, file.path)).match(\n\t\t\t\t(v) => v,\n\t\t\t\t(err) => program.error(color.red(err))\n\t\t\t);\n\n\t\t\tconst originalRemoteContent = await formatFile({\n\t\t\t\tfile: {\n\t\t\t\t\tcontent: remoteContent,\n\t\t\t\t\tdestPath: fullFilePath,\n\t\t\t\t},\n\t\t\t\tbiomeOptions,\n\t\t\t\tprettierOptions,\n\t\t\t\tformatter,\n\t\t\t});\n\n\t\t\tloading.stop(`Fetched the ${color.cyan(file.name)} from ${color.cyan(url)}`);\n\n\t\t\tlet acceptedChanges = options.yes || fileContents === undefined;\n\n\t\t\tif (fileContents) {\n\t\t\t\tif (!options.yes) {\n\t\t\t\t\tconst from = u.join(providerState.url, file.name);\n\n\t\t\t\t\tconst updateResult = await promptUpdateFile({\n\t\t\t\t\t\tconfig: { biomeOptions, prettierOptions, formatter },\n\t\t\t\t\t\tcurrent: {\n\t\t\t\t\t\t\tcontent: fileContents,\n\t\t\t\t\t\t\tpath: fullFilePath,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tincoming: {\n\t\t\t\t\t\t\tcontent: originalRemoteContent,\n\t\t\t\t\t\t\tpath: from,\n\t\t\t\t\t\t},\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t...options,\n\t\t\t\t\t\t\tloading,\n\t\t\t\t\t\t\tno: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\t\tif (updateResult.applyChanges) {\n\t\t\t\t\t\tacceptedChanges = true;\n\t\t\t\t\t\tfileContents = updateResult.updatedContent;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst dir = path.dirname(fullFilePath);\n\n\t\t\t\tif (!fs.existsSync(dir)) {\n\t\t\t\t\tfs.mkdirSync(dir, { recursive: true });\n\t\t\t\t}\n\n\t\t\t\tfileContents = originalRemoteContent;\n\t\t\t}\n\n\t\t\tif (acceptedChanges && fileContents) {\n\t\t\t\tloading.start(`Writing ${color.cyan(file.name)} to ${color.cyan(fullFilePath)}`);\n\n\t\t\t\tfs.writeFileSync(fullFilePath, fileContents);\n\n\t\t\t\tloading.stop(`Wrote ${color.cyan(file.name)} to ${color.cyan(fullFilePath)}`);\n\t\t\t}\n\t\t}\n\t}\n\n\t// configure category paths\n\tif (!options.yes) {\n\t\tconst configurePaths = await multiselect({\n\t\t\tmessage: 'Which category paths would you like to configure?',\n\t\t\toptions: manifest.categories.map((cat) => ({ label: cat.name, value: cat.name })),\n\t\t\trequired: false,\n\t\t});\n\n\t\tif (isCancel(configurePaths)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tif (configurePaths.length > 0) {\n\t\t\tfor (const category of configurePaths) {\n\t\t\t\tconst configuredValue = paths[category];\n\n\t\t\t\tconst categoryPath = await text({\n\t\t\t\t\tmessage: `Where should ${category} be added in your project?`,\n\t\t\t\t\tvalidate(value) {\n\t\t\t\t\t\tif (value.trim() === '') return 'Please provide a value';\n\t\t\t\t\t},\n\t\t\t\t\tplaceholder: configuredValue ? configuredValue : `./src/${category}`,\n\t\t\t\t\tdefaultValue: configuredValue,\n\t\t\t\t\tinitialValue: configuredValue,\n\t\t\t\t});\n\n\t\t\t\tif (isCancel(categoryPath)) {\n\t\t\t\t\tcancel('Canceled!');\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t}\n\n\t\t\t\tpaths[category] = categoryPath;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { paths, configFiles, dependencies, devDependencies };\n};\n\nconst _initRegistry = async (options: Options) => {\n\tconst loading = spinner();\n\n\tconst packagePath = path.join(options.cwd, 'package.json');\n\n\tif (!fs.existsSync(packagePath)) {\n\t\tprogram.error(color.red(`Couldn't find your ${color.bold('package.json')}!`));\n\t}\n\n\tlet config = getRegistryConfig(options.cwd).match(\n\t\t(val) => val,\n\t\t(err) => program.error(color.red(err))\n\t);\n\n\tconst noConfig = config === null;\n\n\tif (!config) {\n\t\tconfig = {\n\t\t\t$schema: '',\n\t\t\tdirs: [],\n\t\t\tdoNotListBlocks: [],\n\t\t\tdoNotListCategories: [],\n\t\t\tlistBlocks: [],\n\t\t\tlistCategories: [],\n\t\t\texcludeDeps: [],\n\t\t\tincludeBlocks: [],\n\t\t\tincludeCategories: [],\n\t\t\texcludeBlocks: [],\n\t\t\texcludeCategories: [],\n\t\t\tpreview: false,\n\t\t};\n\t}\n\n\tconfig.$schema = `https://unpkg.com/jsrepo@${packageJson.version}/schemas/registry-config.json`;\n\n\twhile (true) {\n\t\tif (config.dirs.length > 0) {\n\t\t\tconst confirmResult = await confirm({\n\t\t\t\tmessage: 'Add another blocks directory?',\n\t\t\t\tinitialValue: false,\n\t\t\t});\n\n\t\t\tif (isCancel(confirmResult)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tif (!confirmResult) break;\n\t\t}\n\n\t\tconst response = await text({\n\t\t\tmessage: 'Where are your blocks located?',\n\t\t\tplaceholder: './src',\n\t\t\tdefaultValue: './src',\n\t\t\tinitialValue: './src',\n\t\t\tvalidate: (val) => {\n\t\t\t\tif (val.trim().length === 0) return 'Please provide a value!';\n\t\t\t},\n\t\t});\n\n\t\tif (isCancel(response)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tconfig.dirs.push(response);\n\t}\n\n\tconst pkg = JSON.parse(fs.readFileSync(packagePath).toString());\n\n\t// continue asking until the user either chooses to overwrite or inputs a script that doesn't exist yet\n\twhile (!options.yes && pkg.scripts && pkg.scripts[options.script]) {\n\t\tconst response = await confirm({\n\t\t\tmessage: `The \\`${color.cyan(options.script)}\\` already exists overwrite?`,\n\t\t\tinitialValue: false,\n\t\t});\n\n\t\tif (isCancel(response)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tif (!response) {\n\t\t\tconst response = await text({\n\t\t\t\tmessage: 'What would you like to call the script?',\n\t\t\t\tplaceholder: 'build:registry',\n\t\t\t\tvalidate: (val) => {\n\t\t\t\t\tif (val.trim().length === 0) return 'Please provide a value!';\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (isCancel(response)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\toptions.script = response;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tconst alreadyInstalled = pkg.devDependencies && pkg.devDependencies.jsrepo !== undefined;\n\n\tlet installAsDevDependency = options.yes || alreadyInstalled;\n\n\tif (!options.yes && !alreadyInstalled) {\n\t\tconst response = await confirm({\n\t\t\tmessage: `Add ${ascii.JSREPO} as a dev dependency?`,\n\t\t\tinitialValue: true,\n\t\t});\n\n\t\tif (isCancel(response)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tinstallAsDevDependency = response;\n\t}\n\n\tlet jsonConfig = !noConfig;\n\n\tif (!options.yes && noConfig) {\n\t\tconst response = await confirm({\n\t\t\tmessage: `Create a \\`${color.cyan(REGISTRY_CONFIG_NAME)}\\` file?`,\n\t\t\tinitialValue: true,\n\t\t});\n\n\t\tif (isCancel(response)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tjsonConfig = response;\n\t}\n\n\tconst pm = (await detect({ cwd: 'cwd' }))?.agent ?? 'npm';\n\n\tlet buildScript = '';\n\n\tif (installAsDevDependency) {\n\t\tbuildScript += 'jsrepo build';\n\t} else {\n\t\tconst command = resolveCommand(pm, 'execute', ['jsrepo', 'build']);\n\n\t\tif (!command) program.error(color.red(`Error resolving execute command for ${pm}`));\n\n\t\tbuildScript += `${command.command} ${command.args.join(' ')} `;\n\t}\n\n\t// if we aren't using a config file configure the command with the correct flags\n\tif (!jsonConfig) {\n\t\tbuildScript += ` --dirs ${config.dirs.join(' ')} `;\n\t}\n\n\t// ensure we are adding to an object that exists\n\tif (pkg.scripts === undefined) {\n\t\tpkg.scripts = {};\n\t}\n\n\tpkg.scripts[options.script] = buildScript;\n\n\tconst tasks: Task[] = [];\n\n\ttasks.push({\n\t\tloadingMessage: `Adding \\`${color.cyan(options.script)}\\` to scripts in package.json`,\n\t\tcompletedMessage: `Added \\`${color.cyan(options.script)}\\` to scripts in package.json`,\n\t\trun: async () => {\n\t\t\ttry {\n\t\t\t\tfs.writeFileSync(packagePath, JSON.stringify(pkg, null, '\\t'));\n\t\t\t} catch (err) {\n\t\t\t\tprogram.error(\n\t\t\t\t\tcolor.red(`Error writing to \\`${color.bold(packagePath)}\\`. Error: ${err}`)\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t});\n\n\tif (jsonConfig) {\n\t\ttasks.push({\n\t\t\tloadingMessage: `Writing config to \\`${color.cyan(REGISTRY_CONFIG_NAME)}\\``,\n\t\t\tcompletedMessage: `Wrote config to \\`${color.cyan(REGISTRY_CONFIG_NAME)}\\``,\n\t\t\trun: async () => {\n\t\t\t\tconst configPath = path.join(options.cwd, REGISTRY_CONFIG_NAME);\n\n\t\t\t\ttry {\n\t\t\t\t\tfs.writeFileSync(path.join(configPath), JSON.stringify(config, null, '\\t'));\n\t\t\t\t} catch (err) {\n\t\t\t\t\tprogram.error(\n\t\t\t\t\t\tcolor.red(`Error writing to \\`${color.bold(configPath)}\\`. Error: ${err}`)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t}\n\n\tawait runTasks(tasks, { loading });\n\n\tlet installed = alreadyInstalled;\n\n\tif (installAsDevDependency && !alreadyInstalled) {\n\t\tconst installedResult = await promptInstallDependencies(new Set(), new Set(['jsrepo']), {\n\t\t\tcwd: options.cwd,\n\t\t\tpm,\n\t\t\tyes: options.yes,\n\t\t});\n\n\t\tinstalled = installedResult.installed;\n\t}\n\n\tlet steps: string[] = [];\n\n\tif (!installed && installAsDevDependency) {\n\t\tconst cmd = resolveCommand(pm, 'add', ['jsrepo', '-D']);\n\n\t\tsteps.push(\n\t\t\t`Install ${ascii.JSREPO} as a dev dependency \\`${color.cyan(`${cmd?.command} ${cmd?.args.join(' ')}`)}\\``\n\t\t);\n\t}\n\n\tsteps.push(`Add categories to \\`${color.cyan(config.dirs.join(', '))}\\`.`);\n\n\tconst runScript = resolveCommand(pm, 'run', [options.script]);\n\n\tsteps.push(\n\t\t`Run \\`${color.cyan(`${runScript?.command} ${runScript?.args.join(' ')}`)}\\` to build the registry.`\n\t);\n\n\t// put steps with numbers above here\n\tsteps = steps.map((step, i) => `${i + 1}. ${step}`);\n\n\tconst next = nextSteps(steps);\n\n\tprocess.stdout.write(next);\n};\n\nexport { init };\n","import fs from 'node:fs';\nimport { cancel, confirm, isCancel, outro } from '@clack/prompts';\nimport color from 'chalk';\nimport { Argument, Command, program } from 'commander';\nimport { execa } from 'execa';\nimport oxc from 'oxc-parser';\nimport { resolveCommand } from 'package-manager-detector/commands';\nimport { detect } from 'package-manager-detector/detect';\nimport path from 'pathe';\nimport * as v from 'valibot';\nimport * as ascii from '../utils/ascii';\nimport { getInstalled } from '../utils/blocks';\nimport * as url from '../utils/blocks/ts/url';\nimport { isTestFile } from '../utils/build';\nimport { getPathForBlock, getProjectConfig, resolvePaths } from '../utils/config';\nimport { intro, spinner } from '../utils/prompts';\nimport * as registry from '../utils/registry-providers/internal';\n\nconst schema = v.object({\n\trepo: v.optional(v.string()),\n\tallow: v.boolean(),\n\tdebug: v.boolean(),\n\tcache: v.boolean(),\n\tverbose: v.boolean(),\n\tcwd: v.string(),\n});\n\ntype Options = v.InferInput<typeof schema>;\n\nconst test = new Command('test')\n\t.description('Tests local blocks against most recent remote tests.')\n\t.addArgument(new Argument('[blocks...]', 'The blocks you want to test.').default([]))\n\t.option('--repo <repo>', 'Repository to download the blocks from.')\n\t.option('-A, --allow', 'Allow jsrepo to download code from the provided repo.', false)\n\t.option('--debug', 'Leaves the temp test file around for debugging upon failure.', false)\n\t.option('--no-cache', 'Disable caching of resolved git urls.')\n\t.option('--verbose', 'Include debug logs.', false)\n\t.option('--cwd <path>', 'The current working directory.', process.cwd())\n\t.action(async (blockNames, opts) => {\n\t\tconst options = v.parse(schema, opts);\n\n\t\tawait intro();\n\n\t\tawait _test(blockNames, options);\n\n\t\toutro(color.green('All done!'));\n\t});\n\nconst _test = async (blockNames: string[], options: Options) => {\n\tconst verbose = (msg: string) => {\n\t\tif (options.verbose) {\n\t\t\tconsole.info(`${ascii.INFO} ${msg}`);\n\t\t}\n\t};\n\n\tverbose(`Attempting to test ${JSON.stringify(blockNames)}`);\n\n\tconst config = getProjectConfig(options.cwd).match(\n\t\t(val) => val,\n\t\t(err) => program.error(color.red(err))\n\t);\n\n\tconst loading = spinner({ verbose: options.verbose ? verbose : undefined });\n\n\tlet repoPaths = config.repos;\n\n\t// we just want to override all others if supplied via the CLI\n\tif (options.repo) repoPaths = [options.repo];\n\n\tif (!options.allow && options.repo) {\n\t\tconst result = await confirm({\n\t\t\tmessage: `Allow ${color.cyan('jsrepo')} to download and run code from ${color.cyan(options.repo)}?`,\n\t\t\tinitialValue: true,\n\t\t});\n\n\t\tif (isCancel(result) || !result) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\t}\n\n\tif (!options.verbose) loading.start(`Fetching blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tconst resolvedRepos: registry.RegistryProviderState[] = (\n\t\tawait registry.forEachPathGetProviderState(repoPaths, { noCache: !options.cache })\n\t).match(\n\t\t(val) => val,\n\t\t({ repo, message }) => {\n\t\t\tloading.stop(`Failed to get info for ${color.cyan(repo)}`);\n\t\t\tprogram.error(color.red(message));\n\t\t}\n\t);\n\n\tverbose(`Resolved ${color.cyan(repoPaths.join(', '))}`);\n\n\tverbose(`Fetching blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tconst blocksMap: Map<string, registry.RemoteBlock> = (\n\t\tawait registry.fetchBlocks(...resolvedRepos)\n\t).match(\n\t\t(val) => val,\n\t\t({ repo, message }) => {\n\t\t\tloading.stop(`Failed fetching blocks from ${color.cyan(repo)}`);\n\t\t\tprogram.error(color.red(message));\n\t\t}\n\t);\n\n\tverbose(`Retrieved blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tif (!options.verbose) loading.stop(`Retrieved blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tconst tempTestDirectory = path.resolve(\n\t\tpath.join(options.cwd, `blocks-tests-temp-${Date.now()}`)\n\t);\n\n\tverbose(`Trying to create the temp directory ${color.bold(tempTestDirectory)}.`);\n\n\tfs.mkdirSync(tempTestDirectory, { recursive: true });\n\n\tconst cleanUp = () => {\n\t\tfs.rmSync(tempTestDirectory, { recursive: true, force: true });\n\t};\n\n\tconst installedBlocks = getInstalled(blocksMap, config, options.cwd).map(\n\t\t(val) => val.specifier\n\t);\n\n\tlet testingBlocks = blockNames;\n\n\t// in the case that we want to test all files\n\tif (blockNames.length === 0) {\n\t\ttestingBlocks = installedBlocks;\n\t}\n\n\tif (testingBlocks.length === 0) {\n\t\tcleanUp();\n\t\tprogram.error(color.red('There were no blocks found in your project!'));\n\t}\n\n\tconst testingBlocksMapped: { name: string; block: registry.RemoteBlock }[] = [];\n\n\tfor (const blockSpecifier of testingBlocks) {\n\t\tlet block: registry.RemoteBlock | undefined = undefined;\n\n\t\tconst provider = registry.selectProvider(blockSpecifier);\n\n\t\t// if the block starts with github (or another provider) we know it has been resolved\n\t\tif (!provider) {\n\t\t\tfor (const repo of repoPaths) {\n\t\t\t\t// we unwrap because we already checked this\n\t\t\t\tconst provider = registry.selectProvider(repo);\n\n\t\t\t\tif (!provider) continue;\n\n\t\t\t\tconst { url: parsedRepo, specifier } = provider.parse(\n\t\t\t\t\turl.join(repo, blockSpecifier),\n\t\t\t\t\t{\n\t\t\t\t\t\tfullyQualified: true,\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tconst tempBlock = blocksMap.get(url.join(parsedRepo, specifier!));\n\n\t\t\t\tif (tempBlock === undefined) continue;\n\n\t\t\t\tblock = tempBlock;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tconst { url: repo } = provider.parse(blockSpecifier, { fullyQualified: true });\n\n\t\t\tconst providerState = (await registry.getProviderState(repo)).match(\n\t\t\t\t(val) => val,\n\t\t\t\t(err) => program.error(color.red(err))\n\t\t\t);\n\n\t\t\tconst map = (await registry.fetchBlocks(providerState)).match(\n\t\t\t\t(val) => val,\n\t\t\t\t(err) => program.error(color.red(err))\n\t\t\t);\n\n\t\t\tfor (const [k, v] of map) {\n\t\t\t\tblocksMap.set(k, v);\n\t\t\t}\n\n\t\t\tblock = blocksMap.get(blockSpecifier);\n\t\t}\n\n\t\tif (!block) {\n\t\t\tprogram.error(\n\t\t\t\tcolor.red(`Invalid block! ${color.bold(blockSpecifier)} does not exist!`)\n\t\t\t);\n\t\t}\n\n\t\ttestingBlocksMapped.push({ name: blockSpecifier, block });\n\t}\n\n\tconst resolvedPaths = resolvePaths(config.paths, options.cwd).match(\n\t\t(v) => v,\n\t\t(err) => program.error(color.red(err))\n\t);\n\n\tfor (const { block } of testingBlocksMapped) {\n\t\tconst providerState = block.sourceRepo;\n\n\t\tconst fullSpecifier = url.join(block.sourceRepo.url, block.category, block.name);\n\n\t\tif (!options.verbose) {\n\t\t\tloading.start(`Setting up test file for ${color.cyan(fullSpecifier)}`);\n\t\t}\n\n\t\tif (!block.tests) {\n\t\t\tloading.stop(`No tests found for ${color.cyan(fullSpecifier)}`);\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet directory = getPathForBlock(block, resolvedPaths, options.cwd);\n\n\t\tdirectory = path.relative(tempTestDirectory, directory);\n\n\t\tconst getSourceFile = async (filePath: string) => {\n\t\t\tconst content = await registry.fetchRaw(providerState, filePath);\n\n\t\t\tif (content.isErr()) {\n\t\t\t\tloading.stop(color.red(`Error fetching ${color.bold(filePath)}`));\n\t\t\t\tprogram.error(color.red(`There was an error trying to get ${fullSpecifier}`));\n\t\t\t}\n\n\t\t\treturn content.unwrap();\n\t\t};\n\n\t\tverbose(`Downloading and copying test files for ${fullSpecifier}`);\n\n\t\tconst testFiles: string[] = [];\n\n\t\tfor (const testFile of block.files.filter((file) => isTestFile(file))) {\n\t\t\tconst content = await getSourceFile(path.join(block.directory, testFile));\n\n\t\t\tconst destPath = path.join(tempTestDirectory, testFile);\n\n\t\t\tfs.writeFileSync(destPath, content);\n\n\t\t\ttestFiles.push(destPath);\n\t\t}\n\n\t\t// resolve imports for the block\n\t\tfor (const file of testFiles) {\n\t\t\tverbose(`Opening test file ${file}`);\n\n\t\t\tlet code = fs.readFileSync(file).toString();\n\n\t\t\tconst result = oxc.parseSync(file, code);\n\n\t\t\tfor (const mod of result.module.staticImports) {\n\t\t\t\tconst moduleSpecifier = mod.moduleRequest.value;\n\n\t\t\t\tlet newModuleSpecifier: string | undefined = undefined;\n\n\t\t\t\tif (moduleSpecifier.startsWith('.')) {\n\t\t\t\t\tif (block.subdirectory) {\n\t\t\t\t\t\tnewModuleSpecifier = path.join(directory, block.name, moduleSpecifier);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewModuleSpecifier = path.join(directory, moduleSpecifier);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (newModuleSpecifier) {\n\t\t\t\t\tcode = code.replaceAll(moduleSpecifier, newModuleSpecifier);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfs.writeFileSync(file, code);\n\t\t}\n\n\t\tverbose(`Completed ${color.cyan.bold(fullSpecifier)} test file`);\n\n\t\tif (!options.verbose) {\n\t\t\tloading.stop(`Completed setup for ${color.bold(fullSpecifier)}`);\n\t\t}\n\t}\n\n\tverbose('Beginning testing');\n\n\tconst pm = await detect({ cwd: options.cwd });\n\n\tif (pm == null) {\n\t\tprogram.error(color.red('Could not detect package manager'));\n\t}\n\n\tconst resolved = resolveCommand(pm.agent, 'execute', ['vitest', 'run', tempTestDirectory]);\n\n\tif (resolved == null) {\n\t\tprogram.error(color.red(`Could not resolve add command for '${pm.agent}'.`));\n\t}\n\n\tconst testCommand = `${resolved.command} ${resolved.args.join(' ')}`;\n\n\tverbose(`Running ${color.cyan(testCommand)} on ${color.cyan(options.cwd)}`);\n\n\ttry {\n\t\tawait execa(resolved.command, resolved.args, {\n\t\t\tcwd: options.cwd,\n\t\t\tstdin: process.stdin,\n\t\t\tstdout: process.stdout,\n\t\t});\n\n\t\tcleanUp();\n\t} catch (err) {\n\t\tif (options.debug) {\n\t\t\tconsole.info(\n\t\t\t\t`${color.bold('--debug')} flag provided. Skipping cleanup. Run '${color.bold(\n\t\t\t\t\ttestCommand\n\t\t\t\t)}' to retry tests.\\n`\n\t\t\t);\n\t\t} else {\n\t\t\tcleanUp();\n\t\t}\n\n\t\tprogram.error(color.red(`Tests failed! Error ${err}`));\n\t}\n};\n\nexport { test };\n","import fs from 'node:fs';\nimport { cancel, confirm, isCancel, multiselect, outro } from '@clack/prompts';\nimport color from 'chalk';\nimport { Command, program } from 'commander';\nimport { resolveCommand } from 'package-manager-detector/commands';\nimport { detect } from 'package-manager-detector/detect';\nimport * as v from 'valibot';\nimport * as ascii from '../utils/ascii';\nimport { getBlockFilePath, getInstalled, preloadBlocks, resolveTree } from '../utils/blocks';\nimport * as url from '../utils/blocks/ts/url';\nimport { getProjectConfig, resolvePaths } from '../utils/config';\nimport { transformRemoteContent } from '../utils/files';\nimport { loadFormatterConfig } from '../utils/format';\nimport { getWatermark } from '../utils/get-watermark';\nimport { checkPreconditions } from '../utils/preconditions';\nimport {\n\tintro,\n\tnextSteps,\n\tpromptInstallDependencies,\n\tpromptUpdateFile,\n\tspinner,\n} from '../utils/prompts';\nimport * as registry from '../utils/registry-providers/internal';\n\nconst schema = v.object({\n\tall: v.boolean(),\n\texpand: v.boolean(),\n\tmaxUnchanged: v.number(),\n\tno: v.boolean(),\n\trepo: v.optional(v.string()),\n\tallow: v.boolean(),\n\tyes: v.boolean(),\n\tcache: v.boolean(),\n\tverbose: v.boolean(),\n\tcwd: v.string(),\n});\n\ntype Options = v.InferInput<typeof schema>;\n\nconst update = new Command('update')\n\t.description('Update blocks to the code in the remote repository.')\n\t.argument('[blocks...]', 'Names of the blocks you want to update. ex: (utils/math)')\n\t.option('--all', 'Update all installed components.', false)\n\t.option('-E, --expand', 'Expands the diff so you see the entire file.', false)\n\t.option(\n\t\t'--max-unchanged <number>',\n\t\t'Maximum unchanged lines that will show without being collapsed.',\n\t\t(val) => Number.parseInt(val), // this is such a dumb api thing\n\t\t3\n\t)\n\t.option('-n, --no', 'Do update any blocks.', false)\n\t.option('--repo <repo>', 'Repository to download the blocks from.')\n\t.option('-A, --allow', 'Allow jsrepo to download code from the provided repo.', false)\n\t.option('-y, --yes', 'Skip confirmation prompt.', false)\n\t.option('--no-cache', 'Disable caching of resolved git urls.')\n\t.option('--verbose', 'Include debug logs.', false)\n\t.option('--cwd <path>', 'The current working directory.', process.cwd())\n\t.action(async (blockNames, opts) => {\n\t\tconst options = v.parse(schema, opts);\n\n\t\tawait intro();\n\n\t\tawait _update(blockNames, options);\n\n\t\toutro(color.green('All done!'));\n\t});\n\nconst _update = async (blockNames: string[], options: Options) => {\n\tconst verbose = (msg: string) => {\n\t\tif (options.verbose) {\n\t\t\tconsole.info(`${ascii.INFO} ${msg}`);\n\t\t}\n\t};\n\n\tverbose(`Attempting to update ${JSON.stringify(blockNames)}`);\n\n\tconst loading = spinner({ verbose: options.verbose ? verbose : undefined });\n\n\tconst config = getProjectConfig(options.cwd).match(\n\t\t(val) => val,\n\t\t(err) => program.error(color.red(err))\n\t);\n\n\tlet repoPaths = config.repos;\n\n\t// we just want to override all others if supplied via the CLI\n\tif (options.repo) repoPaths = [options.repo];\n\n\t// ensure blocks do not provide repos\n\tfor (const blockSpecifier of blockNames) {\n\t\tif (registry.providers.find((p) => blockSpecifier.startsWith(p.name))) {\n\t\t\tprogram.error(\n\t\t\t\tcolor.red(\n\t\t\t\t\t`Invalid value provided for block names \\`${color.bold(blockSpecifier)}\\`. Block names are expected to be provided in the format of \\`${color.bold('<category>/<name>')}\\``\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\tif (!options.allow && options.repo) {\n\t\tconst result = await confirm({\n\t\t\tmessage: `Allow ${color.cyan('jsrepo')} to download and run code from ${color.cyan(options.repo)}?`,\n\t\t\tinitialValue: true,\n\t\t});\n\n\t\tif (isCancel(result) || !result) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\t}\n\n\tverbose(`Resolving ${color.cyan(repoPaths.join(', '))}`);\n\n\tif (!options.verbose) loading.start(`Fetching blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tconst resolvedRepos: registry.RegistryProviderState[] = (\n\t\tawait registry.forEachPathGetProviderState(repoPaths, { noCache: !options.cache })\n\t).match(\n\t\t(val) => val,\n\t\t({ repo, message }) => {\n\t\t\tloading.stop(`Failed to get info for ${color.cyan(repo)}`);\n\t\t\tprogram.error(color.red(message));\n\t\t}\n\t);\n\n\tverbose(`Resolved ${color.cyan(repoPaths.join(', '))}`);\n\n\tverbose(`Fetching blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tconst manifests = (await registry.fetchManifests(...resolvedRepos)).match(\n\t\t(v) => v,\n\t\t({ repo, message }) => {\n\t\t\tloading.stop(`Failed fetching blocks from ${color.cyan(repo)}`);\n\t\t\tprogram.error(color.red(message));\n\t\t}\n\t);\n\n\tconst blocksMap = registry.getRemoteBlocks(manifests);\n\n\tif (!options.verbose) loading.stop(`Retrieved blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tverbose(`Retrieved blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tfor (const manifest of manifests) {\n\t\tcheckPreconditions(manifest.state, manifest.manifest, options.cwd);\n\t}\n\n\tconst installedBlocks = getInstalled(blocksMap, config, options.cwd);\n\n\tif (installedBlocks.length === 0) {\n\t\tprogram.error(\n\t\t\tcolor.red(\n\t\t\t\t`You haven't installed any blocks yet. Did you mean to \\`${color.bold('add')}\\`?`\n\t\t\t)\n\t\t);\n\t}\n\n\tlet updatingBlockNames = blockNames;\n\n\tif (options.all) {\n\t\tupdatingBlockNames = installedBlocks.map((block) => block.specifier);\n\t}\n\n\t// if no blocks are provided prompt the user for what blocks they want\n\tif (updatingBlockNames.length === 0) {\n\t\tconst promptResult = await multiselect({\n\t\t\tmessage: `Which blocks would you like to ${options.no ? 'diff' : 'update'}?`,\n\t\t\toptions: installedBlocks\n\t\t\t\t.filter((b) => b.block.list)\n\t\t\t\t.map((block) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlabel: `${color.cyan(block.block.category)}/${block.block.name}`,\n\t\t\t\t\t\tvalue: block.specifier,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\trequired: true,\n\t\t});\n\n\t\tif (isCancel(promptResult)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tupdatingBlockNames = promptResult as string[];\n\t}\n\n\tverbose(`Preparing to update ${color.cyan(updatingBlockNames.join(', '))}`);\n\n\tconst updatingBlocks = (await resolveTree(updatingBlockNames, blocksMap, resolvedRepos)).match(\n\t\t(val) => val,\n\t\tprogram.error\n\t);\n\n\tconst devDeps: Set<string> = new Set<string>();\n\tconst deps: Set<string> = new Set<string>();\n\n\tconst { prettierOptions, biomeOptions } = await loadFormatterConfig({\n\t\tformatter: config.formatter,\n\t\tcwd: options.cwd,\n\t});\n\n\tconst resolvedPaths = resolvePaths(config.paths, options.cwd).match(\n\t\t(v) => v,\n\t\t(err) => program.error(color.red(err))\n\t);\n\n\tconst preloadedBlocks = preloadBlocks(updatingBlocks, config);\n\n\tfor (const preloadedBlock of preloadedBlocks) {\n\t\tconst fullSpecifier = url.join(\n\t\t\tpreloadedBlock.block.sourceRepo.url,\n\t\t\tpreloadedBlock.block.category,\n\t\t\tpreloadedBlock.block.name\n\t\t);\n\n\t\tconst watermark = getWatermark(preloadedBlock.block.sourceRepo.url);\n\n\t\tverbose(`Attempting to update ${fullSpecifier}`);\n\n\t\tif (config.includeTests && preloadedBlock.block.tests) {\n\t\t\tverbose('Trying to include tests');\n\n\t\t\tdevDeps.add('vitest');\n\t\t}\n\n\t\tfor (const dep of preloadedBlock.block.devDependencies) {\n\t\t\tdevDeps.add(dep);\n\t\t}\n\n\t\tfor (const dep of preloadedBlock.block.dependencies) {\n\t\t\tdeps.add(dep);\n\t\t}\n\n\t\tconst files = await preloadedBlock.files;\n\n\t\tprocess.stdout.write(`${ascii.VERTICAL_LINE}\\n`);\n\n\t\tprocess.stdout.write(`${ascii.VERTICAL_LINE}  ${fullSpecifier}\\n`);\n\n\t\tfor (const file of files) {\n\t\t\tconst content = file.content.match(\n\t\t\t\t(v) => v,\n\t\t\t\t(err) => program.error(color.red(err))\n\t\t\t);\n\n\t\t\tconst destPath = getBlockFilePath(\n\t\t\t\tfile.name,\n\t\t\t\tpreloadedBlock.block,\n\t\t\t\tresolvedPaths,\n\t\t\t\toptions.cwd\n\t\t\t);\n\n\t\t\tconst remoteContent = (\n\t\t\t\tawait transformRemoteContent({\n\t\t\t\t\tfile: {\n\t\t\t\t\t\tcontent,\n\t\t\t\t\t\tdestPath: destPath,\n\t\t\t\t\t},\n\t\t\t\t\tbiomeOptions,\n\t\t\t\t\tprettierOptions,\n\t\t\t\t\tconfig,\n\t\t\t\t\timports: preloadedBlock.block._imports_,\n\t\t\t\t\twatermark,\n\t\t\t\t\tverbose,\n\t\t\t\t\tcwd: options.cwd,\n\t\t\t\t})\n\t\t\t).match(\n\t\t\t\t(v) => v,\n\t\t\t\t(err) => program.error(color.red(err))\n\t\t\t);\n\n\t\t\tlet localContent = '';\n\t\t\tif (fs.existsSync(destPath)) {\n\t\t\t\tlocalContent = fs.readFileSync(destPath).toString();\n\t\t\t}\n\n\t\t\tconst updateResult = await promptUpdateFile({\n\t\t\t\tconfig: { biomeOptions, prettierOptions, formatter: config.formatter },\n\t\t\t\tcurrent: {\n\t\t\t\t\tpath: destPath,\n\t\t\t\t\tcontent: localContent,\n\t\t\t\t},\n\t\t\t\tincoming: {\n\t\t\t\t\tpath: url.join(fullSpecifier, file.name),\n\t\t\t\t\tcontent: remoteContent,\n\t\t\t\t},\n\t\t\t\toptions: {\n\t\t\t\t\t...options,\n\t\t\t\t\tloading,\n\t\t\t\t\tverbose: options.verbose ? verbose : undefined,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (updateResult.applyChanges) {\n\t\t\t\tloading.start(`Writing changes to ${color.cyan(destPath)}`);\n\n\t\t\t\tfs.writeFileSync(destPath, updateResult.updatedContent);\n\n\t\t\t\tloading.stop(`Wrote changes to ${color.cyan(destPath)}.`);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst pm = (await detect({ cwd: options.cwd }))?.agent ?? 'npm';\n\n\tconst installResult = await promptInstallDependencies(deps, devDeps, {\n\t\tyes: options.yes,\n\t\tno: options.no,\n\t\tcwd: options.cwd,\n\t\tpm,\n\t});\n\n\tif (installResult.dependencies.size > 0 || installResult.devDependencies.size > 0) {\n\t\t// next steps if they didn't install dependencies\n\t\tlet steps = [];\n\n\t\tif (!installResult.installed) {\n\t\t\tif (deps.size > 0) {\n\t\t\t\tconst cmd = resolveCommand(pm, 'add', [...deps]);\n\n\t\t\t\tsteps.push(\n\t\t\t\t\t`Install dependencies \\`${color.cyan(`${cmd?.command} ${cmd?.args.join(' ')}`)}\\``\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (devDeps.size > 0) {\n\t\t\t\tconst cmd = resolveCommand(pm, 'add', [...devDeps, '-D']);\n\n\t\t\t\tsteps.push(\n\t\t\t\t\t`Install dev dependencies \\`${color.cyan(`${cmd?.command} ${cmd?.args.join(' ')}`)}\\``\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// put steps with numbers above here\n\t\tsteps = steps.map((step, i) => `${i + 1}. ${step}`);\n\n\t\tif (!installResult.installed) {\n\t\t\tsteps.push('');\n\t\t}\n\n\t\tsteps.push('Import and use the blocks!');\n\n\t\tconst next = nextSteps(steps);\n\n\t\tprocess.stdout.write(next);\n\t}\n};\n\nexport { update };\n","import { program } from 'commander';\nimport pkg from '../package.json';\nimport * as commands from './commands';\n\nconst cli = program\n\t.name(pkg.name)\n\t.description(pkg.description)\n\t.version(pkg.version)\n\t.addCommand(commands.add)\n\t.addCommand(commands.auth)\n\t.addCommand(commands.build)\n\t.addCommand(commands.exec)\n\t.addCommand(commands.init)\n\t.addCommand(commands.test)\n\t.addCommand(commands.update);\n\nexport { cli };\n","#!/usr/bin/env node\n\nimport { cli } from './cli';\n\ncli.parse();\n"]}